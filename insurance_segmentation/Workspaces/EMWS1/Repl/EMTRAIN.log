MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 30, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:20:09" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 30, 2015
Time:                15:20:09
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0PFTZXD "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0PFTZXD new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 30, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:20:09" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                D059331";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 30, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:20:09" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                D059331";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
26587      proc freq data=EMWS1.Repl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Repl_VariableSet noprint;
26588      table ROLE*LEVEL/out=WORK.ReplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.ReplMETA;
26589      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS1.REPL_VARIABLESET.
NOTE: The data set WORK.REPLMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

26590      proc print data=WORK.ReplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ReplMETA label noobs;
26591      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
26592      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
26593      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
26594      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
26595      run;

NOTE: There were 4 observations read from the data set WORK.REPLMETA.
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

26596      title10;
MPRINT(EM_DIAGRAM):   title10;
26597      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'insurance_segmentation';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'insurance segmentation';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26931      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
26932      * Repl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Repl: Generation of macros and macro variables;
26933      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
26934      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

26935      %let EMEXCEPTIONSTRING=;
26936      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
26937      * TRAIN: Repl;
MPRINT(EM_DIAGRAM):   * TRAIN: Repl;
26938      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26939      %let EM_ACTION = TRAIN;
26940      %let syscc = 0;
26941      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
26942      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
26943     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
26944     +   filename macFile catalog 'work.emutil.macro.source';
26945     +   %let _METAOBS = 0;
26947     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
26948     +                   or (&metadata eq ) %then %do;
26949     +       %goto doend;
26950     +   %end;
26951     +   data _null_;
26952     +      length _STRING_ $80;
26953     +      retain _STRING_;
26954     +      set &metadata end=eof;
26955     +      file macFile;
26956     +      %if %nrbquote(&where) ne %then %do;
26957     +          %let whereClause = where (%nrbquote(&where));
26958     +          %unquote(&whereClause);
26959     +      %end;
26960     +      if _N_=1 then do;
26961     +         string = "%"!!"macro &name;";
26962     +         put string;
26963     +      end;
26964     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
26965     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
26966     +         if eof then do;
26967     +            put _STRING_;
26968     +            string = "%"!!"mend &name;";
26969     +            put string;
26970     +            %if (&nummacro ne ) %then %do;
26971     +                string = strip(put(_N_, best.));
26972     +                put "%" "global &nummacro;";
26973     +                put "%" "let &nummacro = " string ";";
26974     +                call symput('_METAOBS', string);
26975     +            %end;
26976     +         end;
26977     +      end;
26978     +      else do;
26979     +         put _STRING_;
26980     +         _string_ = TRIM(&key);
26981     +         if eof then do;
26982     +            put _STRING_;
26983     +            string = "%"!!"mend &name;";
26984     +            put string;
26985     +        end;
26986     +      end;
26987     +      if eof then do;
26988     +         string = strip(put(_N_, best.));
26989     +         call symput('_METAOBS', string);
26990     +         %if (&nummacro ne ) %then %do;
26991     +             put "%" "global &nummacro;";
26992     +             put "%" "let &nummacro = " string ";";
26993     +         %end;
26994     +      end;
26995     +   run;
26997     +   %doend:
26998     +   %if ^&_METAOBS %then %do;
26999     +       data _null_;
27000     +          file macFile;
27001     +          put "%" "macro &name;";
27002     +          put "%" "mend &name;";
27003     +          %if (&nummacro ne ) %then %do;
27004     +              put "%" "global &nummacro;";
27005     +              put "%" "let &nummacro = 0;";
27006     +          %end;
27007     +      run;
27008     +   %end;
27009     +   %inc macFile;
27010     +   filename macFile;
27011     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
27012      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
27013       %macro main;
27014      
27015         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
27016         %include temp;
27017         filename temp;
27018      
27019         %if %upcase(&EM_ACTION) = CREATE %then %do;
27020      
27021             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
27022             %include temp;
27023             filename temp;
27024             %create;
27025         %end;
27026         %else
27027         %if %upcase(&EM_ACTION) = TRAIN %then %do;
27028      
27029             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
27030             %include temp;
27031             filename temp;
27032             %train;
27033         %end;
27034         %else
27035         %if %upcase(&EM_ACTION) = SCORE %then %do;
27036      
27037             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
27038             %include temp;
27039             filename temp;
27040             %score;
27041         %end;
27042         %if %upcase(&EM_ACTION) = REPORT %then %do;
27043      
27044             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
27045             %include temp;
27046             filename temp;
27047             %report;
27048         %end;
27049         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
27050             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
27051             %include temp;
27052             filename temp;
27053             %em_replace_openoutclass;
27054         %end;
27055         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
27056             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
27057             %include temp;
27058             filename temp;
27059             %em_replace_closeoutclass;
27060         %end;
27061      %mend main;
27062      
27063      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
27064     +%macro SetProperties;
27065     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
27066     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
27067     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
27068     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
27069     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
27070     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
27071     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
27072     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
27073     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
27074     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
27076     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_TRAIN.SOURCE.
27078     +%macro getLevels(outData=);
27079     +   %if (%EM_BINARY_TARGET %EM_ORDINAL_TARGET %EM_NOMINAL_TARGET
27080     +       %EM_BINARY_INPUT %EM_ORDINAL_INPUT %EM_NOMINAL_INPUT
27081     +       %EM_BINARY_REJECTED %EM_ORDINAL_REJECTED %EM_NOMINAL_REJECTED) eq %then %do;
27082     +       data &outData;
27083     +          length NAME $32 LEVEL $8 FREQUENCY 8 TYPE $1 CRAW $8 NRAW 8 REPLACE_VALUE $200;
27084     +          label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
27085     +                LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
27086     +                FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
27087     +                TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
27088     +                CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
27089     +                NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
27090     +                REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
27091     +          stop;
27092     +       run;
27093     +   %end;
27094     +   %else %do;
27095     +       %em_checkmacro(name=EM_TRAIN_MAXLEVELS, global=Y, value=512);
27096     +        %if "&EM_TRAIN_MAXLEVELS" = "" or "&EM_TRAIN_MAXLEVELS" = "." %then
27097     +            %let EM_TRAIN_MAXLEVELS= 512;
27099     +        proc dmdb data=&EM_IMPORT_DATA dmdbcat=emdmdb maxlevel=&EM_TRAIN_MAXLEVELS nonorm CLASSOUT=&outData(drop=CODE FREQPERCENT NMISSPERCENT);
27100     +          class
27101     +            %EM_BINARY_TARGET
27102     +            %EM_ORDINAL_TARGET
27103     +            %EM_NOMINAL_TARGET
27104     +            %EM_BINARY_INPUT
27105     +            %EM_ORDINAL_INPUT
27106     +            %EM_NOMINAL_INPUT
27107     +            %EM_BINARY_REJECTED
27108     +            %EM_ORDINAL_REJECTED
27109     +            %EM_NOMINAL_REJECTED;
27110     +          %if (%EM_FREQ ne ) %then %do;
27111     +             freq %EM_FREQ;
27112     +         %end;
27113     +       run;
27114     +   %end;
27115     +%mend getLevels;
27117     +%macro makeOutCLass;
27118     +   %em_getname(key=OUTCLASS,  type=DATA);
27119     +   %em_getname(key=NEWVALUES, type=DATA);
27121     +   %let data= REPLACE_DATA;
27122     +   %if %sysfunc(exist(&EM_USER_OUTCLASS)) %then %do;
27123     +       data &data(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
27124     +          set &EM_USER_OUTCLASS;
27125     +          keep NAME TYPE LEVEL REPLACE_VALUE;
27126     +          where REPLACE_VALUE ne '';
27127     +       run;
27128     +       proc sort data=&Data;
27129     +          by NAME TYPE LEVEL;
27130     +       run;
27131     +   %end;
27133     +   %getLevels(outdata=&EM_USER_OUTCLASS);
27135     +   /* Determine Mode */
27136     +   proc sort data=&EM_USER_OUTCLASS;
27137     +      by NAME DESCENDING FREQUENCY;
27138     +   run;
27139     +   data _null_;
27140     +      dsid = open("&EM_USER_OUTCLASS");
27141     +      levelLen = varlen(dsid, varnum(dsid, "LEVEL"));
27142     +      dsid = close(dsid);
27143     +      call symput("levelLen", put(max(levelLen, 9), BEST.));
27144     +   run;
27146     +   data &EM_USER_OUTCLASS;
27147     +      length Name $32 LEVEL $&levelLen;
27148     +      set &EM_USER_OUTCLASS;
27149     +      length REPLACE_VALUE $200;
27150     +      label REPLACE_VALUE="%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
27151     +      by NAME;
27152     +      output;
27153     +      if last.name then do;
27154     +         LEVEL="_UNKNOWN_";
27155     +         Frequency=.;
27156     +         CRAW='';
27157     +         NRAW=.;
27158     +         REPLACE_VALUE="_DEFAULT_";
27159     +         output;
27160     +      end;
27161     +   run;
27163     +   /* If the file is a copy of an existing one.  Merge previously specified values */
27164     +   %if %sysfunc(exist(&EM_USER_NEWVALUES)) and (&EM_USER_NEWVALUES ne ) %then %do;
27165     +       proc sort data=&EM_USER_NEWVALUES(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
27166     +          by NAME TYPE LEVEL;
27167     +       run;
27168     +       proc sort data=&EM_USER_OUTCLASS;
27169     +          by NAME TYPE LEVEL;
27170     +       run;
27171     +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
27172     +          merge &EM_USER_OUTCLASS(in=_a) &EM_USER_NEWVALUES(in=_b);
27173     +          by NAME TYPE LEVEL;
27174     +          if _a then do;
27175     +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
27176     +             output;
27177     +          end;
27178     +       run;
27179     +       %let lib    = %scan(&EM_USER_NEWVALUES, 1, .);
27180     +       %let member = %scan(&EM_USER_NEWVALUES, 2, .);
27181     +       proc datasets lib=&lib nolist;
27182     +          delete &member;
27183     +       run;
27185     +   %end;
27187     +   /*  Update the OUTCLASS data using REPLACEMENT values previously specified */
27188     +   %if %sysfunc(exist(&Data)) %then %do;
27189     +       proc sort data=&EM_USER_OUTCLASS;
27190     +          by NAME TYPE LEVEL;
27191     +       run;
27192     +       proc sort data=&data;
27193     +          by NAME TYPE LEVEL;
27194     +       run;
27195     +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
27196     +          merge &EM_USER_OUTCLASS(in=_a) &Data(in=_b);
27197     +          by NAME TYPE LEVEL;
27198     +          if _a then do;
27199     +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
27200     +             output;
27201     +          end;
27202     +       run;
27203     +   %end;
27204     +   proc sort data=&EM_USER_OUTCLASS;
27205     +      by NAME DESCENDING FREQUENCY;
27206     +   run;
27208     +   %let lib = WORK;
27209     +   %if %index(&EM_USER_OUTCLASS, .) %then %do;
27210     +       %let lib    = %scan(&EM_USER_OUTCLASS, 1, .);
27211     +       %let member = %scan(&EM_USER_OUTCLASS, 2, .);
27212     +   %end;
27213     +   %else
27214     +       %let member = &EM_USER_OUTCLASS;
27216     +   proc datasets lib=&lib nolist;
27217     +      modify &member;
27218     +      label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
27219     +            LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
27220     +            FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
27221     +            TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
27222     +            CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
27223     +            NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
27224     +            REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
27225     +     %if %sysfunc(exist(&data)) %then %do;
27226     +          delete &data;
27227     +     %end;
27228     +   run;
27230     +   /* Create property file.  Only the records with non-missing REPLACE_VALUE */
27231     +   data &EM_USER_NEWVALUES / view=&EM_USER_NEWVALUES;
27232     +      set &EM_USER_OUTCLASS(in=_a);
27233     +      where REPLACE_VALUE ne '';
27234     +      keep NAME TYPE LEVEL REPLACE_VALUE;
27235     +   run;
27236     +%mend makeOutClass;
27238     +%macro makeVarLimits;
27239     +     %let madsString =;
27240     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=MADS,     outStat=work.MADS);
27241     +     %if %sysfunc(exist(work.MADS)) %then %do;
27242     +         %makeLimits(StatsDs=work.MADS, cutoff=&EM_PROPERTY_MADSCUTOFF, method=MADS);
27243     +         %let madsString = MADS;
27244     +         proc append base=work.LIMITS data=work.MADS force;
27245     +         run;
27246     +     %end;
27248     +     %let spacingString = ;
27249     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=SPACINGS, outStat=work.SPACINGS);
27250     +     %if %sysfunc(exist(work.SPACINGS)) %then %do;
27251     +         %makeLimits(StatsDs=work.SPACINGS, cutoff=&EM_PROPERTY_SPACINGSCUTOFF, method=SPACINGS);
27252     +         %let spacingString = SPACING;
27253     +         proc append base=work.LIMITS data=work.SPACINGS force;
27254     +         run;
27255     +     %end;
27257     +     %let percentString = ;
27258     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=PERCENTS, outStat=work.PERCENTS);
27259     +     %if %sysfunc(exist(work.PERCENTS)) %then %do;
27260     +         %makePctLimits(StatsDs=work.PERCENTS);
27261     +         %let percentString = PERCENTS;
27262     +         proc append base=work.LIMITS data=work.PERCENTS(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
27263     +         run;
27264     +     %end;
27266     +     %makeFixedLimits(StatsDs=work.FIXED);
27267     +     %if %sysfunc(exist(work.FIXED)) %then %do;
27268     +         proc append base=work.LIMITS data=work.FIXED(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
27269     +         run;
27270     +     %end;
27272     +     %if %sysfunc(exist(work.LIMITS)) %then %do;
27273     +         proc sort data=work.LIMITS;
27274     +            by NAME;
27275     +         run;
27276     +         %em_getName(key=LIMITS, type=DATA);
27277     +         data &EM_USER_LIMITS;
27278     +              merge work.limits(in=_a) variableSet(keep=NAME ROLE LEVEL LABEL REPLACEMETHOD REPLACEMIN REPLACEMAX LABEL);
27279     +              by NAME;
27280     +              if _a then output;
27281     +         run;
27282     +     %end;
27286     +     %if %upcase(&EM_DEBUG)=_ALL_ %then %do;
27287     +          proc print data=&EM_USER_OUTCLASS;run;
27288     +          proc print data=MADS;run;
27289     +          proc print data=spacings;run;
27290     +          proc print data=percents;run;
27291     +          proc print data=limits;run;
27292     +     %end;
27293     +     proc datasets lib=work nolist;
27294     +        delete &madsString &spacingString &percentString limits;
27295     +     run;
27296     +%mend makeVarLimits;
27298     +%macro stdize(data=, metadata=, method=, outStat=work.StdizeStat);
27300     +    %if &method ne PERCENTS %then %do;
27301     +        %em_varmacro(Name=&method, metadata=&metadata,
27302     +                  where=%nrbquote(CALCMETHOD="&method"));
27303     +    %end;
27304     +    %else %do;
27305     +        %em_varmacro(Name=&method, metadata=&metadata,
27306     +        where=%nrbquote(CALCMETHOD in("STDDEV", "PERCENTS")));
27307     +    %end;
27308     +    %if %&method eq %then %goto doend;
27310     +    %let optionString=&method;
27312     +    %if &method=MADS %then %let optionString = %nrbquote(method=MAD NORM);
27313     +    %else
27314     +        %if &method=SPACINGS %then %let optionString = %nrbquote(method=spacing(50) NORM);
27315     +        %else
27316     +           %if &method=PERCENTS %then %do;
27317     +               %let uCutoff = %sysevalf(100-&em_property_percentsCutoff);
27318     +               %let optionString = pctlpts=&em_property_PercentsCutoff &uCutoff;
27319     +           %end;
27321     +    &em_codebar;
27322     +    * &EM_NODEID: Method &em_property_method;
27323     +    &EM_codebar;
27324     +    proc stdize data=&data outstat=&outstat out=_null_
27325     +       &optionString
27326     +       ;
27327     +       var  %&method;
27328     +       %if %em_freq ne %then %do;
27329     +           freq %em_freq;
27330     +       %end;
27331     +    run;
27333     +    %if &method=MADS or &method=SPACINGS %then %do;
27334     +        proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE));
27335     +           where _TYPE_ in('LOCATION', 'SCALE');
27336     +        run;
27337     +    %end;
27338     +    %else
27339     +        %if &method=PERCENTS %then %do;
27340     +            proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE col3=PMin col4=PMax));
27341     +               where _TYPE_ ^in ('ADD', 'MULT', 'N', 'SumFreqsRead', 'SumFreqsUsed', 'NObsRead', 'NObsUsed', 'NObsMiss');
27342     +           run;
27343     +       %end;
27344     +   %doend:
27345     +%mend stdize;
27347     +%macro makeLimits(StatsDs=, cutoff=, method=);
27348     +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendm;
27349     +    data &StatsDs;
27350     +       set &StatsDs;
27351     +       length CALCMETHOD $10;
27352     +       retain CALCMETHOD "&METHOD";
27353     +       LowerLimit = location - &cutoff*scale;
27354     +       UpperLimit = location + &cutoff*scale;
27355     +       drop location scale;
27356     +       Label LowerLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
27357     +             UpperLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))";
27358     +    run;
27360     +    %doendm:
27361     +%mend makeLimits;
27363     +%macro makeFixedLimits(statsDs=);
27364     +    data &statsDs;
27365     +       set VARIABLESET(where=(CALCMETHOD in('MANUAL', 'METALIMIT')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
27366     +       by NAME;
27367     +       select(CALCMETHOD);
27368     +          when('METALIMIT') do;
27369     +             if UPPERLIMIT eq . and LOWERLIMIT eq . then delete;
27370     +          end;
27371     +          when('MANUAL') do;
27372     +             if INTERVALMIN eq . and INTERVALMAX eq . then delete;
27373     +             else do;
27374     +                LOWERLIMIT = INTERVALMIN;
27375     +                UPPERLIMIT = INTERVALMAX;
27376     +             end;
27377     +          end;
27378     +          otherwise;
27379     +       end;
27380     +    run;
27381     +    %let nobs=0;
27382     +    %let dsid = %sysfunc(open(&statsDs));
27383     +    %if &dsid>0 %then %do;
27384     +        %let nobs = %sysfunc(attrn(&dsid, NOBS));
27385     +        %let dsid = %sysfunc(close(&dsid));
27386     +    %end;
27387     +    %if ^&nobs %then %do;
27388     +        %let nameDs = %scan(&statsDs, 2, .);
27389     +        proc datasets lib=WORK nolist;
27390     +           delete &nameDs;
27391     +         run;
27392     +    %end;
27394     +%mend makeFixedLimits;
27396     +%macro makePctLimits(StatsDs=);
27397     +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendp;
27398     +    data &statsDs;
27399     +       merge &statsDs VARIABLESET(where=(CALCMETHOD in('PERCENTS', 'STDDEV')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
27400     +       by NAME;
27401     +       select(CALCMETHOD);
27402     +          when('PERCENTS') do;
27403     +             if PMIN eq . and PMAX eq . then delete;
27404     +             else do;
27405     +                LOWERLIMIT = PMIN;
27406     +                UPPERLIMIT = PMAX;
27407     +             end;
27408     +          end;
27409     +          when('STDDEV') do;
27410     +              LOWERLIMIT = LOCATION - (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
27411     +              UPPERLIMIT = LOCATION + (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
27412     +          end;
27413     +          otherwise;
27414     +       end;
27415     +    run;
27416     +   %doendp:
27417     +%mend makePctLimits;
27419     +%macro train;
27421     +   %if "&em_import_data" eq "" %then %do;
27422     +       %let emexceptionString = exception.server.IMPORT.NOTRAIN,1;
27423     +       %goto doendm;
27424     +   %end;
27426     +    /* Process Class variables */
27427     +    %makeOutClass;
27429     +    /* Interval Variables */
27430     +     data VARIABLESET;
27431     +        set &EM_DATA_VARIABLESET(where=(LEVEL="INTERVAL" and ((ROLE in("REJECTED", "TARGET") and USE="Y")
27432     +             or (ROLE="INPUT" and USE in("Y", "D")) )));
27433     +        if CALCMETHOD eq "DEFAULT" then CALCMETHOD="&EM_PROPERTY_CALCMETHOD";
27434     +        if CALCMETHOD ^in("NONE", "METALIMIT") or (CALCMETHOD eq "METALIMIT" and ^(LOWERLIMIT eq . and UPPERLIMIT eq .)) then output;
27435     +     run;
27436     +     proc sort data=VARIABLESET out=VARIABLESET;
27437     +        by NAME;
27438     +     run;
27440     +     %let varnum=0;
27441     +     %let dsid = %sysfunc(open(VARIABLESET));
27442     +     %if &dsid>0 %then %do;
27443     +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
27444     +         %let dsid = %sysfunc(close(&dsid));
27445     +     %end;
27446     +     %if ^&varnum %then %do;
27447     +          %em_getName(key=LIMITS, type=DATA);
27448     +          %let limitDs = %scan(&em_user_limits, 2, .);
27449     +          proc datasets lib=&em_lib nolist;
27450     +             delete &limitDs;
27451     +          run;
27452     +     %end;
27453     +     %else %do;
27454     +         %makeVarLimits;
27455     +     %end;
27457     +   %doendm:
27459     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):   data REPLACE_DATA(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
MPRINT(MAKEOUTCLASS):   set EMWS1.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   keep NAME TYPE LEVEL REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   where REPLACE_VALUE ne '';
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 0 observations read from the data set EMWS1.REPL_OUTCLASS.
      WHERE REPLACE_VALUE not = ' ';
NOTE: The data set WORK.REPLACE_DATA has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;

NOTE: Input data set is empty.
NOTE: The data set WORK.REPLACE_DATA has 0 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(GETLEVELS):  ;
MPRINT(GETLEVELS):   proc dmdb data=EMWS1.Ids_DATA dmdbcat=emdmdb maxlevel=512 nonorm CLASSOUT=EMWS1.Repl_OUTCLASS(drop=CODE FREQPERCENT NMISSPERCENT);
MPRINT(GETLEVELS):   class
MPRINT(EM_BINARY_INPUT):   HasChildren
MPRINT(EM_ORDINAL_INPUT):   EducationalDegree
MPRINT(EM_NOMINAL_INPUT):   GeographicLiving
MPRINT(GETLEVELS):  ;
MPRINT(GETLEVELS):   run;

NOTE: Records processed = 10296   Memory used = 511K.
NOTE: View EMWS1.IDS_DATA.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: The data set EMWS1.REPL_OUTCLASS has 13 observations and 6 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):   proc sort data=EMWS1.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME DESCENDING FREQUENCY;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 13 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: The data set EMWS1.REPL_OUTCLASS has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOUTCLASS):   data _null_;
MPRINT(MAKEOUTCLASS):   dsid = open("EMWS1.Repl_OUTCLASS");
MPRINT(MAKEOUTCLASS):   levelLen = varlen(dsid, varnum(dsid, "LEVEL"));
MPRINT(MAKEOUTCLASS):   dsid = close(dsid);
MPRINT(MAKEOUTCLASS):   call symput("levelLen", put(max(levelLen, 9), BEST.));
MPRINT(MAKEOUTCLASS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   data EMWS1.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   length Name $32 LEVEL $ 15;
MPRINT(MAKEOUTCLASS):   set EMWS1.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   length REPLACE_VALUE $200;
MPRINT(MAKEOUTCLASS):   label REPLACE_VALUE= "Replacement Value";
MPRINT(MAKEOUTCLASS):   by NAME;
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   if last.name then do;
MPRINT(MAKEOUTCLASS):   LEVEL="_UNKNOWN_";
MPRINT(MAKEOUTCLASS):   Frequency=.;
MPRINT(MAKEOUTCLASS):   CRAW='';
MPRINT(MAKEOUTCLASS):   NRAW=.;
MPRINT(MAKEOUTCLASS):   REPLACE_VALUE="_DEFAULT_";
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   end;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 13 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: The data set EMWS1.REPL_OUTCLASS has 16 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=EMWS1.Repl_NEWVALUES(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 6 observations read from the data set EMWS1.REPL_NEWVALUES.
NOTE: The data set EMWS1.REPL_NEWVALUES has 6 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=EMWS1.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 16 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: The data set EMWS1.REPL_OUTCLASS has 16 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   data EMWS1.Repl_OUTCLASS(drop=NEW_REPLACE_VALUE);
MPRINT(MAKEOUTCLASS):   merge EMWS1.Repl_OUTCLASS(in=_a) EMWS1.Repl_NEWVALUES(in=_b);
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   if _a then do;
MPRINT(MAKEOUTCLASS):   if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   end;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 16 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: There were 6 observations read from the data set EMWS1.REPL_NEWVALUES.
NOTE: The data set EMWS1.REPL_OUTCLASS has 19 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOUTCLASS):   proc datasets lib=EMWS1 nolist;
MPRINT(MAKEOUTCLASS):   delete Repl_NEWVALUES;
MPRINT(MAKEOUTCLASS):   run;

NOTE: Deleting EMWS1.REPL_NEWVALUES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=EMWS1.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 19 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: The data set EMWS1.REPL_OUTCLASS has 19 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOUTCLASS):   data EMWS1.Repl_OUTCLASS(drop=NEW_REPLACE_VALUE);
MPRINT(MAKEOUTCLASS):   merge EMWS1.Repl_OUTCLASS(in=_a) REPLACE_DATA(in=_b);
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   if _a then do;
MPRINT(MAKEOUTCLASS):   if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   end;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 19 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: There were 0 observations read from the data set WORK.REPLACE_DATA.
NOTE: The data set EMWS1.REPL_OUTCLASS has 19 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   proc sort data=EMWS1.Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME DESCENDING FREQUENCY;
MPRINT(MAKEOUTCLASS):   run;

NOTE: There were 19 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: The data set EMWS1.REPL_OUTCLASS has 19 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEOUTCLASS):   proc datasets lib=EMWS1 nolist;
MPRINT(MAKEOUTCLASS):   modify Repl_OUTCLASS;
MPRINT(MAKEOUTCLASS):   label NAME = "Variable" LEVEL= "Formatted Value" FREQUENCY= "Frequency Count" TYPE= "Type" CRAW= "Character Unformatted Value" NRAW= "Numeric Value" REPLACE_VALUE= "Replacement Value";
NOTE: MODIFY was successful for EMWS1.REPL_OUTCLASS.DATA.
MPRINT(MAKEOUTCLASS):   delete REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   run;

NOTE: The file EMWS1.REPLACE_DATA (memtype=DATA) was not found, but appears on a DELETE statement.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEOUTCLASS):   data EMWS1.Repl_NEWVALUES / view=EMWS1.Repl_NEWVALUES;
MPRINT(MAKEOUTCLASS):   set EMWS1.Repl_OUTCLASS(in=_a);
MPRINT(MAKEOUTCLASS):   where REPLACE_VALUE ne '';
MPRINT(MAKEOUTCLASS):   keep NAME TYPE LEVEL REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   run;

NOTE: DATA STEP view saved on file EMWS1.REPL_NEWVALUES.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data VARIABLESET;
MPRINT(TRAIN):   set EMWS1.Repl_VariableSet(where=(LEVEL="INTERVAL" and ((ROLE in("REJECTED", "TARGET") and USE="Y") or (ROLE="INPUT" and USE in("Y", "D")) )));
MPRINT(TRAIN):   if CALCMETHOD eq "DEFAULT" then CALCMETHOD="NONE";
MPRINT(TRAIN):   if CALCMETHOD ^in("NONE", "METALIMIT") or (CALCMETHOD eq "METALIMIT" and ^(LOWERLIMIT eq . and UPPERLIMIT eq .)) then output;
MPRINT(TRAIN):   run;

NOTE: There were 10 observations read from the data set EMWS1.REPL_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and ((ROLE in ('REJECTED', 'TARGET') and (USE='Y')) or ((ROLE='INPUT') and USE in ('D', 'Y')));
NOTE: The data set WORK.VARIABLESET has 2 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sort data=VARIABLESET out=VARIABLESET;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   run;

NOTE: There were 2 observations read from the data set WORK.VARIABLESET.
NOTE: The data set WORK.VARIABLESET has 2 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set VARIABLESET end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (CALCMETHOD="MADS");
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro MADS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend MADS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend MADS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Wednesday, December 30, 2015 03:20:10 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:10 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO

NOTE: 0 records were written to the file MACFILE.
NOTE: There were 0 observations read from the data set WORK.VARIABLESET.
      WHERE CALCMETHOD='MADS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   put "%" "macro MADS;";
MPRINT(EM_VARMACRO):   put "%" "mend MADS;";
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Wednesday, December 30, 2015 03:20:10 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:10 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO

NOTE: 2 records were written to the file MACFILE.
      The minimum record length was 11.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
27460     +%macro MADS;
27461     +%mend MADS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(STDIZE):  ;
MPRINT(MAKEVARLIMITS):  ;
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set VARIABLESET end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (CALCMETHOD="SPACINGS");
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro SPACINGS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend SPACINGS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend SPACINGS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Wednesday, December 30, 2015 03:20:10 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:10 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO

NOTE: 0 records were written to the file MACFILE.
NOTE: There were 0 observations read from the data set WORK.VARIABLESET.
      WHERE CALCMETHOD='SPACINGS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   put "%" "macro SPACINGS;";
MPRINT(EM_VARMACRO):   put "%" "mend SPACINGS;";
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Wednesday, December 30, 2015 03:20:10 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:10 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO

NOTE: 2 records were written to the file MACFILE.
      The minimum record length was 15.
      The maximum record length was 16.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
27462     +%macro SPACINGS;
27463     +%mend SPACINGS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(STDIZE):  ;
MPRINT(MAKEVARLIMITS):  ;
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set VARIABLESET end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   where (CALCMETHOD in("STDDEV", "PERCENTS"));
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro PERCENTS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend PERCENTS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend PERCENTS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Wednesday, December 30, 2015 03:20:10 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:10 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO

NOTE: 0 records were written to the file MACFILE.
NOTE: There were 0 observations read from the data set WORK.VARIABLESET.
      WHERE CALCMETHOD in ('PERCENTS', 'STDDEV');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   put "%" "macro PERCENTS;";
MPRINT(EM_VARMACRO):   put "%" "mend PERCENTS;";
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Wednesday, December 30, 2015 03:20:10 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:10 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO

NOTE: 2 records were written to the file MACFILE.
      The minimum record length was 15.
      The maximum record length was 16.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
27464     +%macro PERCENTS;
27465     +%mend PERCENTS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(STDIZE):  ;
MPRINT(MAKEVARLIMITS):  ;
MPRINT(MAKEFIXEDLIMITS):   data work.FIXED;
MPRINT(MAKEFIXEDLIMITS):   set VARIABLESET(where=(CALCMETHOD in('MANUAL', 'METALIMIT')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
MPRINT(MAKEFIXEDLIMITS):   by NAME;
MPRINT(MAKEFIXEDLIMITS):   select(CALCMETHOD);
MPRINT(MAKEFIXEDLIMITS):   when('METALIMIT') do;
MPRINT(MAKEFIXEDLIMITS):   if UPPERLIMIT eq . and LOWERLIMIT eq . then delete;
MPRINT(MAKEFIXEDLIMITS):   end;
MPRINT(MAKEFIXEDLIMITS):   when('MANUAL') do;
MPRINT(MAKEFIXEDLIMITS):   if INTERVALMIN eq . and INTERVALMAX eq . then delete;
MPRINT(MAKEFIXEDLIMITS):   else do;
MPRINT(MAKEFIXEDLIMITS):   LOWERLIMIT = INTERVALMIN;
MPRINT(MAKEFIXEDLIMITS):   UPPERLIMIT = INTERVALMAX;
MPRINT(MAKEFIXEDLIMITS):   end;
MPRINT(MAKEFIXEDLIMITS):   end;
MPRINT(MAKEFIXEDLIMITS):   otherwise;
MPRINT(MAKEFIXEDLIMITS):   end;
MPRINT(MAKEFIXEDLIMITS):   run;

NOTE: There were 2 observations read from the data set WORK.VARIABLESET.
      WHERE CALCMETHOD in ('MANUAL', 'METALIMIT');
NOTE: The data set WORK.FIXED has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARLIMITS):  ;
MPRINT(MAKEVARLIMITS):   proc append base=work.LIMITS data=work.FIXED(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
MPRINT(MAKEVARLIMITS):   run;

NOTE: Appending WORK.FIXED to WORK.LIMITS.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 2 observations read from the data set WORK.FIXED.
NOTE: The data set WORK.LIMITS has 2 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARLIMITS):   proc sort data=work.LIMITS;
MPRINT(MAKEVARLIMITS):   by NAME;
MPRINT(MAKEVARLIMITS):   run;

NOTE: There were 2 observations read from the data set WORK.LIMITS.
NOTE: The data set WORK.LIMITS has 2 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARLIMITS):  ;
MPRINT(MAKEVARLIMITS):   data EMWS1.Repl_LIMITS;
MPRINT(MAKEVARLIMITS):   merge work.limits(in=_a) variableSet(keep=NAME ROLE LEVEL LABEL REPLACEMETHOD REPLACEMIN REPLACEMAX LABEL);
MPRINT(MAKEVARLIMITS):   by NAME;
MPRINT(MAKEVARLIMITS):   if _a then output;
MPRINT(MAKEVARLIMITS):   run;

NOTE: There were 2 observations read from the data set WORK.LIMITS.
NOTE: There were 2 observations read from the data set WORK.VARIABLESET.
NOTE: The data set EMWS1.REPL_LIMITS has 2 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARLIMITS):   proc datasets lib=work nolist;
MPRINT(MAKEVARLIMITS):   delete limits;
MPRINT(MAKEVARLIMITS):   run;

NOTE: Deleting WORK.LIMITS (memtype=DATA).
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
27466      
27467      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27468      * End TRAIN: Repl;
MPRINT(EM_DIAGRAM):   * End TRAIN: Repl;
27469      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27470      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27471      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
27472      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27473      ;
MPRINT(EM_DIAGRAM):   ;
27474      ;
MPRINT(EM_DIAGRAM):   ;
27475      ;
MPRINT(EM_DIAGRAM):   ;
27476      ;
MPRINT(EM_DIAGRAM):   ;
27477      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   ;
27478      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
27479      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   quit;
27480      *------------------------------------------------------------*;
27481      /*; *"; *'; */
27482      ;
27483      run;
27484      quit;
27485      /* Reset EM Options */
27486      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
27487      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
27488      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
