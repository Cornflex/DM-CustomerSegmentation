MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 29, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:12:57" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                December 29, 2015
Time:                14:12:57
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0M0HJVV "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0M0HJVV new;
MPRINT(EM_DIAGRAM):   run;
21783      %let EMEXCEPTIONSTRING=;
21784      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21785      * SCORE: Repl;
MPRINT(EM_DIAGRAM):   * SCORE: Repl;
21786      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21787      %let EM_ACTION = SCORE;
21788      %let syscc = 0;
21789      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
21790      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
21791     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
21792     +   filename macFile catalog 'work.emutil.macro.source';
21793     +   %let _METAOBS = 0;
21795     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
21796     +                   or (&metadata eq ) %then %do;
21797     +       %goto doend;
21798     +   %end;
21799     +   data _null_;
21800     +      length _STRING_ $80;
21801     +      retain _STRING_;
21802     +      set &metadata end=eof;
21803     +      file macFile;
21804     +      %if %nrbquote(&where) ne %then %do;
21805     +          %let whereClause = where (%nrbquote(&where));
21806     +          %unquote(&whereClause);
21807     +      %end;
21808     +      if _N_=1 then do;
21809     +         string = "%"!!"macro &name;";
21810     +         put string;
21811     +      end;
21812     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
21813     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
21814     +         if eof then do;
21815     +            put _STRING_;
21816     +            string = "%"!!"mend &name;";
21817     +            put string;
21818     +            %if (&nummacro ne ) %then %do;
21819     +                string = strip(put(_N_, best.));
21820     +                put "%" "global &nummacro;";
21821     +                put "%" "let &nummacro = " string ";";
21822     +                call symput('_METAOBS', string);
21823     +            %end;
21824     +         end;
21825     +      end;
21826     +      else do;
21827     +         put _STRING_;
21828     +         _string_ = TRIM(&key);
21829     +         if eof then do;
21830     +            put _STRING_;
21831     +            string = "%"!!"mend &name;";
21832     +            put string;
21833     +        end;
21834     +      end;
21835     +      if eof then do;
21836     +         string = strip(put(_N_, best.));
21837     +         call symput('_METAOBS', string);
21838     +         %if (&nummacro ne ) %then %do;
21839     +             put "%" "global &nummacro;";
21840     +             put "%" "let &nummacro = " string ";";
21841     +         %end;
21842     +      end;
21843     +   run;
21845     +   %doend:
21846     +   %if ^&_METAOBS %then %do;
21847     +       data _null_;
21848     +          file macFile;
21849     +          put "%" "macro &name;";
21850     +          put "%" "mend &name;";
21851     +          %if (&nummacro ne ) %then %do;
21852     +              put "%" "global &nummacro;";
21853     +              put "%" "let &nummacro = 0;";
21854     +          %end;
21855     +      run;
21856     +   %end;
21857     +   %inc macFile;
21858     +   filename macFile;
21859     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
21860      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
21861       %macro main;
21862      
21863         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
21864         %include temp;
21865         filename temp;
21866      
21867         %if %upcase(&EM_ACTION) = CREATE %then %do;
21868      
21869             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
21870             %include temp;
21871             filename temp;
21872             %create;
21873         %end;
21874         %else
21875         %if %upcase(&EM_ACTION) = TRAIN %then %do;
21876      
21877             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
21878             %include temp;
21879             filename temp;
21880             %train;
21881         %end;
21882         %else
21883         %if %upcase(&EM_ACTION) = SCORE %then %do;
21884      
21885             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
21886             %include temp;
21887             filename temp;
21888             %score;
21889         %end;
21890         %if %upcase(&EM_ACTION) = REPORT %then %do;
21891      
21892             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
21893             %include temp;
21894             filename temp;
21895             %report;
21896         %end;
21897         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
21898             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
21899             %include temp;
21900             filename temp;
21901             %em_replace_openoutclass;
21902         %end;
21903         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
21904             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
21905             %include temp;
21906             filename temp;
21907             %em_replace_closeoutclass;
21908         %end;
21909      %mend main;
21910      
21911      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
21912     +%macro SetProperties;
21913     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
21914     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
21915     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
21916     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
21917     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
21918     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
21919     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
21920     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
21921     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
21922     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
21924     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_SCORE.SOURCE.
21926     +%macro makeLevelData(data=, outclass=);
21927     +   data REPLACE_MODE;
21928     +      set &OUTCLASS;
21929     +      by NAME;
21930     +      if first.name then do;
21931     +         MODEC    = CRAW;
21932     +         MODEN    = NRAW;
21933     +         NORMMODE = LEVEL;
21934     +         output;
21935     +      end;
21936     +      keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
21937     +   run;
21939     +   proc sort data=&EM_DATA_VARIABLESET;
21940     +      by NAME;
21941     +   run;
21942     +   data &data;
21943     +      length UNKWOWNDEFAULT $8;
21944     +      merge &OUTCLASS(in=_a) REPLACE_MODE &EM_DATA_VARIABLESET(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
21945     +      by NAME;
21946     +      if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "&EM_PROPERTY_UNKNOWNLEVEL";
21947     +      if _a then output;
21948     +   run;
21949     +   proc datasets lib=work nolist;
21950     +      delete REPLACE_MODE;
21951     +   run;
21952     +   quit;
21953     +%mend makeLevelData;
21955     +%macro makeNewNames(limitDs=, classValue=, className=);
21956     +     %let varname = invarname;
21957     +     %let newname = outname;
21958     +     proc sort data=&classValue out=&varname nodupkey;
21959     +        by NAME;
21960     +        where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
21961     +     run;
21962     +     %let classnum=0;
21963     +     %let dsid = %sysfunc(open(&varname));
21964     +     %if &dsid>0 %then %do;
21965     +         %let classnum = %sysfunc(attrn(&dsid, NOBS));
21966     +         %let dsid = %sysfunc(close(&dsid));
21967     +     %end;
21969     +     %let varnum=0;
21970     +     %let dsid = %sysfunc(open(&LimitDs));
21971     +     %if &dsid>0 %then %do;
21972     +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
21973     +         %let dsid = %sysfunc(close(&dsid));
21974     +     %end;
21976     +     %if ^&classnum and ^&varnum and ^%sysfunc(exist(&classname)) %then %do;
21977     +         %let lib    = %scan(&classname, 1, .);
21978     +         %let member = %scan(&classname, 2, .);
21979     +          proc datasets lib=&lib nolist;
21980     +             delete &member;
21981     +          run;
21982     +          quit;
21983     +         %goto doendmn;
21984     +     %end;
21986     +     data &varname;
21987     +        set
21988     +        %if &classnum %then %do;
21989     +            &varname(keep=NAME)
21990     +        %end;
21991     +        %if &varnum %then %do;
21992     +            &limitDs(keep=NAME)
21993     +        %end;
21994     +        ;
21995     +     run;
21996     +     proc dmdb data=&varname outtable=&newname(rename=(REP=NEWNAME)) nameserver;
21997     +        names NAME;
21998     +        prefix REP_;
21999     +     run;
22000     +     proc sort data=&newname;
22001     +        by NAME;
22002     +     run;
22004     +     /* Merge the new names with the limits data set */
22005     +     %if %sysfunc(exist(&limitDs)) %then %do;
22006     +         data &limitDs;
22007     +            merge &newname &limitDs(in=a);
22008     +            by NAME;
22009     +            if a then output;
22010     +         run;
22012     +         %let lib    = %scan(&limitDs, 1, .);
22013     +         %let member = %scan(&limitDs, 2, .);
22014     +          proc datasets lib=&lib nolist;
22015     +             modify &member;
22016     +             label NAME    =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
22017     +              NEWNAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_replacevar_vlabel, NOQUOTE))"
22018     +              CALCMETHOD =  "%sysfunc(sasmsg(sashelp.dmine, rpt_calcmethod_vlabel , NOQUOTE))"
22019     +              REPLACEMETHODUSED =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethodused_vlabel, NOQUOTE))"
22020     +              LOWERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
22021     +              REPLACEMINUSED    =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
22022     +              UPPERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))"
22023     +              REPLACEDMAXUSED   =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))"
22024     +              REPLACEMETHOD     =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethod_vlabel, NOQUOTE))"
22025     +              REPLACEMIN =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemin_vlabel, NOQUOTE))"
22026     +              REPLACEMAX =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemax_vlabel, NOQUOTE))"
22027     +              ROLE       =  "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
22028     +              LEVEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))"
22029     +              LABEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
22030     +         run;
22031     +         quit;
22032     +     %end;
22034     +     /* Merge the new names with the Class Value data set */
22035     +     %if %sysfunc(exist(&classValue)) %then %do;
22036     +         data length;
22037     +            retain newlen 0;
22038     +            set &classValue;
22039     +            by NAME;
22040     +            if type eq 'C' then do;
22041     +               if first.name then do;
22042     +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
22043     +                     newlen = max(length, length(strip(replace_value)));
22044     +                  else
22045     +                     newlen = length;
22046     +               end;
22047     +               else do;
22048     +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
22049     +                     newlen = max(newlen, length(strip(replace_value)));
22050     +               end;
22051     +            end;
22052     +            else newlen = length;
22053     +            len=length;
22054     +            if last.name then output;
22055     +            keep name len newlen role format type label mlevel;
22056     +         run;
22057     +         data &className;
22058     +            length rformat formatroot $32;
22059     +            merge &newname(in=a) length(in=b);
22060     +            by NAME;
22061     +            length=len;
22062     +            if newlen > len then do;
22063     +               if type eq 'C' and format ne '' then do;
22064     +                  rformat = strip(reverse(format));
22065     +                  do while(indexc(rformat, '.0123456789')=1);
22066     +                     rformat = substr(rformat, 2);
22067     +                  end;
22068     +                  formatroot= upcase(reverse(rformat));
22069     +                  if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
22070     +                     format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
22071     +                  end;
22072     +               end;
22073     +               length = newlen;
22074     +            end;
22075     +            if a and b then output;
22076     +            KEEP name newname role format mlevel type label length;
22077     +         run;
22078     +     %end;
22080     +     proc datasets lib=work nolist;
22081     +        delete length &varname &newname;
22082     +     run;
22083     +     quit;
22085     +     %doendmn:
22087     +%mend makeNewNames;
22089     +%macro makeVarDeltaCode(LimitDs=);
22090     +    %if ^%sysfunc(exist(&LimitDs)) %then %goto doendd;
22092     +    filename _F1 "&EM_FILE_CDELTA_TRAIN";
22093     +     data _null_;
22094     +        set &LimitDs end=eof;
22095     +        length string $400;
22096     +        file _F1;
22097     +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
22098     +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
22099     +        %end;
22100     +        %else %do;
22101     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';        put string;
22102     +            string = '   ROLE="REJECTED";';                         put string;
22103     +            string = '   COMMENT= "Replaced by '!!"&EM_NODEID"!!'";'; put string;
22104     +            string = 'end;';                                        put string;
22105     +        %end;
22106     +        put 'else';
22107     +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
22108     +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
22109     +        string = '      LEVEL="'!!strip(LEVEL)!!'";';          put string;
22110     +        put      'end;';
22111     +        if ^eof then
22112     +           put 'else';
22113     +   run;
22114     +   filename _F1;
22116     +    %doendd:
22117     +%mend makeVarDeltaCode;
22119     +%macro makeVarScoreCode(LimitDs=, File=);
22120     +    %if ^%sysfunc(exist(&LimitDs)) or "&File" eq "" %then %goto doendm;
22122     +     filename sFile "&file";
22123     +     data &LimitDs;
22124     +        set &LimitDs end=eof;
22125     +        length REPLACEMETHODUSED $8 string $400;
22126     +        file sFile;
22127     +        put'* ;';
22128     +        put'* Variable: ' name ';';
22129     +        put '* ;';
22130     +        if strip(label) = '' then label = name;
22131     +        string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
22132     +        put string;
22133     +        put newname '=' name ';';
22134     +        REPLACEMETHODUSED = REPLACEMETHOD;
22135     +        if REPLACEMETHOD = 'DEFAULT' then
22136     +            %if "&EM_PROPERTY_REPLACEMETHOD" = "COMPUTED" %then %do;
22137     +                REPLACEMETHODUSED = 'COMPUTED';
22138     +            %end;
22139     +            %else
22140     +            %if "&EM_PROPERTY_REPLACEMETHOD" = "MISSING" %then %do;
22141     +                REPLACEMETHODUSED = 'MISSING';
22142     +            %end;
22143     +            %else %do;
22144     +                REPLACEMETHODUSED = 'MANUAL';
22145     +            %end;
22147     +        put 'if ' name ' eq . then ' newname  '= . ;';
22148     +        if LowerLimit ne . then do;
22149     +           select(REPLACEMETHODUSED);
22150     +              when('COMPUTED') REPLACEMINUSED = lowerLimit;
22151     +              when('MISSING')  REPLACEMINUSED = .;
22152     +              when('MANUAL')   REPLACEMINUSED = replaceMin;
22153     +              otherwise;
22154     +           end;
22155     +           put 'else';
22156     +           put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
22157     +        end;
22158     +        if upperLimit ne . then do;
22159     +           select(REPLACEMETHODUSED);
22160     +              when('COMPUTED') REPLACEMAXUSED = upperLimit;
22161     +              when('MISSING')  REPLACEMAXUSED = .;
22162     +              when('MANUAL')   REPLACEMAXUSED = replaceMax;
22163     +              otherwise;
22164     +           end;
22165     +           put 'else';
22166     +           put 'if ' name '>' upperLimit  ' then ' newname ' = ' REPLACEMAXUSED ';';
22167     +        end;
22168     +        drop string;
22169     +    run;
22170     +    filename sfile;
22171     +    %doendm:
22172     +%mend makeVarScoreCode;
22175     +%macro makeUnknownOptCode(Folder=, Data=);
22176     +    %if ^%sysfunc(exist(&Data)) %then %goto doendu;
22178     +    %let dsid = %sysfunc(open(&data));
22179     +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
22180     +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
22182     +    %let oldname=;
22183     +    %do %while(^%sysfunc(fetch(&dsid)));
22184     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
22185     +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
22187     +        %if &name ne &oldname %then %do;
22188     +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
22189     +            data _null_;
22190     +               set &Data end=eof;
22191     +               where NAME ="&name";
22192     +               length string $400;
22193     +               length newlevel replaceLevel $400;
22194     +               retain string missingFlag;
22195     +               file _F1;
22196     +               if _N_=1 then do;
22197     +                  put '*;';
22198     +                  if format ne '' then do;
22199     +                     string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
22200     +                     put string;
22201     +                     put 'if ^(_UFORMAT200 in(';
22202     +                  end;
22203     +                  else do;
22204     +                     if type eq 'C' then do;
22205     +                        string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
22206     +                        put string;
22207     +                        put 'if ^(_UFORMAT200 in(';
22208     +                     end;
22209     +                     else
22210     +                        put 'if (';
22211     +                  end;
22212     +                  string='';
22213     +                  missingFlag = 0;
22214     +               end;
22216     +               if ^eof and LEVEL ne '_UNKNOWN_' then do;
22217     +                  if format ne '' or type eq 'C' then do;
22218     +                     newlevel = tranwrd(strip(LEVEL),'"','""');
22219     +                     if strip(newLevel) = '' then missingFlag = 1;
22220     +                     if length(strip(newlevel))+length(strip(string))+4<80 then do;
22221     +                        if string='' then
22222     +                           string = strip(string)!!' "'!!strip(newlevel)!!'" ';
22223     +                        else
22224     +                           string = strip(string)!!', "'!!strip(newlevel)!!'" ';
22225     +                     end;
22226     +                     else do;
22227     +                        put string;
22228     +                        string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
22229     +                     end;
22230     +                  end;
22231     +                  else do;
22232     +                     string = strip(name)!!' ne '!!strip(level)!!' and ';
22233     +                     put string;
22234     +                  end;
22235     +                  newlevel = ' ';
22236     +               end;
22237     +               else do;
22238     +                  if format ne '' or type eq 'C' then do;
22239     +                     put string;
22240     +                     if ^missingFlag then
22241     +                        string = ', "" )) then ';
22242     +                     else
22243     +                        string = ')) then ';
22244     +                  end;
22245     +                  else
22246     +                     string = strip(name)!!' ne . ) then ';
22247     +                  put string;
22249     +                 select(REPLACE_VALUE);
22250     +                 when('_MODE_') do;
22251     +                    if type eq 'C' then
22252     +                       replaceLevel = NORMMODE;
22253     +                    else
22254     +                       replaceLevel =strip(put(MODEN,BEST.));
22255     +                 end;
22256     +                 when('_MISSING_') do;
22257     +                    if type eq 'C' then replaceLevel = '';
22258     +                    else replaceLevel = '.';
22259     +                 end;
22260     +                 when('_DEFAULT_') do;
22261     +                    %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
22262     +                        if type eq 'C' then
22263     +                           replaceLevel = NORMMODE;
22264     +                        else
22265     +                           replaceLevel = strip(put(MODEN,BEST.));
22266     +                    %end;
22267     +                    %else %do;
22268     +                        if type eq 'C' then replaceLevel = '';
22269     +                         else replaceLevel = '.';
22270     +                    %end;
22271     +                  end;
22272     +                  when('') do;
22273     +                  end;
22274     +                  otherwise do;
22275     +                     if type eq 'C' then replaceLevel= replace_Value;
22276     +                     else replaceLevel = replace_Value;
22277     +                  end;
22278     +               end;
22279     +               if type eq 'C' then do;
22280     +                  string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
22281     +               end;
22282     +               else do;
22283     +                  string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
22284     +               end;
22285     +               put string;
22286     +            end;
22288     +           run;
22289     +           filename _F1;
22290     +           proc datasets lib=work nolist;
22291     +              delete _temp;
22292     +           run;
22293     +           quit;
22295     +           %let oldname = &name;
22296     +        %end;
22297     +    %end;
22298     +    %let dsid = %sysfunc(close(&dsid));
22300     +    %doendu:
22301     +%mend makeUnknownOptCode;
22303     +%macro makeUnknownCode(ScoreFile=, Data=);
22304     +   %if ^%sysfunc(exist(&Data)) %then %goto doendm;
22306     +   filename _F1 "&ScoreFile" MOD;
22307     +   data _null_;
22308     +      set &Data;
22309     +      length string $400;
22310     +      length newlevel replaceLevel $200;
22311     +      retain string missingFlag;
22312     +      file _F1;
22313     +      by NAME;
22315     +      if _N_=1 then do;
22316     +         put '* ;';
22317     +         put '* Replace Unknown Class Levels ;';
22318     +         put '* ;';
22319     +         put 'length _UFORMAT200 $200;';
22320     +         put 'drop   _UFORMAT200;';
22321     +         put '_UFORMAT200 = " ";';
22322     +      end;
22324     +      if first.name then do;
22325     +         missingFlag = 0;
22326     +         put '*;';
22328     +         if format ne '' then do;
22329     +            call symput('UFormatFlag', '1');
22330     +            string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
22331     +            put string;
22332     +            put 'if ^(_UFORMAT200 in(';
22333     +         end;
22334     +         else do;
22335     +            if type eq 'C' then do;
22336     +               call symput('UFormatFlag', '1');
22337     +               string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
22338     +               put string;
22339     +               put 'if ^(_UFORMAT200 in(';
22340     +            end;
22341     +            else
22342     +               put 'if (';
22343     +         end;
22344     +         string='';
22345     +      end;
22347     +      if ^last.name and LEVEL ne '_UNKNOWN_' then do;
22348     +        if format ne '' or type eq 'C' then do;
22349     +           newlevel = tranwrd(strip(LEVEL),'"','""');
22350     +           if strip(newLevel) = '' then missingFlag = 1;
22351     +           if length(strip(newlevel))+length(strip(string))+4<80 then do;
22352     +              if string='' then
22353     +                 string = strip(string)!!' "'!!strip(newlevel)!!'" ';
22354     +              else
22355     +                 string = strip(string)!!', "'!!strip(newlevel)!!'" ';
22356     +           end;
22357     +           else do;
22358     +              put string;
22359     +              string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
22360     +           end;
22361     +        end;
22362     +        else do;
22363     +           string = strip(name)!!' ne '!!strip(level)!!' and ';
22364     +           put string;
22365     +        end;
22366     +        newlevel = ' ';
22367     +     end;
22368     +     else do;
22369     +        if format ne '' or type eq 'C' then do;
22370     +           put string;
22371     +           if ^missingFlag then
22372     +              string = ', "" )) then ';
22373     +           else
22374     +              string = ')) then ';
22375     +        end;
22376     +        else
22377     +           string = strip(name)!!' ne . ) then ';
22378     +        put string;
22380     +        select(REPLACE_VALUE);
22381     +           when('_MODE_') do;
22382     +              if type eq 'C' then
22383     +                 replaceLevel = NORMMODE;
22384     +              else
22385     +                 replaceLevel =strip(put(MODEN,BEST.));
22386     +           end;
22387     +           when('_MISSING_') do;
22388     +              if type eq 'C' then replaceLevel = '';
22389     +              else replaceLevel = '.';
22390     +           end;
22391     +           when('_DEFAULT_') do;
22392     +              %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
22393     +                  if type eq 'C' then
22394     +                     replaceLevel = NORMMODE;
22395     +                  else
22396     +                     replaceLevel = strip(put(MODEN,BEST.));
22397     +              %end;
22398     +              %else %do;
22399     +                  if type eq 'C' then replaceLevel = '';
22400     +                  else replaceLevel = '.';
22401     +              %end;
22402     +           end;
22403     +           when('') do;
22404     +           end;
22405     +           otherwise do;
22406     +               if type eq 'C' then replaceLevel= replace_Value;
22407     +               else replaceLevel = replace_Value;
22408     +           end;
22409     +        end;
22410     +        if type eq 'C' then do;
22411     +           string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
22412     +        end;
22413     +        else do;
22414     +           string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
22415     +        end;
22416     +        put string;
22417     +     end;
22419     +     run;
22420     +     filename _F1;
22421     +    %doendm:
22422     +%mend makeUnknownCode;
22424     +%macro makeReplaceCode(ScoreFile=, Data=);
22425     +   filename _F1 "&ScoreFile"  MOD;
22426     +   data _null_;
22427     +      length string $400;
22428     +      set &data end=eof;
22429     +      file _F1;
22430     +      by NAME;
22431     +      if _N_=1 then do;
22432     +         put '   ';
22433     +         put '* ;';
22434     +         put '* Replace Specific Class Levels ;';
22435     +         put '* ;';
22436     +         put 'length _UFormat200 $200;';
22437     +         put 'drop   _UFORMAT200;';
22438     +         put '_UFORMAT200 = " ";';
22439     +      end;
22440     +      if first.name then do;
22441     +         put '* ;';
22442     +         string = '* Variable: '!!strip(NAME)!!';';
22443     +         put string;
22444     +         put '* ;';
22445     +         if format ne '' then do;
22446     +            call symput('UFormatFlag', '1');
22447     +            string = "_UFORMAT200 = strip("; put string;
22448     +            string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
22449     +            put string;
22450     +         end;
22451     +         else
22452     +           if type eq 'C' then do;
22453     +              call symput('UFormatFlag', '1');
22454     +              string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
22455     +              put string;
22456     +           end;
22457     +      end;
22458     +      if ^first.name then
22459     +         put 'else';
22460     +      if format ne '' then do;
22461     +         string = tranwrd(strip(LEVEL),'"','""');
22462     +         string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
22463     +         put string;
22464     +      end;
22465     +      else do;
22466     +         if type eq 'N' then do;
22467     +            string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
22468     +            put string;
22469     +         end;
22470     +         else do;
22471     +            string = tranwrd(strip(craw),'"','""');
22472     +            string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
22473     +            put string;
22474     +         end;
22475     +      end;
22476     +      string = strip(newname)!!'=';
22477     +      if type eq 'C' then do;
22478     +         if upcase(replace_value) eq '_MISSING_' or
22479     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
22480     +         else
22481     +           if upcase(replace_value) eq '_MODE_' or
22482     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
22483     +            then replace_Value =modec;
22484     +           string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
22485     +      end;
22486     +      else do;
22487     +         if upcase(replace_value) eq '_MISSING_' or
22488     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
22489     +         else
22490     +           if upcase(replace_value) eq '_MODE_' or
22491     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
22492     +                  replace_Value =strip(put(moden, BEST.));
22494     +         string = strip(string)!!''!!strip(replace_value)!!';';
22495     +      end;
22496     +      put string;
22497     +    run;
22498     +    filename _F1;
22500     +%mend makeReplaceCode;
22502     +%macro makeReplaceOptCode(Folder=, Data=);
22503     +    %if ^%sysfunc(exist(&Data)) %then %goto doendr;
22505     +    %let dsid = %sysfunc(open(&data));
22506     +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
22507     +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
22509     +    %let oldname=;
22510     +    %do %while(^%sysfunc(fetch(&dsid)));
22511     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
22512     +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
22514     +        %if &name ne &oldname %then %do;
22515     +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
22516     +            data _null_;
22517     +               length string $400;
22518     +               set &Data end=eof;
22519     +               by NAME;
22520     +               where NAME ="&name";
22521     +               file _F1;
22522     +               if _N_=1 then do;
22523     +                  put '* ;';
22524     +                  string = '* Variable: '!!strip(NAME)!!';';
22525     +                  put string;
22526     +                  put '* ;';
22527     +                  if format ne '' then do;
22528     +                     string = "_UFORMAT200 = strip("; put string;
22529     +                     string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
22530     +                     put string;
22531     +                  end;
22532     +                  else
22533     +                     if type eq 'C' then do;
22534     +                        call symput('UFormatFlag', '1');
22535     +                        string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
22536     +                        put string;
22537     +                    end;
22538     +               end;
22539     +               if ^first.name then
22540     +                  put 'else';
22541     +               if format ne '' then do;
22542     +                  string = tranwrd(strip(LEVEL),'"','""');
22543     +                  string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
22544     +                  put string;
22545     +               end;
22546     +               else do;
22547     +                  if type eq 'N' then do;
22548     +                     string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
22549     +                     put string;
22550     +                  end;
22551     +                  else do;
22552     +                     string = tranwrd(strip(craw),'"','""');
22553     +                     string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
22554     +                     put string;
22555     +                  end;
22556     +               end;
22557     +               string = strip(newname)!!'=';
22558     +               if type eq 'C' then do;
22559     +                  if upcase(replace_value) eq '_MISSING_' or
22560     +                     (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
22561     +                  else
22562     +                     if upcase(replace_value) eq '_MODE_' or
22563     +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
22564     +                       then replace_Value =modec;
22565     +                          string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
22566     +               end;
22567     +              else do;
22568     +                 if upcase(replace_value) eq '_MISSING_' or
22569     +                    (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
22570     +                 else
22571     +                    if upcase(replace_value) eq '_MODE_' or
22572     +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
22573     +                        replace_Value =strip(put(moden, BEST.));
22575     +                 string = strip(string)!!''!!strip(replace_value)!!';';
22576     +              end;
22577     +             put string;
22578     +          run;
22579     +          filename _F1;
22581     +           %let oldname = &name;
22582     +        %end;
22583     +    %end;
22584     +    %let dsid = %sysfunc(close(&dsid));
22586     +    %doendr:
22588     +%mend makeReplaceOptCode;
22591     +%macro makeNewVarCode(ScoreFile=, Data=);
22592     +   filename _F1 "&ScoreFile"  MOD;
22593     +   data _null_;
22594     +     length string $400;
22595     +      set &data end=eof;
22596     +      file _F1;
22597     +      if _N_=1 then do;
22598     +         put '   ';
22599     +         put '* ;';
22600     +         put '* Defining New Variables;';
22601     +         put '* ;';
22602     +      end;
22603     +      if type eq 'C' then do;
22604     +         string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
22605     +         put string;
22606     +      end;
22607     +      if strip(label) = '' then label = name;
22608     +      string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
22609     +      put string;
22611     +      if format ne '' then do;
22612     +         string ='format '!!strip(newname)!!' '!!strip(format)!!';';
22613     +         put string;
22614     +      end;
22615     +      string = strip(newname)!!'= '!!strip(NAME)!!';';
22616     +      put string;
22617     +   run;
22618     +%mend makeNewVarCode;
22620     +%macro makeNewVarOptCode(Folder=, Data=);
22621     +    %if ^%sysfunc(exist(&data)) or "&Folder" eq "" %then %goto doendo;
22622     +    data _temp_;set &data;run;
22623     +    %let dsid = %sysfunc(open(_temp_));
22624     +    %let nobs  = %sysfunc(attrn(&dsid, NLOBS));
22625     +    %do %while(^%sysfunc(fetch(&dsid)));
22626     +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
22627     +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
22629     +        filename _F1 "&Folder.&em_dsep.&newname..sas";
22630     +        data _null_;
22631     +           length string $400;
22632     +           set &data;
22633     +           where NEWNAME="&newname";
22634     +           file _F1;
22635     +           put '   ';
22636     +           put '* ;';
22637     +           put "* Defining: &newname;";
22638     +           put '* ;';
22639     +           if type eq 'C' then  do;
22640     +              string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
22641     +              put string;
22642     +           end;
22643     +           if strip(label) = '' then label = name;
22644     +           string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
22645     +           put string;
22646     +           if format ne '' then do;
22647     +              string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
22648     +              put string;
22649     +           end;
22650     +           string = strip(newname)!!'='!!strip(name)!!';';
22651     +           put string;
22652     +        run;
22653     +    %end;
22654     +    %let dsid = %sysfunc(close(&dsid));
22655     +   %doendo:
22656     +%mend makeNewVarOptCode;
22658     +%macro makeClassScoreCode(LevelData=, nameData=_newNames);
22659     +   %let UFormatFlag = 0;
22661     +   %em_register(key=REPLACECODE, type=FOLDER);
22663     +   /* Generating New Variable Score Code */
22664     +   %makeNewVarCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE,  Data=&nameData);
22666     +   data _tempNewVars;
22667     +      set &nameData;
22668     +      where ROLE ne 'TARGET';
22669     +   run;
22670     +   %makeNewVarCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_tempNewVars);
22671     +   %makeNewVarOptCode(Folder=&em_user_replacecode, Data=_tempNewVars);
22673     +   proc datasets lib=WORK nolist;
22674     +      delete _tempNewVars;
22675     +   run;
22676     +   quit;
22678     +   /* Generating Publish Score Code */
22679     +   data _temp;
22680     +      set &LevelData;
22681     +      where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
22682     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
22683     +      keep NAME;
22684     +   run;
22686     +   data _temp;
22687     +      merge _temp(in=_a) &Leveldata &nameData;
22688     +      by NAME;
22689     +      if _a then output;
22690     +   run;
22692     +   %makeUnknownCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
22693     +   %makeUnknownOptCode(Folder=&em_user_replacecode,        Data=_temp);
22694     +   proc datasets lib=work nolist;
22695     +      delete _temp;
22696     +   run;
22697     +   quit;
22699     +   data _temp;
22700     +      merge &LevelData(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and
22701     +        (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) ))  &nameData;
22702     +      by NAME;
22703     +      if _a then output;
22704     +   run;
22706     +   %makeReplaceCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
22707     +   %makeReplaceOptCode(Folder=&em_user_replacecode,        Data=_temp);
22709     +   /* Generating Flow Score Code */
22710     +   data _temp;
22711     +      set &LevelData;
22712     +      where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
22713     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
22714     +      keep NAME;
22715     +   run;
22717     +   data _temp;
22718     +      merge _temp(in=_a) &Leveldata &nameData;
22719     +      by NAME;
22720     +      if _a then output;
22721     +   run;
22722     +   %makeUnknownCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
22724     +   data _temp;
22725     +      merge &LevelData(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
22726     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) &nameData;
22727     +      by NAME;
22728     +      if _a then output;
22729     +   run;
22731     +   %makeReplaceCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
22733     +   %if "&UFormatFlag" = "1" %then %do;
22734     +       filename _F1 "&em_user_replacecode&em_dsep._ALL_.sas" MOD;
22735     +       data _null_;
22736     +          file _F1;
22737     +          put 'length _UFormat200 $200;';
22738     +          put 'drop   _UFORMAT200;';
22739     +          put '_UFORMAT200 = " ";';
22740     +       run;
22741     +       filename _F1;
22742     +   %end;
22744     +%mend makeClassScoreCode;
22746     +%macro makeClassDeltaCode(nameData=_newNames);
22747     +   %if ^%sysfunc(exist(&nameData)) %then %goto doendm;
22749     +   filename _F1 "&EM_FILE_CDELTA_TRAIN" MOD;
22750     +   data _null_;
22751     +        set &nameData end=eof;
22752     +        length string $400;
22753     +        file _F1;
22754     +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
22755     +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
22756     +        %end;
22757     +        %else %do;
22758     +            string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";'; put string;
22759     +        %end;
22760     +        put 'else';
22761     +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
22762     +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
22763     +        string = '      LEVEL="'!!strip(MLEVEL)!!'";';         put string;
22764     +        put      'end;';
22765     +        if ^eof then
22766     +           put 'else';
22767     +   run;
22768     +   %doendm:
22769     +   filename _F1;
22770     +%mend makeClassDeltaCode;
22772     +%macro makeValueReport(Data=, outData=);
22773     +   data &outData;
22774     +      set &data;
22775     +      where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
22776     +      if LEVEL = '_UNKNOWN_' then do;
22777     +         LEVEL='Unknown';
22778     +         %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
22779     +         if REPLACE_VALUE in('_MODE_', '_DEFAULT_') then REPLACE_VALUE = strip(NORMMODE);
22780     +         else
22781     +            if REPLACE_VALUE ='_MISSING_' then do;
22782     +               if type eq 'N' then REPLACE_VALUE='.';
22783     +               else REPLACE_VALUE='_blank_';
22784     +            end;
22785     +         %end;
22786     +         %else  %do;
22787     +         if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
22788     +         else
22789     +            if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
22790     +               if type eq 'N' then REPLACE_VALUE='.';
22791     +               else REPLACE_VALUE='_blank_';
22792     +            end;
22793     +         %end;
22794     +      end;
22795     +      else do;
22796     +         if REPLACE_VALUE ='_MISSING_' then do;
22797     +            if type eq 'N' then REPLACE_VALUE='.';
22798     +            else REPLACE_VALUE='_blank_';
22799     +         end;
22800     +         else
22801     +            if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
22802     +      end;
22803     +      keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
22804     +   run;
22805     +%mend makeValueReport;
22807     +%macro makeVarOptCode(LimitDs=, Folder=);
22808     +    %if ^%sysfunc(exist(&LimitDs)) or "&Folder" eq "" %then %goto doendo;
22810     +    %let dsid = %sysfunc(open(&limitDs));
22811     +    %do %while(^%sysfunc(fetch(&dsid)));
22812     +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
22813     +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
22815     +    filename sfile "&Folder.&em_dsep.&newname..sas";
22816     +    data _null_;
22817     +       length string $400;
22818     +       set &LimitDs;
22819     +       where NEWNAME="&newname";
22820     +       file sfile;
22821     +       put '* ;';
22822     +       string = '*Variable: '!!strip(name)!!';';
22823     +       put string;
22824     +       put '* ;';
22825     +       if label eq '' then
22826     +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
22827     +       else
22828     +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
22829     +       put string;
22830     +       string = strip(newname)!!'= '!!strip(NAME)!!';';
22831     +       put string;
22832     +       replacemin = .;
22833     +       string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
22834     +       put string;
22835     +       if LowerLimit ne . then do;
22836     +          if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
22837     +          if ReplaceMethodUsed="MANUAL"   then replaceMin = ReplaceMinUsed;
22838     +          put 'else';
22839     +          string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.))
22840     +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
22841     +          put string;
22842     +       end;
22843     +       if UpperLimit ne . then do;
22844     +          if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
22845     +          if ReplaceMethodUsed="MANUAL"   then replaceMax = ReplaceMaxUsed;
22846     +          put 'else';
22847     +          string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.))
22848     +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
22849     +          put string;
22850     +       end;
22851     +        run;
22852     +        filename sfile;
22853     +    %end;
22854     +    %let dsid = %sysfunc(close(&dsid));
22856     +    %doendo:
22857     +%mend makeVarOptCode;
22859     +%macro score;
22860     +   %em_register(key=REPLACECODE, type=FOLDER);
22862     +   filename x catalog 'sashelp.emutil.em_deldir.source';
22863     +   %inc x;
22864     +   filename x;
22865     +   %delDir(folder=%nrbquote(&em_user_replacecode));
22867     +   data _null_; length rc $200;
22868     +      rc = dcreate('REPLACECODE', "&EM_NODEDIR");
22869     +   run;
22871     +   filename _F1 "&EM_FILE_EMFLOWSCORECODE";
22872     +   filename _F2 "&EM_FILE_EMPUBLISHSCORECODE";
22873     +   filename _F3 "&EM_FILE_CDELTA_TRAIN";
22874     +   data _null_;
22875     +      rc=fdelete('_F1');
22876     +      rc=fdelete('_F2');
22877     +      rc=fdelete('_F3');
22878     +   run;
22879     +   filename _F1;
22880     +   filename _F2;
22881     +   filename _F3;
22883     +   %em_getname(key=OUTCLASS,  type=DATA);
22884     +   %em_getname(key=LIMITS, type=DATA);
22885     +   %em_getname(key=CLASSINFO, type=DATA);
22887     +   /* Retrieve Replacement Values for Class Variables */
22888     +   %makeLevelData(outclass=&em_user_outclass, data=CLASSTEMP);
22890     +   /* Generate Names for Replaced Variables */
22891     +   %makeNewNames(limitDs =&em_user_limits, classValue=CLASSTEMP, classname=&em_user_classinfo);
22893     +   /* Generate score and delta code for Var Variables */
22894     +   %if %sysfunc(exist(&EM_USER_LIMITS)) %then %do;
22895     +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMFLOWSCORECODE);
22896     +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMPUBLISHSCORECODE);
22897     +       %makeVarOptCode(LimitDs= &EM_USER_LIMITS,    Folder=&em_user_replacecode);
22898     +       %makeVarDeltaCode(LimitDs = &EM_USER_LIMITS);
22900     +       proc print data=&EM_USER_LIMITS label noobs;
22901     +          var Name newname lowerLimit REPLACEMINUSED UpperLimit REPLACEMAXUSED;
22902     +          label REPLACEMINUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
22903     +                REPLACEMAXUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))";
22904     +          title9  ' ';
22905     +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varlimits_title, NOQUOTE))";
22906     +       run;
22907     +       title10;
22908     +  %end;
22910     +   %if %sysfunc(exist(&EM_USER_CLASSINFO)) %then %do;
22911     +       %makeClassScoreCode(LevelData=CLASSTEMP, nameData=&em_user_classinfo);
22912     +       %makeClassDeltaCode(nameData=&em_user_classinfo);
22913     +   %end;
22915     +   %em_getname(key=VALUES, type=DATA);
22916     +   %makeValueReport(data=CLASSTEMP, outData=&EM_USER_VALUES);
22917     +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
22918     +       %let nobs = 0;
22919     +       %let dsid = %sysfunc(open(&EM_USER_VALUES));
22920     +       %if &dsid %then %do;
22921     +           %let nobs =  %sysfunc(attrn(&dsid, NOBS));
22922     +           %let dsid = %sysfunc(close(&dsid));
22923     +       %end;
22924     +       %if &nobs %then
22925     +           %EM_REPORT(key=VALUES, viewtype=DATA, block=MODEL, description=ReplaceLevels,autoDisplay=N);
22926     +   %end;
22928     +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
22929     +       proc print data=&EM_USER_VALUES label noobs;
22930     +          title9  ' ';
22931     +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classreplacement_title, NOQUOTE))";
22932     +      run;
22933     +      title10;
22934     +  %end;
22936     +   proc datasets lib=work nolist;
22937     +      delete CLASSTEMP;
22938     +   run;
22939     +   quit;
22941     +   %em_register(key=EMSCOREVAR, type=DATA);
22942     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
22943     +   proc datasets lib=&em_lib nolist;
22944     +      delete &scorevarDs;
22945     +   run;
22946     +   quit;
22948     +   %let filrf=mydir;
22949     +   %let rc=%sysfunc(filename(filrf,&em_user_replacecode));
22950     +   %let did=%sysfunc(dopen(&filrf));
22952     +   %if &did %then %do;
22953     +       %let memcount=%sysfunc(dnum(&did));
22954     +       %if &memcount > 0 %then %do;
22955     +           data &em_user_emscorevar;
22956     +              length Name $32 formula $70 file $200;
22957     +              keep NAME Formula file;
22959     +           %if %sysfunc(fileexist(&em_user_replacecode&em_dsep._ALL_.sas)) %then %do;
22960     +               name=''; file="REPLACECODE&em_dsep._ALL_.sas";
22961     +               output;
22962     +           %end;
22963     +           %do i=1 %to &memcount;
22964     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
22965     +               %let newvar = %scan(&name, 1, .);
22966     +               %if "&newvar" ne "_ALL_" %then %do;
22967     +                   name = "&newvar"; file="REPLACECODE&em_dsep&name";
22968     +                   output;
22969     +               %end;
22970     +           %end;
22971     +           run;
22972     +       %end;
22973     +  %end;
22974     +  %if &did %then %let did = %sysfunc(dclose(&did));
22977     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("REPLACECODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "REPLACECODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename x catalog 'sashelp.emutil.em_deldir.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
22978     +%macro delDir(folder=);
22979     +   %let filrf=mydir;
22980     +   %let rc=%sysfunc(filename(filrf,&folder));
22981     +   %let did=%sysfunc(dopen(&filrf));
22983     +   %if &did %then %do;
22984     +       %let memcount=%sysfunc(dnum(&did));
22985     +       %if &memcount > 0 %then %do;
22986     +           %do i=1 %to &memcount;
22987     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
22988     +               data _null_;
22989     +                  fname="_temp&i";
22990     +                  rc=filename(fname,"&folder&em_dsep.&name");
22991     +                  if rc = 0 and fexist(fname) then
22992     +                     rc=fdelete(fname);
22993     +                  rc=filename(fname);
22994     +               run;
22995     +           %end;
22996     +       %end;
22997     +       %let rc=%sysfunc(dclose(&did));
22998     +   %end;
22999     +   %let rc = %sysfunc(fdelete(&filrf));
23000     +   %let rc=%sysfunc(filename(filrf));
23001     +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp1";
MPRINT(DELDIR):   rc=filename(fname,"C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\REPLACECODE\REP_FirstPolicyYear.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   length rc $200;
MPRINT(SCORE):   rc = dcreate('REPLACECODE', "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl");
MPRINT(SCORE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   filename _F1 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(SCORE):   filename _F2 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas";
MPRINT(SCORE):   filename _F3 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   rc=fdelete('_F1');
MPRINT(SCORE):   rc=fdelete('_F2');
MPRINT(SCORE):   rc=fdelete('_F3');
MPRINT(SCORE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):   filename _F2;
NOTE: Fileref _F2 has been deassigned.
MPRINT(SCORE):   filename _F3;
NOTE: Fileref _F3 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKELEVELDATA):   data REPLACE_MODE;
MPRINT(MAKELEVELDATA):   set EMWS1.Repl_OUTCLASS;
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   if first.name then do;
MPRINT(MAKELEVELDATA):   MODEC = CRAW;
MPRINT(MAKELEVELDATA):   MODEN = NRAW;
MPRINT(MAKELEVELDATA):   NORMMODE = LEVEL;
MPRINT(MAKELEVELDATA):   output;
MPRINT(MAKELEVELDATA):   end;
MPRINT(MAKELEVELDATA):   keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
MPRINT(MAKELEVELDATA):   run;

WARNING: The variable UNKWOWNDEFAULT in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 16 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: The data set WORK.REPLACE_MODE has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKELEVELDATA):   proc sort data=EMWS1.Repl_VariableSet;
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   run;

NOTE: There were 13 observations read from the data set EMWS1.REPL_VARIABLESET.
NOTE: The data set EMWS1.REPL_VARIABLESET has 13 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKELEVELDATA):   data CLASSTEMP;
MPRINT(MAKELEVELDATA):   length UNKWOWNDEFAULT $8;
MPRINT(MAKELEVELDATA):   merge EMWS1.Repl_OUTCLASS(in=_a) REPLACE_MODE EMWS1.Repl_VariableSet(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "NONE";
MPRINT(MAKELEVELDATA):   if _a then output;
MPRINT(MAKELEVELDATA):   run;

WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This may cause unexpected results.
NOTE: There were 16 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: There were 3 observations read from the data set WORK.REPLACE_MODE.
NOTE: There were 3 observations read from the data set EMWS1.REPL_VARIABLESET.
      WHERE MLEVEL not = 'INTERVAL';
NOTE: The data set WORK.CLASSTEMP has 16 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKELEVELDATA):   proc datasets lib=work nolist;
MPRINT(MAKELEVELDATA):   delete REPLACE_MODE;
MPRINT(MAKELEVELDATA):   run;

NOTE: Deleting WORK.REPLACE_MODE (memtype=DATA).
MPRINT(MAKELEVELDATA):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAKENEWNAMES):   proc sort data=CLASSTEMP out=invarname nodupkey;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
MPRINT(MAKENEWNAMES):   run;

NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: The data set WORK.INVARNAME has 0 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKENEWNAMES):   data invarname;
MPRINT(MAKENEWNAMES):   set EMWS1.Repl_LIMITS(keep=NAME) ;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 2 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The data set WORK.INVARNAME has 2 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   proc dmdb data=invarname outtable=outname(rename=(REP=NEWNAME)) nameserver;
MPRINT(MAKENEWNAMES):   names NAME;
MPRINT(MAKENEWNAMES):   prefix REP_;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 2 observations read from the data set WORK.INVARNAME.
NOTE: The data set WORK.OUTNAME has 2 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   proc sort data=outname;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 2 observations read from the data set WORK.OUTNAME.
NOTE: The data set WORK.OUTNAME has 2 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   data EMWS1.Repl_LIMITS;
MPRINT(MAKENEWNAMES):   merge outname EMWS1.Repl_LIMITS(in=a);
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   if a then output;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 2 observations read from the data set WORK.OUTNAME.
NOTE: There were 2 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The data set EMWS1.REPL_LIMITS has 2 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   proc datasets lib=EMWS1 nolist;
MPRINT(MAKENEWNAMES):   modify Repl_LIMITS;
WARNING: Variable REPLACEMETHODUSED not found in data set EMWS1.REPL_LIMITS.
WARNING: Variable REPLACEMINUSED not found in data set EMWS1.REPL_LIMITS.
WARNING: Variable REPLACEDMAXUSED not found in data set EMWS1.REPL_LIMITS.
MPRINT(MAKENEWNAMES):   label NAME = "Variable" NEWNAME = "Replace Variable" CALCMETHOD = "Limits Method" REPLACEMETHODUSED = "Replacement Method Used" LOWERLIMIT = "Lower limit" REPLACEMINUSED = "Lower Replacement Value" UPPERLIMIT = "Upper Limit" 
REPLACEDMAXUSED = "Upper Replacement Value" REPLACEMETHOD = "Replacement Method" REPLACEMIN = "User-Specified Lower Replacement Value" REPLACEMAX = "User-Specified Upper Replacement Value" ROLE = "Role" LEVEL = "Measurement Level" LABEL = "Label";
MPRINT(MAKENEWNAMES):   run;

NOTE: MODIFY was successful for EMWS1.REPL_LIMITS.DATA.
MPRINT(MAKENEWNAMES):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(MAKENEWNAMES):   data length;
MPRINT(MAKENEWNAMES):   retain newlen 0;
MPRINT(MAKENEWNAMES):   set CLASSTEMP;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   if type eq 'C' then do;
MPRINT(MAKENEWNAMES):   if first.name then do;
MPRINT(MAKENEWNAMES):   if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then newlen = max(length, length(strip(replace_value)));
MPRINT(MAKENEWNAMES):   else newlen = length;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   else do;
MPRINT(MAKENEWNAMES):   if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then newlen = max(newlen, length(strip(replace_value)));
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   else newlen = length;
MPRINT(MAKENEWNAMES):   len=length;
MPRINT(MAKENEWNAMES):   if last.name then output;
MPRINT(MAKENEWNAMES):   keep name len newlen role format type label mlevel;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 16 observations read from the data set WORK.CLASSTEMP.
NOTE: The data set WORK.LENGTH has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   data EMWS1.Repl_CLASSINFO;
MPRINT(MAKENEWNAMES):   length rformat formatroot $32;
MPRINT(MAKENEWNAMES):   merge outname(in=a) length(in=b);
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   length=len;
MPRINT(MAKENEWNAMES):   if newlen > len then do;
MPRINT(MAKENEWNAMES):   if type eq 'C' and format ne '' then do;
MPRINT(MAKENEWNAMES):   rformat = strip(reverse(format));
MPRINT(MAKENEWNAMES):   do while(indexc(rformat, '.0123456789')=1);
MPRINT(MAKENEWNAMES):   rformat = substr(rformat, 2);
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   formatroot= upcase(reverse(rformat));
MPRINT(MAKENEWNAMES):   if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
MPRINT(MAKENEWNAMES):   format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   length = newlen;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   if a and b then output;
MPRINT(MAKENEWNAMES):   KEEP name newname role format mlevel type label length;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 2 observations read from the data set WORK.OUTNAME.
NOTE: There were 3 observations read from the data set WORK.LENGTH.
NOTE: The data set EMWS1.REPL_CLASSINFO has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKENEWNAMES):   proc datasets lib=work nolist;
MPRINT(MAKENEWNAMES):   delete length invarname outname;
MPRINT(MAKENEWNAMES):   run;

NOTE: Deleting WORK.LENGTH (memtype=DATA).
NOTE: Deleting WORK.INVARNAME (memtype=DATA).
NOTE: Deleting WORK.OUTNAME (memtype=DATA).
MPRINT(MAKENEWNAMES):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAKEVARSCORECODE):   filename sFile "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(MAKEVARSCORECODE):   data EMWS1.Repl_LIMITS;
MPRINT(MAKEVARSCORECODE):   set EMWS1.Repl_LIMITS end=eof;
MPRINT(MAKEVARSCORECODE):   length REPLACEMETHODUSED $8 string $400;
MPRINT(MAKEVARSCORECODE):   file sFile;
MPRINT(MAKEVARSCORECODE):   put'* ;';
MPRINT(MAKEVARSCORECODE):   put'* Variable: ' name ';';
MPRINT(MAKEVARSCORECODE):   put '* ;';
MPRINT(MAKEVARSCORECODE):   if strip(label) = '' then label = name;
MPRINT(MAKEVARSCORECODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKEVARSCORECODE):   put string;
MPRINT(MAKEVARSCORECODE):   put newname '=' name ';';
MPRINT(MAKEVARSCORECODE):   REPLACEMETHODUSED = REPLACEMETHOD;
MPRINT(MAKEVARSCORECODE):   if REPLACEMETHOD = 'DEFAULT' then REPLACEMETHODUSED = 'MISSING';
MPRINT(MAKEVARSCORECODE):   put 'if ' name ' eq . then ' newname '= . ;';
MPRINT(MAKEVARSCORECODE):   if LowerLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMINUSED = lowerLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMINUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMINUSED = replaceMin;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   if upperLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMAXUSED = upperLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMAXUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMAXUSED = replaceMax;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '>' upperLimit ' then ' newname ' = ' REPLACEMAXUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   drop string;
MPRINT(MAKEVARSCORECODE):   run;

NOTE: The file SFILE is:
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=29Dec2015:14:12:57,
      Create Time=28Dec2015:18:10:14

NOTE: 18 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 57.
NOTE: There were 2 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The data set EMWS1.REPL_LIMITS has 2 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARSCORECODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEVARSCORECODE):   filename sFile "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas";
MPRINT(MAKEVARSCORECODE):   data EMWS1.Repl_LIMITS;
MPRINT(MAKEVARSCORECODE):   set EMWS1.Repl_LIMITS end=eof;
MPRINT(MAKEVARSCORECODE):   length REPLACEMETHODUSED $8 string $400;
MPRINT(MAKEVARSCORECODE):   file sFile;
MPRINT(MAKEVARSCORECODE):   put'* ;';
MPRINT(MAKEVARSCORECODE):   put'* Variable: ' name ';';
MPRINT(MAKEVARSCORECODE):   put '* ;';
MPRINT(MAKEVARSCORECODE):   if strip(label) = '' then label = name;
MPRINT(MAKEVARSCORECODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKEVARSCORECODE):   put string;
MPRINT(MAKEVARSCORECODE):   put newname '=' name ';';
MPRINT(MAKEVARSCORECODE):   REPLACEMETHODUSED = REPLACEMETHOD;
MPRINT(MAKEVARSCORECODE):   if REPLACEMETHOD = 'DEFAULT' then REPLACEMETHODUSED = 'MISSING';
MPRINT(MAKEVARSCORECODE):   put 'if ' name ' eq . then ' newname '= . ;';
MPRINT(MAKEVARSCORECODE):   if LowerLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMINUSED = lowerLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMINUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMINUSED = replaceMin;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   if upperLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMAXUSED = upperLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMAXUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMAXUSED = replaceMax;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '>' upperLimit ' then ' newname ' = ' REPLACEMAXUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   drop string;
MPRINT(MAKEVARSCORECODE):   run;

NOTE: The file SFILE is:
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=29Dec2015:14:12:57,
      Create Time=28Dec2015:18:10:26

NOTE: 18 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 57.
NOTE: There were 2 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The data set EMWS1.REPL_LIMITS has 2 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARSCORECODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEVAROPTCODE):   filename sfile "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\REPLACECODE\REP_CustomerAge.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_CustomerAge";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\REPLACECODE\REP_CustomerAge.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=29Dec2015:14:12:57,
      Create Time=29Dec2015:14:12:57

NOTE: 8 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 50.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_CustomerAge';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\REPLACECODE\REP_FirstPolicyYear.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_FirstPolicyYear";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\REPLACECODE\REP_FirstPolicyYear.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=29Dec2015:14:12:57,
      Create Time=29Dec2015:14:12:57

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 58.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_FirstPolicyYear';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEVARDELTACODE):   filename _F1 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas";
MPRINT(MAKEVARDELTACODE):   data _null_;
MPRINT(MAKEVARDELTACODE):   set EMWS1.Repl_LIMITS end=eof;
MPRINT(MAKEVARDELTACODE):   length string $400;
MPRINT(MAKEVARDELTACODE):   file _F1;
MPRINT(MAKEVARDELTACODE):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '   ROLE="REJECTED";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '   COMMENT= "Replaced by '!!"Repl"!!'";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = 'end;';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   put 'else';
MPRINT(MAKEVARDELTACODE):   string = '   if NAME="'!!strip(NEWNAME)!!'" then do;';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '      ROLE="'!!strip(ROLE)!!'";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '      LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   put 'end;';
MPRINT(MAKEVARDELTACODE):   if ^eof then put 'else';
MPRINT(MAKEVARDELTACODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=29Dec2015:14:12:57,
      Create Time=28Dec2015:18:10:10

NOTE: 19 records were written to the file _F1.
      The minimum record length was 4.
      The maximum record length was 38.
NOTE: There were 2 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARDELTACODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):   proc print data=EMWS1.Repl_LIMITS label noobs;
MPRINT(SCORE):   var Name newname lowerLimit REPLACEMINUSED UpperLimit REPLACEMAXUSED;
MPRINT(SCORE):   label REPLACEMINUSED = "Lower Replacement Value" REPLACEMAXUSED = "Upper Replacement Value";
MPRINT(SCORE):   title9 ' ';
MPRINT(SCORE):   title10 "Limits and Replacement Values for Interval Variables";
MPRINT(SCORE):   run;

NOTE: There were 2 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   title10;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("REPLACECODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "REPLACECODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKENEWVARCODE):   filename _F1 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKENEWVARCODE):   data _null_;
MPRINT(MAKENEWVARCODE):   length string $400;
MPRINT(MAKENEWVARCODE):   set EMWS1.Repl_CLASSINFO end=eof;
MPRINT(MAKENEWVARCODE):   file _F1;
MPRINT(MAKENEWVARCODE):   if _N_=1 then do;
MPRINT(MAKENEWVARCODE):   put '   ';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   put '* Defining New Variables;';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVARCODE):   string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVARCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   if format ne '' then do;
MPRINT(MAKENEWVARCODE):   string ='format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=552,
      Last Modified=29Dec2015:14:12:57,
      Create Time=28Dec2015:18:10:14

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _tempNewVars;
MPRINT(MAKECLASSSCORECODE):   set EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   where ROLE ne 'TARGET';
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
      WHERE ROLE not = 'TARGET';
NOTE: The data set WORK._TEMPNEWVARS has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWVARCODE):   filename _F1 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKENEWVARCODE):   data _null_;
MPRINT(MAKENEWVARCODE):   length string $400;
MPRINT(MAKENEWVARCODE):   set _tempNewVars end=eof;
MPRINT(MAKENEWVARCODE):   file _F1;
MPRINT(MAKENEWVARCODE):   if _N_=1 then do;
MPRINT(MAKENEWVARCODE):   put '   ';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   put '* Defining New Variables;';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVARCODE):   string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVARCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   if format ne '' then do;
MPRINT(MAKENEWVARCODE):   string ='format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=552,
      Last Modified=29Dec2015:14:12:57,
      Create Time=28Dec2015:18:10:26

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMPNEWVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKENEWVAROPTCODE):   data _temp_;
MPRINT(MAKENEWVAROPTCODE):  set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):  run;

NOTE: There were 0 observations read from the data set WORK._TEMPNEWVARS.
NOTE: The data set WORK._TEMP_ has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   proc datasets lib=WORK nolist;
MPRINT(MAKECLASSSCORECODE):   delete _tempNewVars;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: Deleting WORK._TEMPNEWVARS (memtype=DATA).
MPRINT(MAKECLASSSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   set CLASSTEMP;
MPRINT(MAKECLASSSCORECODE):   where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
MPRINT(MAKECLASSSCORECODE):   keep NAME;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 0 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge _temp(in=_a) CLASSTEMP EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This may cause unexpected results.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: There were 16 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKEUNKNOWNCODE):   data _null_;
MPRINT(MAKEUNKNOWNCODE):   set _temp;
MPRINT(MAKEUNKNOWNCODE):   length string $400;
MPRINT(MAKEUNKNOWNCODE):   length newlevel replaceLevel $200;
MPRINT(MAKEUNKNOWNCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNCODE):   file _F1;
MPRINT(MAKEUNKNOWNCODE):   by NAME;
MPRINT(MAKEUNKNOWNCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put '* Replace Unknown Class Levels ;';
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put 'length _UFORMAT200 $200;';
MPRINT(MAKEUNKNOWNCODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEUNKNOWNCODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if first.name then do;
MPRINT(MAKEUNKNOWNCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNCODE):   put '*;';
MPRINT(MAKEUNKNOWNCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   string='';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if ^last.name and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('') do;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   otherwise do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=552,
      Last Modified=29Dec2015:14:12:57,
      Create Time=28Dec2015:18:10:26

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   proc datasets lib=work nolist;
MPRINT(MAKECLASSSCORECODE):   delete _temp;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: Deleting WORK._TEMP (memtype=DATA).
MPRINT(MAKECLASSSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge CLASSTEMP(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This may cause unexpected results.
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKEREPLACECODE):   data _null_;
MPRINT(MAKEREPLACECODE):   length string $400;
MPRINT(MAKEREPLACECODE):   set _temp end=eof;
MPRINT(MAKEREPLACECODE):   file _F1;
MPRINT(MAKEREPLACECODE):   by NAME;
MPRINT(MAKEREPLACECODE):   if _N_=1 then do;
MPRINT(MAKEREPLACECODE):   put '   ';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put '* Replace Specific Class Levels ;';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKEREPLACECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEREPLACECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if first.name then do;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACECODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACECODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACECODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACECODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACECODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACECODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=552,
      Last Modified=29Dec2015:14:12:57,
      Create Time=28Dec2015:18:10:26

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   set CLASSTEMP;
MPRINT(MAKECLASSSCORECODE):   where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
MPRINT(MAKECLASSSCORECODE):   keep NAME;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 0 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge _temp(in=_a) CLASSTEMP EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This may cause unexpected results.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: There were 16 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKEUNKNOWNCODE):   data _null_;
MPRINT(MAKEUNKNOWNCODE):   set _temp;
MPRINT(MAKEUNKNOWNCODE):   length string $400;
MPRINT(MAKEUNKNOWNCODE):   length newlevel replaceLevel $200;
MPRINT(MAKEUNKNOWNCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNCODE):   file _F1;
MPRINT(MAKEUNKNOWNCODE):   by NAME;
MPRINT(MAKEUNKNOWNCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put '* Replace Unknown Class Levels ;';
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put 'length _UFORMAT200 $200;';
MPRINT(MAKEUNKNOWNCODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEUNKNOWNCODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if first.name then do;
MPRINT(MAKEUNKNOWNCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNCODE):   put '*;';
MPRINT(MAKEUNKNOWNCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   string='';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if ^last.name and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('') do;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   otherwise do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=552,
      Last Modified=29Dec2015:14:12:57,
      Create Time=28Dec2015:18:10:14

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge CLASSTEMP(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This may cause unexpected results.
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKEREPLACECODE):   data _null_;
MPRINT(MAKEREPLACECODE):   length string $400;
MPRINT(MAKEREPLACECODE):   set _temp end=eof;
MPRINT(MAKEREPLACECODE):   file _F1;
MPRINT(MAKEREPLACECODE):   by NAME;
MPRINT(MAKEREPLACECODE):   if _N_=1 then do;
MPRINT(MAKEREPLACECODE):   put '   ';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put '* Replace Specific Class Levels ;';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKEREPLACECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEREPLACECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if first.name then do;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACECODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACECODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACECODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACECODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACECODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACECODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=552,
      Last Modified=29Dec2015:14:12:57,
      Create Time=28Dec2015:18:10:14

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKECLASSDELTACODE):   filename _F1 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas" MOD;
MPRINT(MAKECLASSDELTACODE):   data _null_;
MPRINT(MAKECLASSDELTACODE):   set EMWS1.Repl_CLASSINFO end=eof;
MPRINT(MAKECLASSDELTACODE):   length string $400;
MPRINT(MAKECLASSDELTACODE):   file _F1;
MPRINT(MAKECLASSDELTACODE):   string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   put 'else';
MPRINT(MAKECLASSDELTACODE):   string = '   if NAME="'!!strip(NEWNAME)!!'" then do;';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   string = '      ROLE="'!!strip(ROLE)!!'";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   string = '      LEVEL="'!!strip(MLEVEL)!!'";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   put 'end;';
MPRINT(MAKECLASSDELTACODE):   if ^eof then put 'else';
MPRINT(MAKECLASSDELTACODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=350,
      Last Modified=29Dec2015:14:12:57,
      Create Time=28Dec2015:18:10:10

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSDELTACODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKEVALUEREPORT):   data EMWS1.Repl_VALUES;
MPRINT(MAKEVALUEREPORT):   set CLASSTEMP;
MPRINT(MAKEVALUEREPORT):   where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
MPRINT(MAKEVALUEREPORT):   if LEVEL = '_UNKNOWN_' then do;
MPRINT(MAKEVALUEREPORT):   LEVEL='Unknown';
MPRINT(MAKEVALUEREPORT):   if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
MPRINT(MAKEVALUEREPORT):   else if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
MPRINT(MAKEVALUEREPORT):   if type eq 'N' then REPLACE_VALUE='.';
MPRINT(MAKEVALUEREPORT):   else REPLACE_VALUE='_blank_';
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   else do;
MPRINT(MAKEVALUEREPORT):   if REPLACE_VALUE ='_MISSING_' then do;
MPRINT(MAKEVALUEREPORT):   if type eq 'N' then REPLACE_VALUE='.';
MPRINT(MAKEVALUEREPORT):   else REPLACE_VALUE='_blank_';
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   else if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
MPRINT(MAKEVALUEREPORT):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: The data set EMWS1.REPL_VALUES has 0 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   proc print data=EMWS1.Repl_VALUES label noobs;
MPRINT(SCORE):   title9 ' ';
MPRINT(SCORE):   title10 "Replacement Values for Class Variables";
MPRINT(SCORE):   run;

NOTE: No observations in data set EMWS1.REPL_VALUES.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   title10;
MPRINT(SCORE):   proc datasets lib=work nolist;
MPRINT(SCORE):   delete CLASSTEMP;
MPRINT(SCORE):   run;

NOTE: Deleting WORK.CLASSTEMP (memtype=DATA).
MPRINT(SCORE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("EMSCOREVAR");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Repl_EMSCOREVAR";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 2 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   proc datasets lib=EMWS1 nolist;
MPRINT(SCORE):   delete Repl_EMSCOREVAR;
MPRINT(SCORE):   run;

NOTE: Deleting EMWS1.REPL_EMSCOREVAR (memtype=DATA).
MPRINT(SCORE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):   data EMWS1.Repl_EMSCOREVAR;
MPRINT(SCORE):   length Name $32 formula $70 file $200;
MPRINT(SCORE):   keep NAME Formula file;
MPRINT(SCORE):   name = "REP_CustomerAge";
MPRINT(SCORE):   file="REPLACECODE\REP_CustomerAge.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_FirstPolicyYear";
MPRINT(SCORE):   file="REPLACECODE\REP_FirstPolicyYear.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   run;

NOTE: Variable formula is uninitialized.
NOTE: The data set EMWS1.REPL_EMSCOREVAR has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Repl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23002      
23003      *------------------------------------------------------------*;
23004      * End SCORE: Repl;
23005      *------------------------------------------------------------*;

23006      filename emflow "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23007      *------------------------------------------------------------*;
23008      * Repl: Scoring DATA data;
23009      *------------------------------------------------------------*;
23010      data EMWS1.Repl_TRAIN
23011      / view=EMWS1.Repl_TRAIN
23012      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Repl_TRAIN / view=EMWS1.Repl_TRAIN ;
23013      set EMWS1.Ids_DATA
23014      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_DATA ;
23015      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas.
23016     +* ;
MPRINT(EM_DIAGRAM):   * ;
23017     +* Variable: CustomerAge ;
MPRINT(EM_DIAGRAM):   * Variable: CustomerAge ;
23018     +* ;
MPRINT(EM_DIAGRAM):   * ;
23019     +Label REP_CustomerAge='Replacement: CustomerAge';
MPRINT(EM_DIAGRAM):   Label REP_CustomerAge= 'Replacement: CustomerAge';
23020     +REP_CustomerAge =CustomerAge ;
MPRINT(EM_DIAGRAM):   REP_CustomerAge =CustomerAge ;
23021     +if CustomerAge  eq . then REP_CustomerAge = . ;
MPRINT(EM_DIAGRAM):   if CustomerAge eq . then REP_CustomerAge = . ;
23022     +else
23023     +if CustomerAge >150  then REP_CustomerAge  = . ;
MPRINT(EM_DIAGRAM):   else if CustomerAge >150 then REP_CustomerAge = . ;
23024     +* ;
MPRINT(EM_DIAGRAM):   * ;
23025     +* Variable: FirstPolicyYear ;
MPRINT(EM_DIAGRAM):   * Variable: FirstPolicyYear ;
23026     +* ;
MPRINT(EM_DIAGRAM):   * ;
23027     +Label REP_FirstPolicyYear='Replacement: FirstPolicyYear';
MPRINT(EM_DIAGRAM):   Label REP_FirstPolicyYear= 'Replacement: FirstPolicyYear';
23028     +REP_FirstPolicyYear =FirstPolicyYear ;
MPRINT(EM_DIAGRAM):   REP_FirstPolicyYear =FirstPolicyYear ;
23029     +if FirstPolicyYear  eq . then REP_FirstPolicyYear = . ;
MPRINT(EM_DIAGRAM):   if FirstPolicyYear eq . then REP_FirstPolicyYear = . ;
23030     +else
23031     +if FirstPolicyYear <1900  then REP_FirstPolicyYear  = . ;
MPRINT(EM_DIAGRAM):   else if FirstPolicyYear <1900 then REP_FirstPolicyYear = . ;
23032     +else
23033     +if FirstPolicyYear >2016  then REP_FirstPolicyYear  = . ;
MPRINT(EM_DIAGRAM):   else if FirstPolicyYear >2016 then REP_FirstPolicyYear = . ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
23034      run;

NOTE: DATA STEP view saved on file EMWS1.REPL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IDS_DATA.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
23035      quit;
23036      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23038      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
23039      * Repl: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Repl: Computing metadata for TRAIN data;
23040      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Repl_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Repl_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Repl_TRAIN out=WORK.M0XZ6Z96 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0XZ6Z96;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0XZ6Z96(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0XZ6Z96;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0XZ6Z96;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3X2PNJI NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3X2PNJI;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3X2PNJI;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BQBJJN(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3X2PNJI;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3X2PNJI;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3X2PNJI;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3X2PNJI;
MPRINT(EMADVISECOLUMNS):   set WORK.M3X2PNJI;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Ids_DATA noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_CMeta_DATA out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Repl_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Repl";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="CustomerAge" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_CustomerAge" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="FirstPolicyYear" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_FirstPolicyYear" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
