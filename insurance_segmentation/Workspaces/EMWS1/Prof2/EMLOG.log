*------------------------------------------------------------*
User:                D059331
Date:                December 31, 2015
Time:                13:06:02
Site:                70107571
Platform:            X64_8PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 31, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:05:44" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 31, 2015
Time:                13:05:44
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3O2IC4N "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3O2IC4N new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 31, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:05:44" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                D059331";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 31, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:05:44" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                D059331";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
28877      proc freq data=EMWS1.Prof2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Prof2_VariableSet noprint;
28878      table ROLE*LEVEL/out=WORK.Prof2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Prof2META;
28879      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.PROF2_VARIABLESET.
NOTE: The data set WORK.PROF2META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
28880      proc print data=WORK.Prof2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Prof2META label noobs;
28881      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
28882      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
28883      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
28884      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
28885      run;
 
NOTE: There were 8 observations read from the data set WORK.PROF2META.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28886      title10;
MPRINT(EM_DIAGRAM):   title10;
28887      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Prof2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Prof2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'insurance_segmentation';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'insurance segmentation';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29227      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
29228      * Prof2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Prof2: Generation of macros and macro variables;
29229      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
29230      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
29231      %let EMEXCEPTIONSTRING=;
29232      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
29233      * TRAIN: Prof2;
MPRINT(EM_DIAGRAM):   * TRAIN: Prof2;
29234      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29235      %let EM_ACTION = TRAIN;
29236      %let syscc = 0;
29237      %macro main;
29238         %if %sysfunc(indexw(&EM_DEBUG, _ALL_)) or %sysfunc(indexw(&EM_DEBUG, SOURCE)) %then %do;
29239             options MPRINT;
29240         %end;
29241
29242         filename temp catalog 'sashelp.emexpl.profile_macros.source';
29243         %include temp;
29244         filename temp;
29245
29246         /* Initialize property macro variables */
29247         %SetProperties;
29248
29249         %if %upcase(&EM_ACTION) = CREATE %then %do;
29250
29251             filename temp catalog 'sashelp.emexpl.profile_create.source';
29252             %include temp;
29253             filename temp;
29254             %create;
29255         %end;
29256         %else
29257         %if %upcase(&EM_ACTION) = TRAIN %then %do;
29258
29259             filename temp catalog 'sashelp.emexpl.profile_train.source';
29260             %include temp;
29261             filename temp;
29262             %train;
29263         %end;
29264      %mend main;
29265
29266      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.profile_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.PROFILE_MACROS.SOURCE.
29267     +%macro SetProperties;
29268     +   %em_checkmacro(name=EM_PROPERTY_PROFILEALL,         global=Y, value=N);
29269     +   %em_checkmacro(name=EM_PROPERTY_USEREPORTVARS,      global=Y, value=Y);
29270     +   %em_checkmacro(name=EM_PROPERTY_OTHERPERCENTCUTOFF, global=Y, value=95);
29271     +   %em_checkmacro(name=EM_PROPERTY_TARGETROLE,         global=Y, value=NONE);
29272     +   %em_checkmacro(name=EM_PROPERTY_NUMHISTBARS,        global=Y, value=8);
29273     +   %em_checkmacro(name=EM_PROPERTY_MINWORTH,           global=Y, value=0.01);
29274     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,           global=Y, value=1);
29275     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMREPORT,       global=Y, value=10);
29276     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMINPUT,        global=Y, value=10);
29277     +   %em_checkmacro(name=EM_PROPERTY_PRINTWORTH,         global=Y, value=Y);
29278     +%mend SetProperties;
29281     +%macro makeVarMacros(level= );
29283     +    %let numvars = 0;
29284     +    %let where   = '';
29286     +    %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
29287     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL="&level"  and USE in('Y', 'D'));
29288     +    %else
29289     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE ='INPUT' and LEVEL="&level" and USE in('Y', 'D'));
29291     +    %if &level = INTERVAL %then %do;
29292     +        %let numvars = %eval( &EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED);
29293     +        %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
29294     +             %let numvars = %eval(&numvars + &EM_NUM_INTERVAL_TARGET);
29295     +    %end;
29296     +    %else %do;
29297     +        %if &level = NOMINAL %then %do;
29298     +            %let numvars = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +  &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED);
29299     +             %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then %do;
29300     +                 %let numvars = %eval(&numvars + &EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET);
29301     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL in('NOMINAL', 'BINARY') and USE in('Y', 'D'));
29302     +             %end;
29303     +             %else
29304     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE ='INPUT' and LEVEL in("NOMINAL", "BINARY") and USE in('Y', 'D'));
29306     +        %end;
29307     +        %else %do;
29308     +            %let numvars = %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED);
29309     +            %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
29310     +                %let numvars = %eval(&numvars + &EM_NUM_ORDINAL_TARGET);
29311     +        %end;
29312     +    %end;
29314     +    %if &numvars>0 %then %do;
29315     +         %let numloop = %sysfunc(ceil(&numvars/10000));
29316     +         %let loopcount = 0;
29318     +         %do %while((&numloop - &loopcount) > 0);
29319     +             %let first = %eval((&loopcount*10000) + 1);
29320     +             %let last  = %eval(&first + 10000);
29321     +             %let loopcount = %eval(&loopcount +1);
29322     +             %let centry = &EM_LIB..&EM_NODEID._MACS.&LEVEL._&loopcount..SOURCE;
29323     +             filename X catalog "&centry";
29324     +             data _null_;
29325     +                length _STRING_ $80;
29326     +                retain _STRING_ ;
29327     +                file X;
29328     +                set &EM_DATA_VARIABLESET(firstobs=&first obs=&last) end=eof;
29330     +                where &where;
29332     +                if _N_=1 then
29333     +                   put '%macro _PROFVAR;';
29335     +                if (length(_STRING_) + length(trim(NAME))+ 1  < 80) then do;
29336     +                   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
29337     +                   if eof then do;
29338     +                      put _STRING_;
29339     +                      put '%mend _PROFVAR;';
29340     +                   end;
29341     +                end;
29342     +                else do;
29343     +                   put _STRING_;
29344     +                  _string_ = TRIM(NAME);
29345     +                   if eof then do;
29346     +                      put _string_;
29347     +                      put '%mend _PROFVAR;';
29348     +                   end;
29349     +                end;
29350     +             run;
29351     +             filename X;
29352     +         %end;
29353     +    %end;
29355     +%mend makeVarMacros;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.profile_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.PROFILE_TRAIN.SOURCE.
29358     +%macro _looparbor(level=, target=, rules=);
29359     +    %local where;
29361     +    %if (&level eq or &target eq ) %then %goto doenda;
29362     +    %if &rules eq %then &rules = _TEMPRULE;
29364     +    %let lnumvars = 0;
29365     +    %let where   = '';
29367     +    %if &level = INTERVAL %then %do;
29368     +        %let lnumvars = %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED);
29369     +        %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
29370     +             %let lnumvars = %eval(&lnumvars + &EM_NUM_INTERVAL_TARGET);
29371     +    %end;
29372     +    %else %do;
29373     +        %if &level = NOMINAL %then %do;
29374     +            %let lnumvars = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED);
29375     +             %if  (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
29376     +                 %let lnumvars = %eval(&lnumvars + &EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET);
29377     +        %end;
29378     +        %else %do;
29379     +            %let lnumvars = %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED);
29380     +            %if  (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
29381     +                %let lnumvars = %eval(&lnumvars + &EM_NUM_ORDINAL_TARGET);
29382     +        %end;
29383     +    %end;
29385     +    %if &lnumvars>0 %then %do;
29386     +         %let numloop = %sysfunc(ceil(&lnumvars/10000));
29387     +         %let loopcount = 0;
29389     +         %do %while((&numloop - &loopcount) > 0);
29390     +             %let loopcount = %eval(&loopcount +1);
29391     +             %let centry = &EM_LIB..&EM_NODEID._MACS.&LEVEL._&loopcount..SOURCE;
29392     +             filename X catalog "&centry";
29393     +             %inc X;
29395     +             proc arbor data=&EM_NODEID._TMP
29397     +             %if &EM_PROPERTY_MAXDEPTH = 1 %then %do;
29398     +                 Criterion=GINI Leafsize=5 Mincatsize = 5
29399     +                 Maxbranch=5 Maxdepth=1
29400     +                 NORULELIMIT MAXRULES=&EM_PROPERTY_MAXNUMINPUT
29401     +             %end;
29402     +             %else %do;
29403     +                 Criterion=PROBCHISQ alpha=0.2 Leafsize=5 Mincatsize = 5
29404     +                 Maxbranch=5 Maxdepth=&EM_PROPERTY_MAXDEPTH
29405     +                 MAXRULES=5 Padjust= CHAIDBEFORE DEPTH
29406     +             %end;
29408     +              MAXSURRS=0 Missing=USEINSEARCH Exhaustive=5000;
29410     +                input %_PROFVAR
29412     +                    / level = &level;
29413     +                target _SEG / level=binary;
29415     +                Performance Disk NodeSize=10000;
29416     +                Assess NoValidata measure=MISC;
29417     +                SUBTREE BEST;
29419     +                %if &EM_PROPERTY_MAXDEPTH > 1 %then %do;
29420     +                    save IMPORTANCE=_LOOPTEMPRULE;
29421     +                %end;
29422     +                %else %do;
29423     +                    save RULES=_LOOPTEMPRULE;
29424     +                %end;
29425     +             run;
29426     +             quit;
29428     +             %if %sysfunc(exist(_LOOPTEMPRULE)) %then %do;
29429     +                 proc append base=&RULES data=_LOOPTEMPRULE force;
29430     +                 run;
29431     +                 proc datasets lib=work nolist mt=(DATA VIEW);
29432     +                    delete _LOOPTEMPRULE;
29433     +                 run;
29434     +                 quit;
29435     +             %end;
29438     +             filename X;
29439     +         %end;
29440     +     %end;
29442     +   %doenda:
29444     +%mend _looparbor;
29446     +%macro _arbor(target=, rules=, fit=);
29447     +   %local _numnomvars _numordvars _numintvars;
29449     +   %if &target eq  %then %goto doendc;
29450     +   %if &rules eq %then &rules = _TEMPRULE;
29451     +   %if &fit   eq %then &fit   = _FIT;
29453     +   %let _numintvars = %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED);
29454     +   %if  (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
29455     +       %let _numintvars = %eval(&_numintvars + &EM_NUM_INTERVAL_TARGET);
29458     +   %let _numnomvars =  %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED);
29459     +   %if  (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
29460     +       %let _numnomvars = %eval(&_numnomvars + &EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET);
29462     +   %let _numordvars = %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED);
29463     +   %if  (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
29464     +       %let _numordvars = %eval(&_numordvars + &EM_NUM_ORDINAL_TARGET);
29466     +   proc arbor data=&EM_NODEID._TMP
29468     +   %if &EM_PROPERTY_MAXDEPTH = 1 %then %do;
29469     +      Criterion=GINI Leafsize=5 Mincatsize = 5
29470     +      Maxbranch=5 Maxdepth=1
29471     +      NORULELIMIT MAXRULES=&EM_PROPERTY_MAXNUMINPUT
29472     +   %end;
29473     +   %else %do;
29474     +      Criterion=PROBCHISQ alpha=0.2 Leafsize=5 Mincatsize = 5
29475     +      Maxbranch=2 Maxdepth=&EM_PROPERTY_MAXDEPTH
29476     +      MAXRULES=5 Padjust= CHAIDBEFORE DEPTH
29477     +   %end;
29479     +      MAXSURRS=0 Missing=USEINSEARCH Exhaustive=5000;
29481     +      %if &_numintvars %then %do;
29482     +          input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
29484     +          %if  (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then %do;
29485     +              %EM_INTERVAL_TARGET
29486     +          %end;
29488     +              / level = interval;
29489     +      %end;
29492     +      %if &_numnomvars %then %do;
29493     +          input %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED
29495     +          %if  (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then %do;
29496     +              %EM_BINARY_TARGET %EM_NOMINAL_TARGET
29497     +          %end;
29499     +              / level = nominal;
29500     +      %end;
29502     +      %if &_numordvars %then %do;
29503     +         input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED
29505     +         %if  (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then %do;
29506     +              %EM_ORDINAL_TARGET
29507     +         %end;
29509     +             / level = ordinal;
29510     +      %end;
29512     +      target _SEG / level=binary;
29514     +      Performance Disk NodeSize=10000;
29515     +      Assess
29517     +       %if %sysfunc(exist(&EM_NODEID._VALIDTMP, VIEW))>0 %then %do;
29518     +          Validata=&EM_NODEID._VALIDTMP
29519     +      %end;
29520     +      %else %do;
29521     +          NoValidata
29522     +      %end;
29524     +      measure=MISC;
29525     +      SUBTREE BEST;
29527     +      %if &EM_PROPERTY_MAXDEPTH > 1 %then %do;
29528     +          SCORE data=&EM_NODEID._TMP  out=_NULL_ outfit=_FIT
29529     +                role=TRAIN;
29530     +          %if %sysfunc(exist(&EM_NODEID._VALIDTMP, VIEW))>0 %then %do;
29531     +          SCORE data=&EM_NODEID._VALIDTMP  out=_NULL_ outfit=_FIT2
29532     +                role=VALID;
29533     +          %end;
29535     +          save IMPORTANCE=_RULE;
29536     +      %end;
29537     +      %else %do;
29538     +          save RULES=_RULE;
29539     +      %end;
29541     +      ;
29542     +   run;
29543     +   quit;
29545     +   %if %sysfunc(exist(_RULE)) %then %do;
29546     +       proc append base=&RULES data=_RULE force;
29547     +       run;
29548     +       proc datasets lib=work nolist mt=(DATA VIEW);
29549     +          delete _RULE;
29550     +       run;
29551     +       quit;
29552     +   %end;
29554     +   %doendc:
29556     +%mend _arbor;
29558     +%macro tree_profile(SEGMENT=, _sizeDs=, _varsDs=, _fitDs=, _reportDs=);
29559     +   %put &EM_CODEBAR;
29560     +   %put * Filtering input variables ;
29561     +   %put * SEGMENT= &segment;
29562     +   %put &EM_CODEBAR;
29564     +  %if _sizeDs eq %then %let _sizeDs = WORK._SEGMENTSIZE;
29565     +  %if _varsDs eq %then %let _varsDs = WORK._SELECTEDVARS;
29566     +  %if _fitDs  eq %then %let _fitDs  = WORK._FITSTAT;
29568     +  %let _SEGMENT = &SEGMENT;
29570     +  proc freq data=&EM_IMPORT_DATA noprint ;
29571     +    table &_segment / missing out=&_segment(keep=&_segment count percent) ;
29573     +    %if %EM_FREQ ne %then %do;
29574     +        weight %EM_FREQ;
29575     +        where %EM_FREQ>=0;
29576     +    %end;
29578     +  run ;
29579     +  proc sort data=&_segment;
29580     +     by descending count ;
29581     +  run ;
29583     +  %let dsid       = %sysfunc(open(&_segment));
29584     +  %let segnum     = %sysfunc(varnum(&dsid, &_segment));
29585     +  %let _segtype   = %sysfunc(vartype(&dsid, &segnum));
29586     +  %let _segformat = %sysfunc(varfmt(&dsid, &segnum));
29588     +  %let dsid=%sysfunc(close(&dsid));
29590     +  %let SEGMENTS=;
29591     +  %let COUNTS=;
29592     +  %let OTHERWHERE=;
29593     +  %let numLevels=;
29594     +  data _segs;
29595     +     length SegmentVariable $32 SegmentValue $200;
29596     +     retain SegmentVariable "&_Segment";
29597     +     label SegmentVariable = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvariable_vlabel,  NOQUOTE))"
29598     +           SegmentValue    = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvalue_vlabel,  NOQUOTE))";
29599     +     drop &_segment cum othercount otherpct numLevels;
29600     +     retain cum othercount otherpct numLevels 0;
29601     +     format Count 8.;
29602     +     set &_segment end=eof;
29604     +     %if &_segformat ne %then %do;
29605     +         SegmentValue= left(put(&_segment, &_segformat));
29606     +     %end;
29607     +     %else %do;
29608     +        %if &_segtype = N %then %do;
29609     +            SegmentValue= left(put(&_segment, best12.));
29610     +        %end;
29611     +        %else %do;
29612     +            SegmentValue = &_segment;
29613     +        %end;
29614     +     %end;
29616     +     %if &EM_PROPERTY_PROFILEALL eq Y %then %do;
29617     +        call symput('SEGMENTS'!!strip(put(_N_,BEST.)), strip(tranwrd(SegmentValue, '"','""'))) ;
29618     +        call symput('COUNTS' !!strip(put(_N_,BEST.)),  strip(put(count, best.))) ;
29619     +        numLevels + 1;
29620     +        output;
29621     +     %end;
29622     +     %else %do;
29623     +         if (cum < &EM_PROPERTY_OTHERPERCENTCUTOFF) or (trim(symget('OTHERWHERE')) eq ' ' and eof) then do;
29624     +            call symput('SEGMENTS'!!strip(put(_N_,BEST.)), strip(tranwrd(SegmentValue, '"','""'))) ;
29625     +            call symput('COUNTS' !!strip(put(_N_,BEST.)),  strip(put(count, best.))) ;
29626     +            numLevels + 1;
29627     +            output;
29628     +         end;
29629     +         else do;
29630     +            %if &_segtype = C or &_segformat ne %then %do;
29631     +                call symput('OTHERWHERE'  ,symget('OTHERWHERE'  ) !! ' ' !!
29632     +                                     quote(strip(tranwrd(SegmentValue, '"','""'))));
29633     +            %end;
29634     +            %else %do;
29635     +                call symput('OTHERWHERE'  ,symget('OTHERWHERE'  ) !! ' ' !! strip(SegmentValue));
29636     +            %end;
29637     +            othercount = othercount + count;
29638     +            otherpct   = otherpct + percent;
29639     +            if eof then do;
29640     +               SegmentValue = '_OTHER_';
29641     +               count   = othercount;
29642     +               percent = otherpct;
29643     +               numLevels + 1;
29644     +               call symput('SEGMENTS'!! strip(put(numLevels,BEST.)), '_OTHER_') ;
29645     +               call symput('COUNTS'  !! strip(put(numLevels,BEST.)),  strip(put(count, best.))) ;
29646     +               output;
29647     +            end;
29648     +         end;
29649     +         cum = cum + percent;
29650     +     %end;
29651     +     if eof then
29652     +        call symput('numLevels', strip(put(numLevels,BEST.))) ;
29653     +  run ;
29655     +  title9 " " ;
29656     +  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_frequency_title,  NOQUOTE, &_Segment))";
29657     +  proc print data=_segs noobs label ;
29658     +  run ;
29659     +  title9;
29660     +  title10;
29662     +  proc append base=&_sizeDs data=_segs force;
29663     +  run;
29665     +  %let numvars= %eval(&EM_NUM_INPUT + &EM_NUM_REJECTED);
29666     +  %if  (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
29667     +      %let numvars= %eval(&EM_NUM_INPUT + &EM_NUM_REJECTED + &EM_NUM_TARGET);
29669     +  /* Loop over segments */
29670     +  %do i=1 %to &numLevels;
29671     +     %if ^&numvars %then %do;
29672     +         %if %sysfunc(exist(&_reportDs)) %then %do;
29673     +             data _TEMPRULE(keep=SegmentVariable SegmentValue Variable Rank Worth);
29674     +               label SegmentVariable = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvariable_vlabel,  NOQUOTE))"
29675     +                     SegmentValue    = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvalue_vlabel,  NOQUOTE))"
29676     +                     Variable        = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,  NOQUOTE))"
29677     +                     Rank            = "%sysfunc(sasmsg(sashelp.dmine, rpt_rank_vlabel,  NOQUOTE))"
29678     +                     Worth           = "%sysfunc(sasmsg(sashelp.dmine, rpt_worth_vlabel,  NOQUOTE))";
29679     +                length SegmentVariable $32 SegmentValue $200;
29680     +                retain SegmentVariable "&_segment" SegmentValue "&&segments&i";
29681     +                set &_reportDs;
29682     +                Rank = _N_;
29683     +             run;
29684     +             proc append base=&_varsDs data=_TEMPRULE force;
29685     +             run;
29686     +         %end;
29687     +         %goto doskip;
29688     +     %end;
29690     +     %if &_segformat ne %then %do;
29691     +         %if %nrbquote(&&segments&i) = _OTHER_ %then
29692     +             %let where= strip(put(&_segment, &_segformat)) in(&OTHERWHERE);
29693     +         %else
29694     +             %let where= strip(put(&_segment, &_segformat)) = "&&segments&i";
29695     +     %end;
29696     +     %else %do;
29697     +         %if %nrbquote(&&segments&i) = _OTHER_ %then
29698     +                 %let where= &_segment in(&OTHERWHERE);
29699     +         %else %do;
29700     +             %if &_segtype eq N %then
29701     +                 %let where= &_segment = &&segments&i;
29702     +             %else
29703     +                 %let where= &_segment = "&&segments&i";
29704     +         %end;
29705     +     %end;
29707     +     data &EM_NODEID._TMP / view=&EM_NODEID._TMP ;
29708     +        set &EM_IMPORT_DATA(keep=%EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET
29709     +               %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_BINARY_TARGET
29710     +               %EM_ORDINAL_INPUT  %EM_NOMINAL_INPUT %EM_ORDINAL_REJECTED %EM_NOMINAL_REJECTED
29711     +               %EM_ORDINAL_TARGET %EM_NOMINAL_TARGET &_segment %EM_FREQ);
29712     +        if &where then
29713     +           _seg= 1 ;
29714     +        else
29715     +           _seg= 0 ;
29716     +     run ;
29718     +      %if (&EM_IMPORT_VALIDATE ne ) and (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE, VIEW))) %then %do;
29719     +          data &EM_NODEID._VALIDTMP / view=&EM_NODEID._VALIDTMP ;
29720     +             set &EM_IMPORT_VALIDATE(keep=%EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET
29721     +               %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_BINARY_TARGET
29722     +               %EM_ORDINAL_INPUT  %EM_NOMINAL_INPUT %EM_ORDINAL_REJECTED %EM_NOMINAL_REJECTED
29723     +               %EM_ORDINAL_TARGET %EM_NOMINAL_TARGET &_segment %EM_FREQ);
29725     +             if &where then
29726     +                _seg= 1 ;
29727     +              else
29728     +                 _seg= 0 ;
29729     +          run ;
29730     +      %end;
29732     +     %if  (%eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED + &EM_NUM_INTERVAL_TARGET +
29733     +               &EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED + &EM_NUM_BINARY_TARGET +
29734     +               &EM_NUM_ORDINAL_INPUT  + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_REJECTED  + &EM_NUM_NOMINAL_REJECTED +
29735     +               &EM_NUM_ORDINAL_TARGET +  &EM_NUM_NOMINAL_TARGET) < 10000) %then %do;
29736     +         %_arbor(target=_SEG, rules=_TEMPRULE, FIT=_FIT);
29737     +     %end;
29738     +     %else %do;
29739     +        %_looparbor(level=INTERVAL, target=_SEG, rules=_TEMPRULE);
29740     +        %_looparbor(level=NOMINAL,  target=_SEG, rules=_TEMPRULE);
29741     +        %_looparbor(level=ORDINAL,  target=_SEG, rules=_TEMPRULE);
29742     +     %end;
29744     +     /* Keeping the important variables */
29745     +     %if &EM_PROPERTY_MAXDEPTH = 1 %then %do;
29746     +         data _TEMPRULE(rename=(Name=Variable numeric_value=Worth));
29747     +            length Name $32;
29748     +            label Name = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,  NOQUOTE))";
29749     +            retain Name;
29751     +            set _temprule;
29753     +            where stat in('VARIABLE','WORTH');
29755     +            if stat = 'VARIABLE' then
29756     +               Name = character_value;
29757     +            else
29758     +               output;
29759     +         run;
29761     +         proc sort data=_TEMPRULE;
29762     +            by descending Worth;
29763     +         run;
29765     +         %if %sysfunc(exist(&_reportDs)) %then %do;
29766     +             data _TEMPRULE;
29767     +                set _TEMPRULE(obs=&EM_PROPERTY_MAXNUMINPUT) &_reportDs;
29768     +             run;
29769     +             proc sort data= _TEMPRULE nodupkey;
29770     +                by variable;
29771     +             run;
29772     +             proc sort data=_TEMPRULE;
29773     +                by descending Worth;
29774     +             run;
29775     +         %end;
29776     +         data _TEMPRULE(keep=SegmentVariable SegmentValue Variable Rank Worth);
29777     +              label SegmentVariable = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvariable_vlabel,  NOQUOTE))"
29778     +                    SegmentValue    = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvalue_vlabel,  NOQUOTE))"
29779     +                    Variable        = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,  NOQUOTE))"
29780     +                    Rank            = "%sysfunc(sasmsg(sashelp.dmine, rpt_rank_vlabel,  NOQUOTE))"
29781     +                    Worth           = "%sysfunc(sasmsg(sashelp.dmine, rpt_worth_vlabel,  NOQUOTE))";
29782     +            length SegmentVariable $32 SegmentValue $200;
29783     +            retain SegmentVariable "&_segment" SegmentValue "&&segments&i";
29784     +            %if ^%sysfunc(exist(&_reportDs)) %then %do;
29785     +               set _TEMPRULE(obs=&EM_PROPERTY_MAXNUMINPUT);
29786     +            %end;
29787     +            %else %do;
29788     +                set _TEMPRULE;
29789     +            %end;
29790     +            Rank = _N_;
29791     +            if _N_=1 and worth ne . and (worth < &EM_PROPERTY_MINWORTH) then do;
29792     +               put "&EM_CODEBAR";
29793     +               put "* No input variable meet the minimum worth criterion of &EM_PROPERTY_MINWORTH.";
29794     +               put "* You may identify profile variables by lowering this threshold, ";
29795     +               put "* or by increasing the maximum depth of the decision tree used.";
29796     +               put "&EM_CODEBAR";
29797     +            end;
29798     +         run;
29799     +     %end;
29800     +     %else %do;
29801     +         %if %sysfunc(exist(&_reportDs)) %then %do;
29802     +             data _TEMPRULE;
29803     +                set _TEMPRULE(rename=(NAME=Variable) where=(IMPORTANCE >0)) &_reportDs;
29804     +             run;
29805     +             proc sort data= _TEMPRULE nodupkey;
29806     +                by variable;
29807     +             run;
29808     +             proc sort data=_TEMPRULE;
29809     +                by descending Importance;
29810     +             run;
29811     +         %end;
29812     +         data _TEMPRULE(keep=SegmentVariable SegmentValue Variable Rank Importance);
29813     +              label SegmentVariable = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvariable_vlabel,  NOQUOTE))"
29814     +                  SegmentValue    = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvalue_vlabel,  NOQUOTE))"
29815     +                  Variable        = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,  NOQUOTE))"
29816     +                  Importance      = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel,  NOQUOTE))"
29817     +                  Rank            = "%sysfunc(sasmsg(sashelp.dmine, rpt_rank_vlabel,  NOQUOTE))";
29818     +            length SegmentVariable $32 SegmentValue $200;
29819     +            retain SegmentVariable "&_segment" SegmentValue "&&segments&i";
29820     +            %if ^%sysfunc(exist(&_reportDs)) %then %do;
29821     +               set _TEMPRULE(rename=(NAME=Variable) where=(IMPORTANCE >0));
29822     +            %end;
29823     +            %else %do;
29824     +                set _TEMPRULE;
29825     +            %end;
29826     +            Rank = _N_;
29827     +         run;
29828     +     %end;
29830     +     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_worth_title,  NOQUOTE, &_Segment, &&segments&i, &&counts&i))";
29831     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_worth2_title,  NOQUOTE))";
29833     +     %if &EM_PROPERTY_PRINTWORTH eq Y %then %do;
29834     +         %if &EM_PROPERTY_MAXDEPTH = 1 %then %do;
29835     +             proc print data=_TEMPRULE noobs label ;
29836     +                var Variable Worth Rank;
29837     +                where worth ne .;
29838     +             run ;
29839     +             data _TEMPRULE;
29840     +                set _TEMPRULE;
29841     +                where worth eq . or (worth >= &EM_PROPERTY_MINWORTH);
29842     +             run;
29843     +         %end;
29844     +         %else %do;
29845     +             proc print data=_TEMPRULE noobs label ;
29846     +                var Variable Importance Rank;
29847     +                where importance ne .;
29848     +             run ;
29849     +         %end;
29851     +     %end ;
29853     +     title9;
29854     +     title10;
29856     +     proc append base=&_varsDs data=_TEMPRULE force;
29857     +     run;
29859     +     %if %sysfunc(exist(_FIT)) %then %do;
29860     +         data _FIT;
29861     +            length SegmentVariable $32 SegmentValue $200;
29862     +            retain SegmentVariable "&_Segment" SegmentValue "&&segments&i";
29864     +            %if %sysfunc(exist(_FIT2)) %then %do;
29865     +                merge _FIT(keep=_MISC_) _FIT2(keep=_VMISC_);
29866     +            %end;
29867     +            %else %do;
29868     +                set _FIT(keep=_MISC_);
29869     +            %end;
29871     +         run;
29872     +         proc append base=&_fitDs data=_FIT force;
29873     +         run;
29874     +     %end;
29876     +     %doskip:
29878     +     proc datasets lib=work nolist mt=(DATA VIEW);
29879     +        delete _SEGS &EM_NODEID._TMP &EM_NODEID._VALIDTMP _STAT
29881     +        %if %sysfunc(exist(_TEMPRULE)) %then %do;
29882     +            _TEMPRULE
29883     +        %end;
29884     +        %if %sysfunc(exist(_FIT))>0 %then %do;
29885     +            _FIT
29886     +        %end;
29887     +        %if %sysfunc(exist(_FIT2))>0 %then %do;
29888     +            _FIT2
29889     +        %end;
29890     +     ;
29891     +     run;
29892     +     quit;
29893     +  %end ;
29894     +%mend tree_profile;
29896     +/* This macro loops over segment variables and determines important variables */
29897     +%macro em_profile(_segmentvar= , _sizeDS=WORK._SEGMENTSIZE,
29898     +                  _varsDs=WORK._SELECTEDVARS, _fitDs=WORK._FITSTAT, _reportDs=);
29900     +    %if _sizeDs eq %then %let _sizeDs = WORK._SEGMENTSIZE;
29901     +    %if _varsDs eq %then %let _varsDs = WORK._SELECTEDVARS;
29902     +    %if _fitDs  eq %then %let _fitDs  = WORK._FITSTAT;
29904     +    %if _segmentvar eq %then %do;
29905     +        %put &EM_CODEBAR;
29906     +        %put * No segment variable defined ;
29907     +        %put &EM_CODEBAR;
29908     +        %goto doendep;
29909     +    %end;
29911     +    %let sndx = 0;
29913     +    %let svar = &_segmentvar;
29914     +    %if &svar ne %then %do;
29915     +        %makeVarMacros(LEVEL=INTERVAL);
29916     +        %makeVarMacros(LEVEL=NOMINAL);
29917     +        %makeVarMacros(LEVEL=ORDINAL);
29918     +    %end;
29920     +    %do %while(&svar ne );
29921     +        %let sndx= %eval(&sndx+1);
29922     +        %let svar = %scan(&_segmentvar, &sndx,' ');
29923     +        %if &svar ne %then
29924     +            %tree_profile(segment=&svar, _sizeDS=&_sizeDs, _varsDs=&_varsDs, _fitDs=&_fitDs, _reportDs=&_reportDs);
29925     +    %end ;
29927     +    proc datasets lib=&EM_LIB nolist;
29928     +       delete &EM_NODEID._MACS(mt=catalog);
29929     +    run;
29931     +    %doendep:
29932     +%mend em_profile;
29934     +%macro segmentSummary(SEGMENT=, _VARSDS=, FormatFref=);
29935     +   %put &EM_CODEBAR;
29936     +   %put * Summarizing variables ;
29937     +   %put * SEGMENT= &segment;
29938     +   %put &EM_CODEBAR;
29940     +  %if (&_varsDs eq ) or ^%sysfunc(exist(&_VARSDS)) or ^%sysfunc(exist(&segment)) %then %goto doends;
29942     +  %let _SEGMENT = &SEGMENT;
29944     +  %let dsid       = %sysfunc(open(&_segment));
29945     +  %let segnum     = %sysfunc(varnum(&dsid, &_segment));
29946     +  %let _segtype   = %sysfunc(vartype(&dsid, &segnum));
29947     +  %let _segformat = %sysfunc(varfmt(&dsid, &segnum));
29949     +  %let dsid=%sysfunc(close(&dsid));
29951     +  %let SEGMENTS=;
29952     +  %let COUNTS=;
29953     +  %let OTHERWHERE=;
29954     +  %let numLevels=;
29955     +  data _null_;
29956     +     retain cum othercount otherpct  numLevels 0;
29957     +     format Count 8.;
29958     +     set &_segment end=eof;
29960     +     %if &_segformat ne %then %do;
29961     +         SegmentValue= strip(put(&_segment, &_segformat));
29962     +     %end;
29963     +     %else %do;
29964     +        %if &_segtype = N %then %do;
29965     +            SegmentValue= strip(put(&_segment, best12.));
29966     +        %end;
29967     +        %else %do;
29968     +            SegmentValue = &_segment;
29969     +        %end;
29970     +     %end;
29972     +     %if &EM_PROPERTY_PROFILEALL eq Y %then %do;
29973     +         call symput('SEGMENTS'!!strip(put(_N_,BEST.)), strip(tranwrd(SegmentValue, '"','""'))) ;
29974     +         call symput('COUNTS' !!strip(put(_N_,BEST.)),  strip(put(count, best.))) ;
29975     +         numLevels + 1;
29976     +         output;
29977     +     %end;
29978     +     %else %do;
29979     +         if (cum < &EM_PROPERTY_OTHERPERCENTCUTOFF) or (trim(symget('OTHERWHERE')) eq ' ' and eof) then do;
29980     +            call symput('SEGMENTS'!!strip(put(_N_,BEST.)), strip(tranwrd(SegmentValue, '"','""'))) ;
29981     +            call symput('COUNTS' !!strip(put(_N_,BEST.)),  strip(put(count, best.))) ;
29982     +            numLevels + 1;
29983     +            output;
29984     +         end;
29985     +         else do;
29986     +            %if &_segtype = C or &_segformat ne %then %do;
29987     +                call symput('OTHERWHERE'  ,symget('OTHERWHERE'  ) !! ' ' !!
29988     +                                     quote(strip(tranwrd(SegmentValue, '"','""'))));
29989     +            %end;
29990     +            %else %do;
29991     +                call symput('OTHERWHERE'  ,symget('OTHERWHERE'  ) !! ' ' !! strip(SegmentValue));
29992     +            %end;
29993     +            othercount = othercount + count;
29994     +            otherpct   = otherpct + percent;
29995     +            if eof then do;
29996     +               SegmentValue = '_OTHER_';
29997     +               count   = othercount;
29998     +               percent = otherpct;
29999     +               numLevels + 1;
30000     +               call symput('SEGMENTS'!! strip(put(numLevels,BEST.)), '_OTHER_') ;
30001     +               call symput('COUNTS'  !! strip(put(numLevels,BEST.)),  strip(put(count, best.))) ;
30002     +               output;
30003     +            end;
30004     +         end;
30005     +         cum = cum + percent;
30006     +     %end;
30007     +     if eof then
30008     +        call symput('numLevels', strip(put(numLevels,BEST.))) ;
30009     +  run ;
30011     +  /* Loop over segments */
30012     +  %do S = 1 %to &numLevels;
30013     +     %if &_segformat ne %then %do;
30014     +         %if %nrbquote(&&segments&s) = _OTHER_ %then
30015     +             %let where= strip(put(&_segment, &_segformat)) in(&OTHERWHERE);
30016     +         %else
30017     +             %let where= strip(put(&_segment, &_segformat)) = "&&segments&s";
30018     +     %end;
30019     +     %else %do;
30020     +         %if %nrbquote(&&segments&s) = _OTHER_ %then
30021     +                 %let where= &_segment in(&OTHERWHERE);
30022     +         %else %do;
30023     +             %if &_segtype eq N %then
30024     +                 %let where= &_segment = &&segments&s;
30025     +             %else
30026     +                 %let where= &_segment = "&&segments&s";
30027     +         %end;
30028     +     %end;
30030     +     %let SEGVARS=;
30031     +     %let SEGCLASS=;
30032     +     data _tempStat;
30033     +        set &_varsDs;
30034     +        where  SegmentVariable="&_segment" and SegmentValue="&&segments&s";
30035     +        if Type eq 'I' then
30036     +           call symput('SEGVARS',symget('SEGVARS' ) !! ' ' !! trim(left(Variable))) ;
30037     +        else
30038     +           call symput('SEGCLASS',symget('SEGCLASS' ) !! ' ' !! trim(left(Variable))) ;
30039     +     run ;
30041     +     %let _nobs = 0;
30042     +     %let dsid = %sysfunc(open(_tempStat));
30043     +     %if &dsid %then %do;
30044     +         %let _nobs = %sysfunc(attrn(&dsid, NLOBS));
30045     +         %let dsid = %sysfunc(close(&dsid));
30046     +     %end;
30047     +     %if &_nobs<1 %then %goto doskips;
30049     +     proc sort data=_tempStat;
30050     +        by Variable;
30051     +     run;
30053     +     data &EM_NODEID._TMP / view=&EM_NODEID._TMP ;
30054     +        set &EM_IMPORT_DATA;
30056     +        where &where;
30058     +        %if (&FormatFref ne ) and (&segvars ne ) %then %do;
30059     +            %inc &FormatFref;
30060     +        %end;
30061     +     run;
30063     +     /* Profile Segment */
30064     +     %if &segclass ne %then %do;
30065     +         %class_profile(DATA=&EM_NODEID._TMP, OUTPUT=_CLASS, VARS=&SEGCLASS, STAT=_STAT, FREQ=%EM_FREQ);
30066     +         data _CLASS;
30067     +            length SegmentVariable $32 SegmentValue $200;
30068     +            retain SegmentVariable "&_Segment" SegmentValue "&&segments&s";
30069     +            label Variable        = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,  NOQUOTE))"
30070     +                   value    = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,  NOQUOTE))"
30071     +                   count    = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,  NOQUOTE))"
30072     +                   percent  = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))";
30073     +            set _CLASS;
30074     +         run;
30075     +         proc append base=&EM_USER_CLASSDIST data=_CLASS force;
30076     +         run;
30077     +         data _tempStat;
30078     +            merge _tempStat _STAT;
30079     +            by VARIABLE;
30080     +         run;
30081     +     %end;
30082     +     %if &segvars ne %then %do;
30083     +         %var_profile(DATA=&EM_NODEID._TMP, OUTPUT=_INTERVAL, VARS=&SEGVARS,
30084     +                           STAT=_STAT, BIN=N, FREQ=%EM_FREQ, NUMBARS= &EM_PROPERTY_NUMHISTBARS);
30085     +         data _INTERVAL;
30086     +             length SegmentVariable $32 SegmentValue $200;
30087     +             retain SegmentVariable "&_Segment" SegmentValue "&&segments&s";
30088     +             label Variable        = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,  NOQUOTE))"
30089     +                   value    = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,  NOQUOTE))"
30090     +                   count    = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,  NOQUOTE))"
30091     +                   percent  = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))";
30092     +             set _INTERVAL;
30093     +         run;
30095     +         proc append base=&EM_USER_INTDIST data=_INTERVAL force;
30096     +         run;
30098     +         proc sort data=_STAT(KEEP=VARIABLE NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS);
30099     +            by VARIABLE;
30100     +         run;
30101     +         data _tempStat;
30102     +            merge _tempStat _STAT;
30103     +            by VARIABLE;
30104     +         run;
30106     +     %end;
30108     +     proc sort data=_tempStat;
30109     +        by Rank;
30110     +     run;
30111     +     proc append base=&EM_USER_STATS data=_tempStat force;
30112     +     run;
30114     +     %doskips:
30116     +     proc datasets lib=work nolist mt=(DATA VIEW);
30117     +        delete _segment &EM_NODEID._TMP _interval _class
30119     +        %if %sysfunc(exist(_tempStat))>0 %then %do;
30120     +            _tempStat
30121     +        %end;
30122     +     ;
30123     +     run;
30124     +     quit;
30127     +  %end ;
30128     +%mend segmentSummary;
30130     +%macro train;
30132     +   /* Retrieve data set name */
30133     +   %EM_GETNAME(KEY=SIZE,       TYPE=DATA);
30134     +   %EM_GETNAME(KEY=FIT,        TYPE=DATA);
30135     +   %EM_GETNAME(KEY=STATS,      TYPE=DATA);
30136     +   %EM_GETNAME(KEY=WORTH,      TYPE=DATA);
30137     +   %EM_GETNAME(KEY=IMPORTANCE, TYPE=DATA);
30138     +   %EM_GETNAME(KEY=CLASSDIST,  TYPE=DATA);
30139     +   %EM_GETNAME(KEY=INTDIST,    TYPE=DATA);
30140     +   %EM_GETNAME(KEY=SELVARS,    TYPE=DATA);
30142     +   /* Delete previous data sets */
30143     +   proc datasets lib=&EM_LIB nolist;
30144     +      delete &EM_NODEID._SIZE  &EM_NODEID._STATS &EM_NODEID._FIT &EM_NODEID._WORTH
30145     +             &EM_NODEID._IMPORTANCE &EM_NODEID._SELVARS
30146     +             &EM_NODEID._CLASSDIST  &EM_NODEID._INTDIST &EM_NODEID._MACS(mt=catalog);
30147     +   run;
30149     +   %if (%sysfunc(exist(&EM_IMPORT_DATA))<1 and %sysfunc(exist(&EM_IMPORT_DATA, VIEW))<1)
30150     +       or (&EM_IMPORT_DATA eq ) %then %do;
30151     +       %let  EMEXCEPTIONSTRING = exception.server.emtool.PROFNEEDTRAINDATASET;
30152     +       %goto doendpt;
30153     +   %end;
30155     +    proc sort data=&EM_DATA_VARIABLESET;
30156     +       by Name;
30157     +    run;
30159     +    %let _segmentvar = %EM_SEGMENT %EM_TREATMENT;
30161     +    %if  (%upcase(&EM_PROPERTY_TARGETROLE) eq SEGMENT) %then
30162     +        %let _segmentvar= &_segmentvar %EM_BINARY_TARGET %EM_NOMINAL_TARGET %EM_ORDINAL_TARGET;
30164     +    /* Add report variables */
30165     +    %let REPORT_VARS = ;
30166     +    %if  (%upcase(&EM_PROPERTY_TARGETROLE) eq REPORT) %then %do;
30167     +        %let REPORT_VARS = %EM_TARGET;
30168     +    %end;
30169     +    %if &EM_PROPERTY_USEREPORTVARS eq Y %then %do;
30170     +        %let REPORT_VARS = &REPORT_VARS %EM_REPORT_VARS;
30171     +    %end;
30173     +    %if &REPORT_VARS ne %then %do;
30174     +        data _tempreport;
30175     +           length Variable $32;
30177     +        %let rndx= 0 ;
30178     +        %let rvar  = &REPORT_VARS;
30179     +        %do %while( &rndx < &EM_PROPERTY_MAXNUMREPORT and &rvar ne  ) ;
30180     +            %let rndx= %eval(&rndx+1);
30181     +            %let rvar = %scan(&REPORT_VARS, &rndx, ' ') ;
30182     +            %if &rvar ne %then %do;
30183     +                Variable="&rvar"; output;
30184     +            %end ;
30185     +        %end;
30187     +        run;
30188     +    %end;
30190     +    %em_profile(_segmentvar=&_segmentvar, _sizeDs=&EM_USER_SIZE,
30191     +                _varsDs=&EM_USER_SELVARS, _fitDs=&EM_USER_FIT, _reportDs=_tempReport);
30193     +    %if ^%sysfunc(exist(&EM_USER_SELVARS)) and (&REPORT_VARS eq ) %then %goto doendpt;
30195     +    %if ^%sysfunc(exist(&EM_USER_SELVARS)) %then %do;
30196     +        data &EM_USER_SELVARS;
30197     +           set _tempreport;
30198     +        run;
30199     +    %end;
30201     +    proc sort data=&EM_USER_SELVARS;
30202     +       by Variable;
30203     +    run;
30204     +    data &EM_USER_SELVARS;
30205     +       length Type $1;
30206     +       label Type = "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel,  NOQUOTE))";
30207     +       merge &EM_USER_SELVARS(in=a) &EM_DATA_VARIABLESET(keep=NAME LEVEL LABEL rename=(NAME=Variable));
30208     +       by Variable;
30209     +       if LABEL eq '' then LABEL=VARIABLE;
30210     +       if a then do;
30211     +          if LEVEL = 'INTERVAL' then Type = 'I';
30212     +          else Type = 'C';
30213     +           output;
30214     +       end;
30215     +       drop LEVEL;
30216     +    run;
30218     +    proc sort data=&EM_USER_SELVARS out=_SummaryVars nodupkey;
30219     +       by Variable;
30220     +    run;
30221     +    %if &EM_PROPERTY_MAXDEPTH > 1 %then %let selStat = Importance;
30222     +    %else
30223     +        %let selStat = Worth;
30225     +   data &EM_USER_STATS(keep=Type SegmentVariable SegmentValue Variable Label Rank &selStat);
30226     +       length Type $1;
30227     +       label Type = "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel,  NOQUOTE))";
30228     +       set _SummaryVars;
30229     +       SegmentVariable= "_OVERALL_"; SegmentValue= "&EM_IMPORT_DATA"  ;
30230     +       rank = .; &selStat=.;
30231     +       if Label eq '' then Label=Variable;
30232     +   run;
30234     +    /* Profile Entire Data */
30235     +   %put &EM_CODEBAR;
30236     +   %put * Profile Entire Data ;
30237     +   %put &EM_CODEBAR;
30239     +    %let segvars=;
30240     +    %let segclass=;
30241     +    data _null_;
30242     +       set  &EM_USER_STATS;
30243     +       if Type = 'I' then
30244     +          call symput('SEGVARS',symget('SEGVARS' ) !! ' ' !! trim(left(Variable))) ;
30245     +       else
30246     +          call symput('SEGCLASS',symget('SEGCLASS' ) !! ' ' !! trim(left(Variable))) ;
30247     +    run ;
30249     +    %if &segclass ne %then %do;
30250     +        %class_profile(DATA=&EM_IMPORT_DATA, OUTPUT=_CLASS, VARS=&SEGCLASS, STAT=_STAT, FREQ=%EM_FREQ);
30251     +        data _CLASS;
30252     +           length SegmentVariable $32 SegmentValue $200;
30253     +           retain SegmentVariable "_OVERALL_" SegmentValue "&EM_IMPORT_DATA";
30254     +           label  variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,  NOQUOTE))"
30255     +                  value    = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,  NOQUOTE))"
30256     +                  count    = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,  NOQUOTE))"
30257     +                  percent  = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))";
30258     +           set _CLASS;
30259     +        run;
30260     +        proc append base=&EM_USER_CLASSDIST data=_CLASS force;
30261     +        run;
30263     +        proc sort data=_STAT;
30264     +           by VARIABLE;
30265     +        run;
30266     +        data &EM_USER_STATS;
30267     +            merge  &EM_USER_STATS _STAT;
30268     +            by VARIABLE;
30269     +        run;
30270     +    %end;
30271     +    %if &segvars ne %then %do;
30272     +        /* Computing Min and Max for Interval Variables */
30273     +        %var_profile(DATA=&EM_IMPORT_DATA, OUTPUT=_INTERVAL, VARS=&SEGVARS,
30274     +                          STAT=_STAT, BINDATA=DATA_STAT, FREQ=%EM_FREQ, BIN=Y, NUMBARS= &EM_PROPERTY_NUMHISTBARS);
30275     +        data _INTERVAL;
30276     +           length SegmentVariable $32 SegmentValue $200;
30277     +           retain SegmentVariable "_OVERALL_" SegmentValue "&EM_IMPORT_DATA";
30278     +           label  variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,  NOQUOTE))"
30279     +                  value    = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,  NOQUOTE))"
30280     +                  count    = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,  NOQUOTE))"
30281     +                  percent  = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))";
30282     +           set _INTERVAL;
30283     +        run;
30285     +        proc append base=&EM_USER_INTDIST data=_INTERVAL force;
30286     +        run;
30288     +        proc sort data=_STAT(KEEP=VARIABLE NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS) OUT=_STAT;
30289     +           by VARIABLE;
30290     +        run;
30291     +        data &EM_USER_STATS;
30292     +            merge  &EM_USER_STATS _STAT;
30293     +            by VARIABLE;
30294     +        run;
30295     +    %end;
30297     +    filename X catalog "&EM_LIB..&EM_NODEID._INTERVAL.FORMAT.source";
30299     +    %if %sysfunc(exist(&EM_LIB..&EM_NODEID._INTERVAL, 'CATALOG')) %then %do;
30300     +        proc datasets lib=&EM_LIB nolist;
30301     +           delete &EM_NODEID._INTERVAL(mt=catalog);
30302     +        run;
30303     +    %end;
30305     +    %if %sysfunc(exist(DATA_STAT)) %then %do;
30306     +        data _null_;
30307     +           file X;
30309     +           %let dsid    =%sysfunc(open(DATA_STAT));
30310     +           %let namenum = %sysfunc(varnum(&dsid, VARIABLE));
30311     +           %let fmtnum  = %sysfunc(varnum(&dsid, FORMAT));
30312     +           %let obs = %sysfunc(fetch(&dsid));
30314     +           put 'format' ;
30316     +           %let _count = 0;
30317     +           %let _VARS=;
30318     +           %do %while(&obs=0);
30320     +               %let _count = %eval(&_count +1);
30321     +               %let _name = %sysfunc(getvarc(&dsid, &namenum));
30322     +               %let _VARS = &_VARS &_name;
30323     +               %let _fmtname = %sysfunc(getvarc(&dsid, &fmtnum));
30324     +               %do;
30325     +                  put "&_name &_fmtname..";
30326     +               %end;
30327     +               %let obs = %sysfunc(fetch(&dsid));
30328     +           %end;
30329     +           %let dsid=%sysfunc(close(&dsid));
30330     +           put ';';
30331     +        run;
30332     +    %end;
30334     +    /* Profile Segments */
30335     +    %if _segmentvar eq %then %goto doendpt;
30336     +    %let sndx = 0;
30338     +    %let svar = &_segmentvar;
30339     +    %do %while(&svar ne );
30340     +        %let sndx= %eval(&sndx+1);
30341     +        %let svar = %scan(&_segmentvar, &sndx,' ');
30342     +        %if &svar ne %then
30343     +            %segmentSummary(segment=&svar, _varsDs=&EM_USER_SELVARS, FormatFref=X);
30344     +    %end ;
30346     +    filename X;
30348     +    %doendpt:
30351     +    /* Set reports for the node */
30352     +    %let _keys= SIZE STATS CLASSDIST INTDIST;
30354     +    %if %sysfunc(exist( &EM_USER_CLASSDIST)) or  %sysfunc(exist(&EM_USER_INTDIST)) %then %do;
30355     +        %if %sysfunc(exist(&EM_USER_INTDIST)) %then %do;
30356     +            data &EM_USER_INTDIST;
30357     +               set &EM_USER_INTDIST;
30358     +               label SegmentVariable = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvariable_vlabel,  NOQUOTE))"
30359     +                     SegmentValue    = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvalue_vlabel,  NOQUOTE))"
30360     +                     Color           = "%sysfunc(sasmsg(sashelp.dmine, rpt_color_vlabel,  NOQUOTE))";
30361     +               if SegmentVariable = '_OVERALL_' then Color = 1;
30362     +               else Color = 0;
30363     +            run;
30364     +        %end;
30365     +        %if %sysfunc(exist(&EM_USER_CLASSDIST)) %then %do;
30366     +            data &EM_USER_CLASSDIST;
30367     +               set &EM_USER_CLASSDIST;
30368     +               label SegmentVariable = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvariable_vlabel,  NOQUOTE))"
30369     +                     SegmentValue    = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvalue_vlabel,  NOQUOTE))"
30370     +                     Groupindex      = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupIndex_vlabel,  NOQUOTE))";
30371     +               if SegmentVariable = '_OVERALL_' then GroupIndex = 0;
30372     +               else GroupIndex = 1;
30373     +            run;
30374     +        %end;
30376     +        %let svar = &_segmentvar;
30377     +        %let sndx = 0;
30378     +        %do %while(&svar ne );
30379     +            %let sndx= %eval(&sndx+1);
30380     +            %let svar = %scan(&_segmentvar, &sndx,' ');
30381     +            %if &svar ne %then %do;
30382     +                %let autodisplay = N;
30383     +                %if &sndx = 1 %then
30384     +                    %let autodisplay = Y;
30385     +                %EM_REPORT(KEY=&_keys, VIEWTYPE=PROFILEVIEW, DESCRIPTION=Profileview, SEGMENTVALUE=&svar,
30386     +                      STATS=STATS, SIZE=SIZE, CLASSDIST=CLASSDIST, INTDIST=INTDIST, AUTODISPLAY=&autodisplay, BLOCK=Plot,
30387     +                      LOCALIZE=Y, COLOR=COLOR);
30388     +            %end;
30389     +        %end ;
30390     +    %end;
30392     +    %if %sysfunc(exist( &EM_USER_STATS)) %then %do;
30393     +        %if &EM_PROPERTY_MAXDEPTH = 1 %then %do;
30394     +            data &EM_USER_WORTH;
30395     +               set &EM_USER_STATS;
30396     +               label SegmentVariable = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvariable_vlabel,  NOQUOTE))"
30397     +                     SegmentValue    = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvalue_vlabel,  NOQUOTE))"
30398     +                     Variable        = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,  NOQUOTE))"
30399     +                     Rank   = "%sysfunc(sasmsg(sashelp.dmine, rpt_rank_vlabel,  NOQUOTE))"
30400     +                     Worth  = "%sysfunc(sasmsg(sashelp.dmine, rpt_worth_vlabel,  NOQUOTE))";
30401     +               where WORTH ne .;
30402     +            run;
30403     +            %EM_REPORT(KEY=WORTH,     VIEWTYPE=BAR,  BY=SEGMENTVALUE, X=VARIABLE, FREQ=WORTH,
30404     +                  AUTODISPLAY=Y, REPORTID=SEGMENTVARIABLE, IDVALUE=WORTH, DESCRIPTION=profworth, BLOCK=Plot,
30405     +                  LOCALIZE=Y, NCOLS=1);
30406     +        %end;
30407     +        %else %do;
30408     +            data &EM_USER_IMPORTANCE;
30409     +               set &EM_USER_STATS;
30410     +               label SegmentVariable = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvariable_vlabel,  NOQUOTE))"
30411     +                  SegmentValue    = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentvalue_vlabel,  NOQUOTE))"
30412     +                  Variable        = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,  NOQUOTE))"
30413     +                  Importance      = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel,  NOQUOTE))"
30414     +                  Rank            = "%sysfunc(sasmsg(sashelp.dmine, rpt_rank_vlabel,  NOQUOTE))";
30415     +               where IMPORTANCE ne .;
30416     +            run;
30417     +            %EM_REPORT(KEY=IMPORTANCE, VIEWTYPE=BAR,  BY=SEGMENTVALUE, X=VARIABLE, FREQ=IMPORTANCE,
30418     +                  AUTODISPLAY=Y, REPORTID=SEGMENTVARIABLE, IDVALUE=IMPORTANCE, DESCRIPTION=profimportance, BLOCK=Plot,
30419     +                  LOCALIZE=Y, NCOLS=1);
30420     +       %end;
30421     +    %end;
30423     +    %if %sysfunc(exist( &EM_USER_SIZE)) %then %do;
30424     +        %if %sysfunc(exist( &EM_USER_FIT)) %then %do;
30425     +            data &EM_USER_SIZE;
30426     +               merge &EM_USER_SIZE &EM_USER_FIT;
30427     +               label percent  = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))"
30428     +                     count    = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,  NOQUOTE))";
30429     +               format PERCENT 5.2;
30430     +               format COUNT 12.;
30431     +            run;
30432     +        %end;
30433     +        %else %do;
30434     +            data &EM_USER_SIZE;
30435     +               set &EM_USER_SIZE;
30436     +               label percent  = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))"
30437     +                     count    = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,  NOQUOTE))";
30438     +               format PERCENT 5.2;
30439     +               format COUNT 12.;
30440     +            run;
30441     +        %end;
30443     +        %EM_REPORT(KEY=SIZE, VIEWTYPE=PIE, DESCRIPTION=segmentmanysize, X=SEGMENTVALUE, Y=COUNT, TIPTEXT=PERCENT,
30444     +                   REPORTID=SEGMENTVARIABLE, IDVALUE=SIZE, BLOCK=Plot, AUTODISPLAY=Y, LOCALIZE=Y);
30446     +    %end;
30448     +    %EM_REPORT(KEY=SIZE,      VIEWTYPE=DATA, DESCRIPTION=size,                BLOCK=Stats);
30449     +    %EM_REPORT(KEY=STATS,     VIEWTYPE=DATA, DESCRIPTION=profilevars,         BLOCK=Stats);
30450     +    %EM_REPORT(KEY=CLASSDIST, VIEWTYPE=DATA, DESCRIPTION=clusbarplot,         BLOCK=Stats);
30451     +    %EM_REPORT(KEY=INTDIST,   VIEWTYPE=DATA, DESCRIPTION=clushistplot,        BLOCK=Stats);
30453     +    proc datasets lib=&EM_LIB nolist;
30454     +       delete &EM_NODEID._SELVARS _SUMMARYVARS DATA_STAT &EM_NODEID._MACS(mt=catalog) &EM_NODEID._INTERVAL(mt=catalog);
30455     +    run;
30457     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS1 nolist;
MPRINT(TRAIN):   delete Prof2_SIZE Prof2_STATS Prof2_FIT Prof2_WORTH Prof2_IMPORTANCE Prof2_SELVARS Prof2_CLASSDIST Prof2_INTDIST Prof2_MACS(mt=catalog);
MPRINT(TRAIN):   run;
 
NOTE: The file EMWS1.PROF2_SIZE (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.PROF2_STATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.PROF2_FIT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.PROF2_WORTH (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.PROF2_IMPORTANCE (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.PROF2_SELVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.PROF2_CLASSDIST (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.PROF2_INTDIST (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.PROF2_MACS (memtype=CATALOG) was not found, but appears on a DELETE statement.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TRAIN):   proc sort data=EMWS1.Prof2_VariableSet;
MPRINT(TRAIN):   by Name;
MPRINT(TRAIN):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.PROF2_VARIABLESET.
NOTE: The data set EMWS1.PROF2_VARIABLESET has 20 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARMACROS):   filename X catalog "EMWS1.Prof2_MACS.INTERVAL_1.SOURCE";
MPRINT(MAKEVARMACROS):   data _null_;
MPRINT(MAKEVARMACROS):   length _STRING_ $80;
MPRINT(MAKEVARMACROS):   retain _STRING_ ;
MPRINT(MAKEVARMACROS):   file X;
MPRINT(MAKEVARMACROS):   set EMWS1.Prof2_VariableSet(firstobs=1 obs=10001) end=eof;
MPRINT(MAKEVARMACROS):   where (ROLE = 'REJECTED' and LEVEL="INTERVAL" and USE='Y') or (ROLE ='INPUT' and LEVEL="INTERVAL" and USE in('Y', 'D'));
MPRINT(MAKEVARMACROS):   if _N_=1 then put '%macro _PROFVAR;';
MPRINT(MAKEVARMACROS):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(MAKEVARMACROS):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(MAKEVARMACROS):   if eof then do;
MPRINT(MAKEVARMACROS):   put _STRING_;
MPRINT(MAKEVARMACROS):   put '%mend _PROFVAR;';
MPRINT(MAKEVARMACROS):   end;
MPRINT(MAKEVARMACROS):   end;
MPRINT(MAKEVARMACROS):   else do;
MPRINT(MAKEVARMACROS):   put _STRING_;
MPRINT(MAKEVARMACROS):   _string_ = TRIM(NAME);
MPRINT(MAKEVARMACROS):   if eof then do;
MPRINT(MAKEVARMACROS):   put _string_;
MPRINT(MAKEVARMACROS):   put '%mend _PROFVAR;';
MPRINT(MAKEVARMACROS):   end;
MPRINT(MAKEVARMACROS):   end;
MPRINT(MAKEVARMACROS):   run;
 
NOTE: The file X is:
      Catalog Name=EMWS1.PROF2_MACS.INTERVAL_1.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Thursday, December 31, 2015 01:05:45 PM,
      Last Modified=Thursday, December 31, 2015 01:05:45 PM,
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\prof2_macs.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 6 records were written to the file X.
      The minimum record length was 13.
      The maximum record length was 76.
NOTE: There were 11 observations read from the data set EMWS1.PROF2_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (LEVEL='INTERVAL') and (USE='Y')) or ((ROLE='INPUT') and (LEVEL='INTERVAL') and USE in ('D', 'Y'));
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARMACROS):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_PROFILE):  ;
MPRINT(MAKEVARMACROS):   filename X catalog "EMWS1.Prof2_MACS.NOMINAL_1.SOURCE";
MPRINT(MAKEVARMACROS):   data _null_;
MPRINT(MAKEVARMACROS):   length _STRING_ $80;
MPRINT(MAKEVARMACROS):   retain _STRING_ ;
MPRINT(MAKEVARMACROS):   file X;
MPRINT(MAKEVARMACROS):   set EMWS1.Prof2_VariableSet(firstobs=1 obs=10001) end=eof;
MPRINT(MAKEVARMACROS):   where (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE ='INPUT' and LEVEL in("NOMINAL", "BINARY") and USE in('Y', 'D'));
MPRINT(MAKEVARMACROS):   if _N_=1 then put '%macro _PROFVAR;';
MPRINT(MAKEVARMACROS):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(MAKEVARMACROS):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(MAKEVARMACROS):   if eof then do;
MPRINT(MAKEVARMACROS):   put _STRING_;
MPRINT(MAKEVARMACROS):   put '%mend _PROFVAR;';
MPRINT(MAKEVARMACROS):   end;
MPRINT(MAKEVARMACROS):   end;
MPRINT(MAKEVARMACROS):   else do;
MPRINT(MAKEVARMACROS):   put _STRING_;
MPRINT(MAKEVARMACROS):   _string_ = TRIM(NAME);
MPRINT(MAKEVARMACROS):   if eof then do;
MPRINT(MAKEVARMACROS):   put _string_;
MPRINT(MAKEVARMACROS):   put '%mend _PROFVAR;';
MPRINT(MAKEVARMACROS):   end;
MPRINT(MAKEVARMACROS):   end;
MPRINT(MAKEVARMACROS):   run;
 
NOTE: The file X is:
      Catalog Name=EMWS1.PROF2_MACS.NOMINAL_1.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thursday, December 31, 2015 01:05:45 PM,
      Last Modified=Thursday, December 31, 2015 01:05:45 PM,
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\prof2_macs.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 3 records were written to the file X.
      The minimum record length was 15.
      The maximum record length was 36.
NOTE: There were 2 observations read from the data set EMWS1.PROF2_VARIABLESET.
      WHERE ((ROLE='REJECTED') and LEVEL in ('BINARY', 'NOMINAL') and (USE='Y')) or ((ROLE='INPUT') and LEVEL in ('BINARY', 'NOMINAL') and USE in ('D', 'Y'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARMACROS):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_PROFILE):  ;
MPRINT(MAKEVARMACROS):   filename X catalog "EMWS1.Prof2_MACS.ORDINAL_1.SOURCE";
MPRINT(MAKEVARMACROS):   data _null_;
MPRINT(MAKEVARMACROS):   length _STRING_ $80;
MPRINT(MAKEVARMACROS):   retain _STRING_ ;
MPRINT(MAKEVARMACROS):   file X;
MPRINT(MAKEVARMACROS):   set EMWS1.Prof2_VariableSet(firstobs=1 obs=10001) end=eof;
MPRINT(MAKEVARMACROS):   where (ROLE = 'REJECTED' and LEVEL="ORDINAL" and USE='Y') or (ROLE ='INPUT' and LEVEL="ORDINAL" and USE in('Y', 'D'));
MPRINT(MAKEVARMACROS):   if _N_=1 then put '%macro _PROFVAR;';
MPRINT(MAKEVARMACROS):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(MAKEVARMACROS):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(MAKEVARMACROS):   if eof then do;
MPRINT(MAKEVARMACROS):   put _STRING_;
MPRINT(MAKEVARMACROS):   put '%mend _PROFVAR;';
MPRINT(MAKEVARMACROS):   end;
MPRINT(MAKEVARMACROS):   end;
MPRINT(MAKEVARMACROS):   else do;
MPRINT(MAKEVARMACROS):   put _STRING_;
MPRINT(MAKEVARMACROS):   _string_ = TRIM(NAME);
MPRINT(MAKEVARMACROS):   if eof then do;
MPRINT(MAKEVARMACROS):   put _string_;
MPRINT(MAKEVARMACROS):   put '%mend _PROFVAR;';
MPRINT(MAKEVARMACROS):   end;
MPRINT(MAKEVARMACROS):   end;
MPRINT(MAKEVARMACROS):   run;
 
NOTE: The file X is:
      Catalog Name=EMWS1.PROF2_MACS.ORDINAL_1.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=6,
      Created=Thursday, December 31, 2015 01:05:45 PM,
      Last Modified=Thursday, December 31, 2015 01:05:45 PM,
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\prof2_macs.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 3 records were written to the file X.
      The minimum record length was 15.
      The maximum record length was 21.
NOTE: There were 1 observations read from the data set EMWS1.PROF2_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (LEVEL='ORDINAL') and (USE='Y')) or ((ROLE='INPUT') and (LEVEL='ORDINAL') and USE in ('D', 'Y'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARMACROS):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_PROFILE):  ;
*------------------------------------------------------------*
* Filtering input variables
* SEGMENT= _SEGMENT_
*------------------------------------------------------------*
MPRINT(TREE_PROFILE):   proc freq data=EMWS1.Clus2_TRAIN noprint ;
MPRINT(TREE_PROFILE):   table _SEGMENT_ / missing out=_SEGMENT_(keep=_SEGMENT_ count percent) ;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.17 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.CLUS2_TRAIN.
NOTE: The data set WORK._SEGMENT_ has 5 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.20 seconds
      cpu time            0.18 seconds
 
 
MPRINT(TREE_PROFILE):   proc sort data=_SEGMENT_;
MPRINT(TREE_PROFILE):   by descending count ;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: There were 5 observations read from the data set WORK._SEGMENT_.
NOTE: The data set WORK._SEGMENT_ has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   data _segs;
MPRINT(TREE_PROFILE):   length SegmentVariable $32 SegmentValue $200;
MPRINT(TREE_PROFILE):   retain SegmentVariable "_SEGMENT_";
MPRINT(TREE_PROFILE):   label SegmentVariable = "Segment Variable" SegmentValue = "Segment Value";
MPRINT(TREE_PROFILE):   drop _SEGMENT_ cum othercount otherpct numLevels;
MPRINT(TREE_PROFILE):   retain cum othercount otherpct numLevels 0;
MPRINT(TREE_PROFILE):   format Count 8.;
MPRINT(TREE_PROFILE):   set _SEGMENT_ end=eof;
MPRINT(TREE_PROFILE):   SegmentValue= left(put(_SEGMENT_, best12.));
MPRINT(TREE_PROFILE):   if (cum < 95) or (trim(symget('OTHERWHERE')) eq ' ' and eof) then do;
MPRINT(TREE_PROFILE):   call symput('SEGMENTS'!!strip(put(_N_,BEST.)), strip(tranwrd(SegmentValue, '"','""'))) ;
MPRINT(TREE_PROFILE):   call symput('COUNTS' !!strip(put(_N_,BEST.)), strip(put(count, best.))) ;
MPRINT(TREE_PROFILE):   numLevels + 1;
MPRINT(TREE_PROFILE):   output;
MPRINT(TREE_PROFILE):   end;
MPRINT(TREE_PROFILE):   else do;
MPRINT(TREE_PROFILE):   call symput('OTHERWHERE' ,symget('OTHERWHERE' ) !! ' ' !! strip(SegmentValue));
MPRINT(TREE_PROFILE):   othercount = othercount + count;
MPRINT(TREE_PROFILE):   otherpct = otherpct + percent;
MPRINT(TREE_PROFILE):   if eof then do;
MPRINT(TREE_PROFILE):   SegmentValue = '_OTHER_';
MPRINT(TREE_PROFILE):   count = othercount;
MPRINT(TREE_PROFILE):   percent = otherpct;
MPRINT(TREE_PROFILE):   numLevels + 1;
MPRINT(TREE_PROFILE):   call symput('SEGMENTS'!! strip(put(numLevels,BEST.)), '_OTHER_') ;
MPRINT(TREE_PROFILE):   call symput('COUNTS' !! strip(put(numLevels,BEST.)), strip(put(count, best.))) ;
MPRINT(TREE_PROFILE):   output;
MPRINT(TREE_PROFILE):   end;
MPRINT(TREE_PROFILE):   end;
MPRINT(TREE_PROFILE):   cum = cum + percent;
MPRINT(TREE_PROFILE):   if eof then call symput('numLevels', strip(put(numLevels,BEST.))) ;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: There were 5 observations read from the data set WORK._SEGMENT_.
NOTE: The data set WORK._SEGS has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   title9 " " ;
MPRINT(TREE_PROFILE):   title10 "Frequencies: _SEGMENT_";
MPRINT(TREE_PROFILE):   proc print data=_segs noobs label ;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: There were 5 observations read from the data set WORK._SEGS.
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   title9;
MPRINT(TREE_PROFILE):   title10;
MPRINT(TREE_PROFILE):   proc append base=EMWS1.Prof2_SIZE data=_segs force;
MPRINT(TREE_PROFILE):   run;
 
NOTE: Appending WORK._SEGS to EMWS1.PROF2_SIZE.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 5 observations read from the data set WORK._SEGS.
NOTE: The data set EMWS1.PROF2_SIZE has 5 observations and 4 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   data Prof2_TMP / view=Prof2_TMP ;
MPRINT(TREE_PROFILE):   set EMWS1.Clus2_TRAIN(keep
MPRINT(TREE_PROFILE):  =ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM IMP_HasChildren
IMP_EducationalDegree IMP_GeographicLiving _SEGMENT_);
MPRINT(TREE_PROFILE):   if _SEGMENT_ = 4 then _seg= 1 ;
MPRINT(TREE_PROFILE):   else _seg= 0 ;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: DATA STEP view saved on file WORK.PROF2_TMP.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
 
MPRINT(_ARBOR):   proc arbor data=Prof2_TMP Criterion=GINI Leafsize=5 Mincatsize = 5 Maxbranch=5 Maxdepth=1 NORULELIMIT MAXRULES=10 MAXSURRS=0 Missing=USEINSEARCH Exhaustive=5000;
MPRINT(_ARBOR):   input
MPRINT(EM_INTERVAL_INPUT):   ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM
MPRINT(_ARBOR):   / level = interval;
MPRINT(_ARBOR):   input
MPRINT(EM_BINARY_INPUT):   IMP_HasChildren
MPRINT(EM_NOMINAL_INPUT):   IMP_GeographicLiving
MPRINT(_ARBOR):   / level = nominal;
MPRINT(_ARBOR):   input
MPRINT(EM_ORDINAL_INPUT):   IMP_EducationalDegree
MPRINT(_ARBOR):   / level = ordinal;
MPRINT(_ARBOR):   target _SEG / level=binary;
MPRINT(_ARBOR):   Performance Disk NodeSize=10000;
MPRINT(_ARBOR):   Assess NoValidata measure=MISC;
NOTE: 1324850 kilobytes of physical memory.
NOTE: Will use 10296 out of 10296 training cases.
NOTE: Using memory pool with 211772416 bytes.
NOTE: Passed training data 2 times.
NOTE: Training used 3775064 bytes of work memory.
NOTE: The subtree sequence contains 2 subtrees. The largest has 4 nodes and 3 leaves.
NOTE: Using subtree with 4 nodes and 3 leaves.
MPRINT(_ARBOR):   SUBTREE BEST;
NOTE: Using subtree with 4 nodes and 3 leaves.
MPRINT(_ARBOR):   save RULES=_RULE;
NOTE: The data set WORK._RULE has 83 observations and 6 variables.
MPRINT(_ARBOR):   ;
MPRINT(_ARBOR):   run;
 
MPRINT(_ARBOR):   quit;
 
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.48 seconds
      cpu time            0.46 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.CLUS2_TRAIN.
NOTE: There were 10296 observations read from the data set WORK.PROF2_TMP.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.50 seconds
      cpu time            0.48 seconds
 
 
MPRINT(_ARBOR):   proc append base=_TEMPRULE data=_RULE force;
MPRINT(_ARBOR):   run;
 
NOTE: Appending WORK._RULE to WORK._TEMPRULE.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 83 observations read from the data set WORK._RULE.
NOTE: The data set WORK._TEMPRULE has 83 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(_ARBOR):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(_ARBOR):   delete _RULE;
MPRINT(_ARBOR):   run;
 
NOTE: Deleting WORK._RULE (memtype=DATA).
MPRINT(_ARBOR):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):  ;
MPRINT(TREE_PROFILE):   data _TEMPRULE(rename=(Name=Variable numeric_value=Worth));
MPRINT(TREE_PROFILE):   length Name $32;
MPRINT(TREE_PROFILE):   label Name = "Variable";
MPRINT(TREE_PROFILE):   retain Name;
MPRINT(TREE_PROFILE):   set _temprule;
MPRINT(TREE_PROFILE):   where stat in('VARIABLE','WORTH');
MPRINT(TREE_PROFILE):   if stat = 'VARIABLE' then Name = character_value;
MPRINT(TREE_PROFILE):   else output;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 20 observations read from the data set WORK._TEMPRULE.
      WHERE stat in ('VARIABLE', 'WORTH');
NOTE: The data set WORK._TEMPRULE has 10 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   proc sort data=_TEMPRULE;
MPRINT(TREE_PROFILE):   by descending Worth;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
NOTE: The data set WORK._TEMPRULE has 10 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   data _TEMPRULE(keep=SegmentVariable SegmentValue Variable Rank Worth);
MPRINT(TREE_PROFILE):   label SegmentVariable = "Segment Variable" SegmentValue = "Segment Value" Variable = "Variable" Rank = "Rank" Worth = "Worth";
MPRINT(TREE_PROFILE):   length SegmentVariable $32 SegmentValue $200;
MPRINT(TREE_PROFILE):   retain SegmentVariable "_SEGMENT_" SegmentValue "4";
MPRINT(TREE_PROFILE):   set _TEMPRULE(obs=10);
MPRINT(TREE_PROFILE):   Rank = _N_;
MPRINT(TREE_PROFILE):   if _N_=1 and worth ne . and (worth < 0.01) then do;
MPRINT(TREE_PROFILE):   put "*------------------------------------------------------------*";
MPRINT(TREE_PROFILE):   put "* No input variable meet the minimum worth criterion of 0.01";
MPRINT(TREE_PROFILE):   put "* You may identify profile variables by lowering this threshold, ";
MPRINT(TREE_PROFILE):   put "* or by increasing the maximum depth of the decision tree used.";
MPRINT(TREE_PROFILE):   put "*------------------------------------------------------------*";
MPRINT(TREE_PROFILE):   end;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
NOTE: The data set WORK._TEMPRULE has 10 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   title9 "Variable: _SEGMENT_ Segment: 4 Count: 2905";
MPRINT(TREE_PROFILE):   title10 "Decision Tree Importance Profiles";
MPRINT(TREE_PROFILE):   proc print data=_TEMPRULE noobs label ;
MPRINT(TREE_PROFILE):   var Variable Worth Rank;
MPRINT(TREE_PROFILE):   where worth ne .;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
      WHERE worth not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   data _TEMPRULE;
MPRINT(TREE_PROFILE):   set _TEMPRULE;
MPRINT(TREE_PROFILE):   where worth eq . or (worth >= 0.01);
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
      WHERE (worth=.) or (worth>=0.01);
NOTE: The data set WORK._TEMPRULE has 10 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   title9;
MPRINT(TREE_PROFILE):   title10;
MPRINT(TREE_PROFILE):   proc append base=EMWS1.Prof2_SELVARS data=_TEMPRULE force;
MPRINT(TREE_PROFILE):   run;
 
NOTE: Appending WORK._TEMPRULE to EMWS1.PROF2_SELVARS.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
NOTE: The data set EMWS1.PROF2_SELVARS has 10 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(TREE_PROFILE):   delete _SEGS Prof2_TMP Prof2_VALIDTMP _STAT _TEMPRULE ;
MPRINT(TREE_PROFILE):   run;
 
NOTE: The file WORK.PROF2_VALIDTMP (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK._STAT (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._SEGS (memtype=DATA).
NOTE: Deleting WORK.PROF2_TMP (memtype=VIEW).
NOTE: Deleting WORK._TEMPRULE (memtype=DATA).
MPRINT(TREE_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   data Prof2_TMP / view=Prof2_TMP ;
MPRINT(TREE_PROFILE):   set EMWS1.Clus2_TRAIN(keep
MPRINT(TREE_PROFILE):  =ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM IMP_HasChildren
IMP_EducationalDegree IMP_GeographicLiving _SEGMENT_);
MPRINT(TREE_PROFILE):   if _SEGMENT_ = 5 then _seg= 1 ;
MPRINT(TREE_PROFILE):   else _seg= 0 ;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: DATA STEP view saved on file WORK.PROF2_TMP.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.14 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.22 seconds
      cpu time            0.15 seconds
 
 
MPRINT(_ARBOR):   proc arbor data=Prof2_TMP Criterion=GINI Leafsize=5 Mincatsize = 5 Maxbranch=5 Maxdepth=1 NORULELIMIT MAXRULES=10 MAXSURRS=0 Missing=USEINSEARCH Exhaustive=5000;
MPRINT(_ARBOR):   input
MPRINT(EM_INTERVAL_INPUT):   ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM
MPRINT(_ARBOR):   / level = interval;
MPRINT(_ARBOR):   input
MPRINT(EM_BINARY_INPUT):   IMP_HasChildren
MPRINT(EM_NOMINAL_INPUT):   IMP_GeographicLiving
MPRINT(_ARBOR):   / level = nominal;
MPRINT(_ARBOR):   input
MPRINT(EM_ORDINAL_INPUT):   IMP_EducationalDegree
MPRINT(_ARBOR):   / level = ordinal;
MPRINT(_ARBOR):   target _SEG / level=binary;
MPRINT(_ARBOR):   Performance Disk NodeSize=10000;
MPRINT(_ARBOR):   Assess NoValidata measure=MISC;
NOTE: 1324850 kilobytes of physical memory.
NOTE: Will use 10296 out of 10296 training cases.
NOTE: Using memory pool with 211772416 bytes.
NOTE: Passed training data 2 times.
NOTE: Training used 3775064 bytes of work memory.
NOTE: The subtree sequence contains 2 subtrees. The largest has 3 nodes and 2 leaves.
NOTE: Using subtree with 3 nodes and 2 leaves.
MPRINT(_ARBOR):   SUBTREE BEST;
NOTE: Using subtree with 3 nodes and 2 leaves.
MPRINT(_ARBOR):   save RULES=_RULE;
NOTE: The data set WORK._RULE has 81 observations and 6 variables.
MPRINT(_ARBOR):   ;
MPRINT(_ARBOR):   run;
 
MPRINT(_ARBOR):   quit;
 
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.52 seconds
      cpu time            0.48 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.CLUS2_TRAIN.
NOTE: There were 10296 observations read from the data set WORK.PROF2_TMP.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.53 seconds
      cpu time            0.51 seconds
 
 
MPRINT(_ARBOR):   proc append base=_TEMPRULE data=_RULE force;
MPRINT(_ARBOR):   run;
 
NOTE: Appending WORK._RULE to WORK._TEMPRULE.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 81 observations read from the data set WORK._RULE.
NOTE: The data set WORK._TEMPRULE has 81 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(_ARBOR):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(_ARBOR):   delete _RULE;
MPRINT(_ARBOR):   run;
 
NOTE: Deleting WORK._RULE (memtype=DATA).
MPRINT(_ARBOR):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):  ;
MPRINT(TREE_PROFILE):   data _TEMPRULE(rename=(Name=Variable numeric_value=Worth));
MPRINT(TREE_PROFILE):   length Name $32;
MPRINT(TREE_PROFILE):   label Name = "Variable";
MPRINT(TREE_PROFILE):   retain Name;
MPRINT(TREE_PROFILE):   set _temprule;
MPRINT(TREE_PROFILE):   where stat in('VARIABLE','WORTH');
MPRINT(TREE_PROFILE):   if stat = 'VARIABLE' then Name = character_value;
MPRINT(TREE_PROFILE):   else output;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 20 observations read from the data set WORK._TEMPRULE.
      WHERE stat in ('VARIABLE', 'WORTH');
NOTE: The data set WORK._TEMPRULE has 10 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   proc sort data=_TEMPRULE;
MPRINT(TREE_PROFILE):   by descending Worth;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
NOTE: The data set WORK._TEMPRULE has 10 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   data _TEMPRULE(keep=SegmentVariable SegmentValue Variable Rank Worth);
MPRINT(TREE_PROFILE):   label SegmentVariable = "Segment Variable" SegmentValue = "Segment Value" Variable = "Variable" Rank = "Rank" Worth = "Worth";
MPRINT(TREE_PROFILE):   length SegmentVariable $32 SegmentValue $200;
MPRINT(TREE_PROFILE):   retain SegmentVariable "_SEGMENT_" SegmentValue "5";
MPRINT(TREE_PROFILE):   set _TEMPRULE(obs=10);
MPRINT(TREE_PROFILE):   Rank = _N_;
MPRINT(TREE_PROFILE):   if _N_=1 and worth ne . and (worth < 0.01) then do;
MPRINT(TREE_PROFILE):   put "*------------------------------------------------------------*";
MPRINT(TREE_PROFILE):   put "* No input variable meet the minimum worth criterion of 0.01";
MPRINT(TREE_PROFILE):   put "* You may identify profile variables by lowering this threshold, ";
MPRINT(TREE_PROFILE):   put "* or by increasing the maximum depth of the decision tree used.";
MPRINT(TREE_PROFILE):   put "*------------------------------------------------------------*";
MPRINT(TREE_PROFILE):   end;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
NOTE: The data set WORK._TEMPRULE has 10 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   title9 "Variable: _SEGMENT_ Segment: 5 Count: 2480";
MPRINT(TREE_PROFILE):   title10 "Decision Tree Importance Profiles";
MPRINT(TREE_PROFILE):   proc print data=_TEMPRULE noobs label ;
MPRINT(TREE_PROFILE):   var Variable Worth Rank;
MPRINT(TREE_PROFILE):   where worth ne .;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
      WHERE worth not = .;
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   data _TEMPRULE;
MPRINT(TREE_PROFILE):   set _TEMPRULE;
MPRINT(TREE_PROFILE):   where worth eq . or (worth >= 0.01);
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMPRULE.
      WHERE (worth=.) or (worth>=0.01);
NOTE: The data set WORK._TEMPRULE has 5 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   title9;
MPRINT(TREE_PROFILE):   title10;
MPRINT(TREE_PROFILE):   proc append base=EMWS1.Prof2_SELVARS data=_TEMPRULE force;
MPRINT(TREE_PROFILE):   run;
 
NOTE: Appending WORK._TEMPRULE to EMWS1.PROF2_SELVARS.
NOTE: There were 5 observations read from the data set WORK._TEMPRULE.
NOTE: 5 observations added.
NOTE: The data set EMWS1.PROF2_SELVARS has 15 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(TREE_PROFILE):   delete _SEGS Prof2_TMP Prof2_VALIDTMP _STAT _TEMPRULE ;
MPRINT(TREE_PROFILE):   run;
 
NOTE: The file WORK._SEGS (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK.PROF2_VALIDTMP (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK._STAT (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PROF2_TMP (memtype=VIEW).
NOTE: Deleting WORK._TEMPRULE (memtype=DATA).
MPRINT(TREE_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   data Prof2_TMP / view=Prof2_TMP ;
MPRINT(TREE_PROFILE):   set EMWS1.Clus2_TRAIN(keep
MPRINT(TREE_PROFILE):  =ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM IMP_HasChildren
IMP_EducationalDegree IMP_GeographicLiving _SEGMENT_);
MPRINT(TREE_PROFILE):   if _SEGMENT_ = 3 then _seg= 1 ;
MPRINT(TREE_PROFILE):   else _seg= 0 ;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: DATA STEP view saved on file WORK.PROF2_TMP.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
 
MPRINT(_ARBOR):   proc arbor data=Prof2_TMP Criterion=GINI Leafsize=5 Mincatsize = 5 Maxbranch=5 Maxdepth=1 NORULELIMIT MAXRULES=10 MAXSURRS=0 Missing=USEINSEARCH Exhaustive=5000;
MPRINT(_ARBOR):   input
MPRINT(EM_INTERVAL_INPUT):   ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM
MPRINT(_ARBOR):   / level = interval;
MPRINT(_ARBOR):   input
MPRINT(EM_BINARY_INPUT):   IMP_HasChildren
MPRINT(EM_NOMINAL_INPUT):   IMP_GeographicLiving
MPRINT(_ARBOR):   / level = nominal;
MPRINT(_ARBOR):   input
MPRINT(EM_ORDINAL_INPUT):   IMP_EducationalDegree
MPRINT(_ARBOR):   / level = ordinal;
MPRINT(_ARBOR):   target _SEG / level=binary;
MPRINT(_ARBOR):   Performance Disk NodeSize=10000;
MPRINT(_ARBOR):   Assess NoValidata measure=MISC;
NOTE: 1324850 kilobytes of physical memory.
NOTE: Will use 10296 out of 10296 training cases.
NOTE: Using memory pool with 211772416 bytes.
NOTE: Passed training data 2 times.
NOTE: Training used 3775064 bytes of work memory.
NOTE: The subtree sequence contains 2 subtrees. The largest has 5 nodes and 4 leaves.
NOTE: Using subtree with 1 nodes and 1 leaves.
MPRINT(_ARBOR):   SUBTREE BEST;
NOTE: Using subtree with 1 nodes and 1 leaves.
MPRINT(_ARBOR):   save RULES=_RULE;
NOTE: The data set WORK._RULE has 82 observations and 6 variables.
MPRINT(_ARBOR):   ;
MPRINT(_ARBOR):   run;
 
MPRINT(_ARBOR):   quit;
 
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.46 seconds
      cpu time            0.45 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.CLUS2_TRAIN.
NOTE: There were 10296 observations read from the data set WORK.PROF2_TMP.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.48 seconds
      cpu time            0.46 seconds
 
 
MPRINT(_ARBOR):   proc append base=_TEMPRULE data=_RULE force;
MPRINT(_ARBOR):   run;
 
NOTE: Appending WORK._RULE to WORK._TEMPRULE.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 82 observations read from the data set WORK._RULE.
NOTE: The data set WORK._TEMPRULE has 82 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(_ARBOR):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(_ARBOR):   delete _RULE;
MPRINT(_ARBOR):   run;
 
NOTE: Deleting WORK._RULE (memtype=DATA).
MPRINT(_ARBOR):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):  ;
MPRINT(TREE_PROFILE):   data _TEMPRULE(rename=(Name=Variable numeric_value=Worth));
MPRINT(TREE_PROFILE):   length Name $32;
MPRINT(TREE_PROFILE):   label Name = "Variable";
MPRINT(TREE_PROFILE):   retain Name;
MPRINT(TREE_PROFILE):   set _temprule;
MPRINT(TREE_PROFILE):   where stat in('VARIABLE','WORTH');
MPRINT(TREE_PROFILE):   if stat = 'VARIABLE' then Name = character_value;
MPRINT(TREE_PROFILE):   else output;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 20 observations read from the data set WORK._TEMPRULE.
      WHERE stat in ('VARIABLE', 'WORTH');
NOTE: The data set WORK._TEMPRULE has 10 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   proc sort data=_TEMPRULE;
MPRINT(TREE_PROFILE):   by descending Worth;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
NOTE: The data set WORK._TEMPRULE has 10 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   data _TEMPRULE(keep=SegmentVariable SegmentValue Variable Rank Worth);
MPRINT(TREE_PROFILE):   label SegmentVariable = "Segment Variable" SegmentValue = "Segment Value" Variable = "Variable" Rank = "Rank" Worth = "Worth";
MPRINT(TREE_PROFILE):   length SegmentVariable $32 SegmentValue $200;
MPRINT(TREE_PROFILE):   retain SegmentVariable "_SEGMENT_" SegmentValue "3";
MPRINT(TREE_PROFILE):   set _TEMPRULE(obs=10);
MPRINT(TREE_PROFILE):   Rank = _N_;
MPRINT(TREE_PROFILE):   if _N_=1 and worth ne . and (worth < 0.01) then do;
MPRINT(TREE_PROFILE):   put "*------------------------------------------------------------*";
MPRINT(TREE_PROFILE):   put "* No input variable meet the minimum worth criterion of 0.01";
MPRINT(TREE_PROFILE):   put "* You may identify profile variables by lowering this threshold, ";
MPRINT(TREE_PROFILE):   put "* or by increasing the maximum depth of the decision tree used.";
MPRINT(TREE_PROFILE):   put "*------------------------------------------------------------*";
MPRINT(TREE_PROFILE):   end;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
NOTE: The data set WORK._TEMPRULE has 10 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   title9 "Variable: _SEGMENT_ Segment: 3 Count: 1878";
MPRINT(TREE_PROFILE):   title10 "Decision Tree Importance Profiles";
MPRINT(TREE_PROFILE):   proc print data=_TEMPRULE noobs label ;
MPRINT(TREE_PROFILE):   var Variable Worth Rank;
MPRINT(TREE_PROFILE):   where worth ne .;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
      WHERE worth not = .;
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   data _TEMPRULE;
MPRINT(TREE_PROFILE):   set _TEMPRULE;
MPRINT(TREE_PROFILE):   where worth eq . or (worth >= 0.01);
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMPRULE.
      WHERE (worth=.) or (worth>=0.01);
NOTE: The data set WORK._TEMPRULE has 5 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   title9;
MPRINT(TREE_PROFILE):   title10;
MPRINT(TREE_PROFILE):   proc append base=EMWS1.Prof2_SELVARS data=_TEMPRULE force;
MPRINT(TREE_PROFILE):   run;
 
NOTE: Appending WORK._TEMPRULE to EMWS1.PROF2_SELVARS.
NOTE: There were 5 observations read from the data set WORK._TEMPRULE.
NOTE: 5 observations added.
NOTE: The data set EMWS1.PROF2_SELVARS has 20 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(TREE_PROFILE):   delete _SEGS Prof2_TMP Prof2_VALIDTMP _STAT _TEMPRULE ;
MPRINT(TREE_PROFILE):   run;
 
NOTE: The file WORK._SEGS (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK.PROF2_VALIDTMP (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK._STAT (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PROF2_TMP (memtype=VIEW).
NOTE: Deleting WORK._TEMPRULE (memtype=DATA).
MPRINT(TREE_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   data Prof2_TMP / view=Prof2_TMP ;
MPRINT(TREE_PROFILE):   set EMWS1.Clus2_TRAIN(keep
MPRINT(TREE_PROFILE):  =ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM IMP_HasChildren
IMP_EducationalDegree IMP_GeographicLiving _SEGMENT_);
MPRINT(TREE_PROFILE):   if _SEGMENT_ = 2 then _seg= 1 ;
MPRINT(TREE_PROFILE):   else _seg= 0 ;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: DATA STEP view saved on file WORK.PROF2_TMP.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
 
 
MPRINT(_ARBOR):   proc arbor data=Prof2_TMP Criterion=GINI Leafsize=5 Mincatsize = 5 Maxbranch=5 Maxdepth=1 NORULELIMIT MAXRULES=10 MAXSURRS=0 Missing=USEINSEARCH Exhaustive=5000;
MPRINT(_ARBOR):   input
MPRINT(EM_INTERVAL_INPUT):   ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM
MPRINT(_ARBOR):   / level = interval;
MPRINT(_ARBOR):   input
MPRINT(EM_BINARY_INPUT):   IMP_HasChildren
MPRINT(EM_NOMINAL_INPUT):   IMP_GeographicLiving
MPRINT(_ARBOR):   / level = nominal;
MPRINT(_ARBOR):   input
MPRINT(EM_ORDINAL_INPUT):   IMP_EducationalDegree
MPRINT(_ARBOR):   / level = ordinal;
MPRINT(_ARBOR):   target _SEG / level=binary;
MPRINT(_ARBOR):   Performance Disk NodeSize=10000;
MPRINT(_ARBOR):   Assess NoValidata measure=MISC;
NOTE: 1324850 kilobytes of physical memory.
NOTE: Will use 10296 out of 10296 training cases.
NOTE: Using memory pool with 211772416 bytes.
NOTE: Passed training data 2 times.
NOTE: Training used 3775064 bytes of work memory.
NOTE: The subtree sequence contains 2 subtrees. The largest has 6 nodes and 5 leaves.
NOTE: Using subtree with 6 nodes and 5 leaves.
MPRINT(_ARBOR):   SUBTREE BEST;
NOTE: Using subtree with 6 nodes and 5 leaves.
MPRINT(_ARBOR):   save RULES=_RULE;
NOTE: The data set WORK._RULE has 83 observations and 6 variables.
MPRINT(_ARBOR):   ;
MPRINT(_ARBOR):   run;
 
MPRINT(_ARBOR):   quit;
 
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.64 seconds
      cpu time            0.46 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.CLUS2_TRAIN.
NOTE: There were 10296 observations read from the data set WORK.PROF2_TMP.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.66 seconds
      cpu time            0.46 seconds
 
 
MPRINT(_ARBOR):   proc append base=_TEMPRULE data=_RULE force;
MPRINT(_ARBOR):   run;
 
NOTE: Appending WORK._RULE to WORK._TEMPRULE.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 83 observations read from the data set WORK._RULE.
NOTE: The data set WORK._TEMPRULE has 83 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(_ARBOR):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(_ARBOR):   delete _RULE;
MPRINT(_ARBOR):   run;
 
NOTE: Deleting WORK._RULE (memtype=DATA).
MPRINT(_ARBOR):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):  ;
MPRINT(TREE_PROFILE):   data _TEMPRULE(rename=(Name=Variable numeric_value=Worth));
MPRINT(TREE_PROFILE):   length Name $32;
MPRINT(TREE_PROFILE):   label Name = "Variable";
MPRINT(TREE_PROFILE):   retain Name;
MPRINT(TREE_PROFILE):   set _temprule;
MPRINT(TREE_PROFILE):   where stat in('VARIABLE','WORTH');
MPRINT(TREE_PROFILE):   if stat = 'VARIABLE' then Name = character_value;
MPRINT(TREE_PROFILE):   else output;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 20 observations read from the data set WORK._TEMPRULE.
      WHERE stat in ('VARIABLE', 'WORTH');
NOTE: The data set WORK._TEMPRULE has 10 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   proc sort data=_TEMPRULE;
MPRINT(TREE_PROFILE):   by descending Worth;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
NOTE: The data set WORK._TEMPRULE has 10 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   data _TEMPRULE(keep=SegmentVariable SegmentValue Variable Rank Worth);
MPRINT(TREE_PROFILE):   label SegmentVariable = "Segment Variable" SegmentValue = "Segment Value" Variable = "Variable" Rank = "Rank" Worth = "Worth";
MPRINT(TREE_PROFILE):   length SegmentVariable $32 SegmentValue $200;
MPRINT(TREE_PROFILE):   retain SegmentVariable "_SEGMENT_" SegmentValue "2";
MPRINT(TREE_PROFILE):   set _TEMPRULE(obs=10);
MPRINT(TREE_PROFILE):   Rank = _N_;
MPRINT(TREE_PROFILE):   if _N_=1 and worth ne . and (worth < 0.01) then do;
MPRINT(TREE_PROFILE):   put "*------------------------------------------------------------*";
MPRINT(TREE_PROFILE):   put "* No input variable meet the minimum worth criterion of 0.01";
MPRINT(TREE_PROFILE):   put "* You may identify profile variables by lowering this threshold, ";
MPRINT(TREE_PROFILE):   put "* or by increasing the maximum depth of the decision tree used.";
MPRINT(TREE_PROFILE):   put "*------------------------------------------------------------*";
MPRINT(TREE_PROFILE):   end;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
NOTE: The data set WORK._TEMPRULE has 10 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   title9 "Variable: _SEGMENT_ Segment: 2 Count: 1849";
MPRINT(TREE_PROFILE):   title10 "Decision Tree Importance Profiles";
MPRINT(TREE_PROFILE):   proc print data=_TEMPRULE noobs label ;
MPRINT(TREE_PROFILE):   var Variable Worth Rank;
MPRINT(TREE_PROFILE):   where worth ne .;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
      WHERE worth not = .;
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   data _TEMPRULE;
MPRINT(TREE_PROFILE):   set _TEMPRULE;
MPRINT(TREE_PROFILE):   where worth eq . or (worth >= 0.01);
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 7 observations read from the data set WORK._TEMPRULE.
      WHERE (worth=.) or (worth>=0.01);
NOTE: The data set WORK._TEMPRULE has 7 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   title9;
MPRINT(TREE_PROFILE):   title10;
MPRINT(TREE_PROFILE):   proc append base=EMWS1.Prof2_SELVARS data=_TEMPRULE force;
MPRINT(TREE_PROFILE):   run;
 
NOTE: Appending WORK._TEMPRULE to EMWS1.PROF2_SELVARS.
NOTE: There were 7 observations read from the data set WORK._TEMPRULE.
NOTE: 7 observations added.
NOTE: The data set EMWS1.PROF2_SELVARS has 27 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(TREE_PROFILE):   delete _SEGS Prof2_TMP Prof2_VALIDTMP _STAT _TEMPRULE ;
MPRINT(TREE_PROFILE):   run;
 
NOTE: The file WORK._SEGS (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK.PROF2_VALIDTMP (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK._STAT (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PROF2_TMP (memtype=VIEW).
NOTE: Deleting WORK._TEMPRULE (memtype=DATA).
MPRINT(TREE_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   data Prof2_TMP / view=Prof2_TMP ;
MPRINT(TREE_PROFILE):   set EMWS1.Clus2_TRAIN(keep
MPRINT(TREE_PROFILE):  =ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM IMP_HasChildren
IMP_EducationalDegree IMP_GeographicLiving _SEGMENT_);
MPRINT(TREE_PROFILE):   if _SEGMENT_ = 1 then _seg= 1 ;
MPRINT(TREE_PROFILE):   else _seg= 0 ;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: DATA STEP view saved on file WORK.PROF2_TMP.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
 
 
MPRINT(_ARBOR):   proc arbor data=Prof2_TMP Criterion=GINI Leafsize=5 Mincatsize = 5 Maxbranch=5 Maxdepth=1 NORULELIMIT MAXRULES=10 MAXSURRS=0 Missing=USEINSEARCH Exhaustive=5000;
MPRINT(_ARBOR):   input
MPRINT(EM_INTERVAL_INPUT):   ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM
MPRINT(_ARBOR):   / level = interval;
MPRINT(_ARBOR):   input
MPRINT(EM_BINARY_INPUT):   IMP_HasChildren
MPRINT(EM_NOMINAL_INPUT):   IMP_GeographicLiving
MPRINT(_ARBOR):   / level = nominal;
MPRINT(_ARBOR):   input
MPRINT(EM_ORDINAL_INPUT):   IMP_EducationalDegree
MPRINT(_ARBOR):   / level = ordinal;
MPRINT(_ARBOR):   target _SEG / level=binary;
MPRINT(_ARBOR):   Performance Disk NodeSize=10000;
MPRINT(_ARBOR):   Assess NoValidata measure=MISC;
NOTE: 1324850 kilobytes of physical memory.
NOTE: Will use 10296 out of 10296 training cases.
NOTE: Using memory pool with 211772416 bytes.
NOTE: Passed training data 2 times.
NOTE: Training used 3775064 bytes of work memory.
NOTE: The subtree sequence contains 2 subtrees. The largest has 6 nodes and 5 leaves.
NOTE: Using subtree with 6 nodes and 5 leaves.
MPRINT(_ARBOR):   SUBTREE BEST;
NOTE: Using subtree with 6 nodes and 5 leaves.
MPRINT(_ARBOR):   save RULES=_RULE;
NOTE: The data set WORK._RULE has 82 observations and 6 variables.
MPRINT(_ARBOR):   ;
MPRINT(_ARBOR):   run;
 
MPRINT(_ARBOR):   quit;
 
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.47 seconds
      cpu time            0.48 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.CLUS2_TRAIN.
NOTE: There were 10296 observations read from the data set WORK.PROF2_TMP.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.49 seconds
      cpu time            0.50 seconds
 
 
MPRINT(_ARBOR):   proc append base=_TEMPRULE data=_RULE force;
MPRINT(_ARBOR):   run;
 
NOTE: Appending WORK._RULE to WORK._TEMPRULE.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 82 observations read from the data set WORK._RULE.
NOTE: The data set WORK._TEMPRULE has 82 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(_ARBOR):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(_ARBOR):   delete _RULE;
MPRINT(_ARBOR):   run;
 
NOTE: Deleting WORK._RULE (memtype=DATA).
MPRINT(_ARBOR):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):  ;
MPRINT(TREE_PROFILE):   data _TEMPRULE(rename=(Name=Variable numeric_value=Worth));
MPRINT(TREE_PROFILE):   length Name $32;
MPRINT(TREE_PROFILE):   label Name = "Variable";
MPRINT(TREE_PROFILE):   retain Name;
MPRINT(TREE_PROFILE):   set _temprule;
MPRINT(TREE_PROFILE):   where stat in('VARIABLE','WORTH');
MPRINT(TREE_PROFILE):   if stat = 'VARIABLE' then Name = character_value;
MPRINT(TREE_PROFILE):   else output;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 20 observations read from the data set WORK._TEMPRULE.
      WHERE stat in ('VARIABLE', 'WORTH');
NOTE: The data set WORK._TEMPRULE has 10 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   proc sort data=_TEMPRULE;
MPRINT(TREE_PROFILE):   by descending Worth;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
NOTE: The data set WORK._TEMPRULE has 10 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   data _TEMPRULE(keep=SegmentVariable SegmentValue Variable Rank Worth);
MPRINT(TREE_PROFILE):   label SegmentVariable = "Segment Variable" SegmentValue = "Segment Value" Variable = "Variable" Rank = "Rank" Worth = "Worth";
MPRINT(TREE_PROFILE):   length SegmentVariable $32 SegmentValue $200;
MPRINT(TREE_PROFILE):   retain SegmentVariable "_SEGMENT_" SegmentValue "1";
MPRINT(TREE_PROFILE):   set _TEMPRULE(obs=10);
MPRINT(TREE_PROFILE):   Rank = _N_;
MPRINT(TREE_PROFILE):   if _N_=1 and worth ne . and (worth < 0.01) then do;
MPRINT(TREE_PROFILE):   put "*------------------------------------------------------------*";
MPRINT(TREE_PROFILE):   put "* No input variable meet the minimum worth criterion of 0.01";
MPRINT(TREE_PROFILE):   put "* You may identify profile variables by lowering this threshold, ";
MPRINT(TREE_PROFILE):   put "* or by increasing the maximum depth of the decision tree used.";
MPRINT(TREE_PROFILE):   put "*------------------------------------------------------------*";
MPRINT(TREE_PROFILE):   end;
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
NOTE: The data set WORK._TEMPRULE has 10 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   title9 "Variable: _SEGMENT_ Segment: 1 Count: 1184";
MPRINT(TREE_PROFILE):   title10 "Decision Tree Importance Profiles";
MPRINT(TREE_PROFILE):   proc print data=_TEMPRULE noobs label ;
MPRINT(TREE_PROFILE):   var Variable Worth Rank;
MPRINT(TREE_PROFILE):   where worth ne .;
MPRINT(TREE_PROFILE):   run ;
 
NOTE: There were 10 observations read from the data set WORK._TEMPRULE.
      WHERE worth not = .;
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TREE_PROFILE):   data _TEMPRULE;
MPRINT(TREE_PROFILE):   set _TEMPRULE;
MPRINT(TREE_PROFILE):   where worth eq . or (worth >= 0.01);
MPRINT(TREE_PROFILE):   run;
 
NOTE: There were 9 observations read from the data set WORK._TEMPRULE.
      WHERE (worth=.) or (worth>=0.01);
NOTE: The data set WORK._TEMPRULE has 9 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   title9;
MPRINT(TREE_PROFILE):   title10;
MPRINT(TREE_PROFILE):   proc append base=EMWS1.Prof2_SELVARS data=_TEMPRULE force;
MPRINT(TREE_PROFILE):   run;
 
NOTE: Appending WORK._TEMPRULE to EMWS1.PROF2_SELVARS.
NOTE: There were 9 observations read from the data set WORK._TEMPRULE.
NOTE: 9 observations added.
NOTE: The data set EMWS1.PROF2_SELVARS has 36 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TREE_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(TREE_PROFILE):   delete _SEGS Prof2_TMP Prof2_VALIDTMP _STAT _TEMPRULE ;
MPRINT(TREE_PROFILE):   run;
 
NOTE: The file WORK._SEGS (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK.PROF2_VALIDTMP (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK._STAT (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PROF2_TMP (memtype=VIEW).
NOTE: Deleting WORK._TEMPRULE (memtype=DATA).
MPRINT(TREE_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_PROFILE):   proc datasets lib=EMWS1 nolist;
MPRINT(EM_PROFILE):   delete Prof2_MACS(mt=catalog);
MPRINT(EM_PROFILE):   run;
 
NOTE: Deleting EMWS1.PROF2_MACS (memtype=CATALOG).
MPRINT(TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   proc sort data=EMWS1.Prof2_SELVARS;
MPRINT(TRAIN):   by Variable;
MPRINT(TRAIN):   run;
 
NOTE: There were 36 observations read from the data set EMWS1.PROF2_SELVARS.
NOTE: The data set EMWS1.PROF2_SELVARS has 36 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   data EMWS1.Prof2_SELVARS;
MPRINT(TRAIN):   length Type $1;
MPRINT(TRAIN):   label Type = "Type";
MPRINT(TRAIN):   merge EMWS1.Prof2_SELVARS(in=a) EMWS1.Prof2_VariableSet(keep=NAME LEVEL LABEL rename=(NAME=Variable));
MPRINT(TRAIN):   by Variable;
MPRINT(TRAIN):   if LABEL eq '' then LABEL=VARIABLE;
MPRINT(TRAIN):   if a then do;
MPRINT(TRAIN):   if LEVEL = 'INTERVAL' then Type = 'I';
MPRINT(TRAIN):   else Type = 'C';
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   drop LEVEL;
MPRINT(TRAIN):   run;
 
WARNING: Multiple lengths were specified for the BY variable Variable by input data sets. This may cause unexpected results.
NOTE: There were 36 observations read from the data set EMWS1.PROF2_SELVARS.
NOTE: There were 20 observations read from the data set EMWS1.PROF2_VARIABLESET.
NOTE: The data set EMWS1.PROF2_SELVARS has 36 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc sort data=EMWS1.Prof2_SELVARS out=_SummaryVars nodupkey;
MPRINT(TRAIN):   by Variable;
MPRINT(TRAIN):   run;
 
NOTE: There were 36 observations read from the data set EMWS1.PROF2_SELVARS.
NOTE: 25 observations with duplicate key values were deleted.
NOTE: The data set WORK._SUMMARYVARS has 11 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   data EMWS1.Prof2_STATS(keep=Type SegmentVariable SegmentValue Variable Label Rank Worth);
MPRINT(TRAIN):   length Type $1;
MPRINT(TRAIN):   label Type = "Type";
MPRINT(TRAIN):   set _SummaryVars;
MPRINT(TRAIN):   SegmentVariable= "_OVERALL_";
MPRINT(TRAIN):   SegmentValue= "EMWS1.Clus2_TRAIN" ;
MPRINT(TRAIN):   rank = .;
MPRINT(TRAIN):   Worth=.;
MPRINT(TRAIN):   if Label eq '' then Label=Variable;
MPRINT(TRAIN):   run;
 
NOTE: There were 11 observations read from the data set WORK._SUMMARYVARS.
NOTE: The data set EMWS1.PROF2_STATS has 11 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Profile Entire Data
*------------------------------------------------------------*
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   set EMWS1.Prof2_STATS;
MPRINT(TRAIN):   if Type = 'I' then call symput('SEGVARS',symget('SEGVARS' ) !! ' ' !! trim(left(Variable))) ;
MPRINT(TRAIN):   else call symput('SEGCLASS',symget('SEGCLASS' ) !! ' ' !! trim(left(Variable))) ;
MPRINT(TRAIN):   run ;
 
NOTE: There were 11 observations read from the data set EMWS1.PROF2_STATS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   put '%macro _vars;';
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Thursday, December 31, 2015 01:05:50 PM,
      Last Modified=Thursday, December 31, 2015 01:05:50 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
30461     +%macro _vars;
30462     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(CLASS_PROFILE):   proc dmdb data=EMWS1.Clus2_TRAIN nonorm classout=_tempclass(rename=(NAME=VARIABLE LEVEL=VALUE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(CLASS_PROFILE):   class
MPRINT(CLASS_PROFILE):   IMP_EducationalDegree IMP_HasChildren;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Records processed = 10296   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.18 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.CLUS2_TRAIN.
NOTE: The data set WORK._TEMPCLASS has 6 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.18 seconds
      cpu time            0.18 seconds
 
 
MPRINT(CLASS_PROFILE):   proc sort data=_tempclass;
MPRINT(CLASS_PROFILE):   by VARIABLE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 6 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._TEMPCLASS has 6 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   data _CLASS;
MPRINT(CLASS_PROFILE):   label VARIABLE = "Variable";
MPRINT(CLASS_PROFILE):   label VALUE = "Value";
MPRINT(CLASS_PROFILE):   label COUNT = "Frequency Count";
MPRINT(CLASS_PROFILE):   label PERCENT = "Percent";
MPRINT(CLASS_PROFILE):   set _tempclass;
MPRINT(CLASS_PROFILE):   format COUNT;
MPRINT(CLASS_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 6 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._CLASS has 6 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   proc means data=_CLASS noprint;
MPRINT(CLASS_PROFILE):   class VARIABLE;
MPRINT(CLASS_PROFILE):   var COUNT;
MPRINT(CLASS_PROFILE):   output out=_STAT N=NUMCAT;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 6 observations read from the data set WORK._CLASS.
NOTE: The data set WORK._STAT has 3 observations and 4 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   data _STAT;
MPRINT(CLASS_PROFILE):   set _STAT;
MPRINT(CLASS_PROFILE):   where _TYPE_=1;
MPRINT(CLASS_PROFILE):   KEEP VARIABLE NUMCAT;
MPRINT(CLASS_PROFILE):   label NUMCAT = "Number of Levels";
MPRINT(CLASS_PROFILE):   format NUMCAT 8.;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._STAT.
      WHERE _TYPE_=1;
NOTE: The data set WORK._STAT has 2 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   proc datasets lib=work nolist;
MPRINT(CLASS_PROFILE):   delete _tempclass;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Deleting WORK._TEMPCLASS (memtype=DATA).
MPRINT(CLASS_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _CLASS;
MPRINT(TRAIN):   length SegmentVariable $32 SegmentValue $200;
MPRINT(TRAIN):   retain SegmentVariable "_OVERALL_" SegmentValue "EMWS1.Clus2_TRAIN";
MPRINT(TRAIN):   label variable = "Variable" value = "Value" count = "Frequency Count" percent = "Percent";
MPRINT(TRAIN):   set _CLASS;
MPRINT(TRAIN):   run;
 
NOTE: There were 6 observations read from the data set WORK._CLASS.
NOTE: The data set WORK._CLASS has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   proc append base=EMWS1.Prof2_CLASSDIST data=_CLASS force;
MPRINT(TRAIN):   run;
 
NOTE: Appending WORK._CLASS to EMWS1.PROF2_CLASSDIST.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 6 observations read from the data set WORK._CLASS.
NOTE: The data set EMWS1.PROF2_CLASSDIST has 6 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc sort data=_STAT;
MPRINT(TRAIN):   by VARIABLE;
MPRINT(TRAIN):   run;
 
NOTE: There were 2 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 2 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   data EMWS1.Prof2_STATS;
MPRINT(TRAIN):   merge EMWS1.Prof2_STATS _STAT;
MPRINT(TRAIN):   by VARIABLE;
MPRINT(TRAIN):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.PROF2_STATS.
NOTE: There were 2 observations read from the data set WORK._STAT.
NOTE: The data set EMWS1.PROF2_STATS has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Prof2: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thursday, December 31, 2015 01:05:50 PM,
      Last Modified=Thursday, December 31, 2015 01:05:50 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
30463     +%macro _vars;
30464     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(VAR_PROFILE):   proc dmdb data=EMWS1.Clus2_TRAIN(obs=1000000) varout=_STAT(rename=(NAME=VARIABLE));
MPRINT(VAR_PROFILE):   var
MPRINT(VAR_PROFILE):   CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge PremiumsinLOBHousehold TOTAL_PREMIUM;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 10296   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.CLUS2_TRAIN.
NOTE: The data set WORK._STAT has 9 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.19 seconds
      cpu time            0.18 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_STAT;
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 9 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets library=WORK nolist;
MPRINT(VAR_PROFILE):   modify _STAT;
MPRINT(VAR_PROFILE):   label NMISS = "Missing";
MPRINT(VAR_PROFILE):   label MIN = "Minimum";
MPRINT(VAR_PROFILE):   label MAX = "Maximum";
MPRINT(VAR_PROFILE):   label MEAN = "Mean";
MPRINT(VAR_PROFILE):   label STD = "Standard Deviation";
MPRINT(VAR_PROFILE):   label SKEWNESS = "Skewness";
MPRINT(VAR_PROFILE):   label KURTOSIS = "Kurtosis";
MPRINT(VAR_PROFILE):   run;
 
NOTE: MODIFY was successful for WORK._STAT.DATA.
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* computingmidpoints_note
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename fref catalog 'work.em.profileformat.source';
MPRINT(VAR_PROFILE):   proc dmdb data=EMWS1.Clus2_TRAIN(obs=1000000) classout=_CLASSOUT maxlevel=9;
MPRINT(VAR_PROFILE):   class
MPRINT(VAR_PROFILE):   CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge PremiumsinLOBHousehold TOTAL_PREMIUM;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 10296   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.23 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.CLUS2_TRAIN.
NOTE: The data set WORK._CLASSOUT has 81 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.25 seconds
      cpu time            0.23 seconds
 
 
MPRINT(VAR_PROFILE):   proc freq data=_CLASSOUT ORDER=DATA noprint;
MPRINT(VAR_PROFILE):   table NAME / OUT = _COUNT(where=(COUNT<9));
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 81 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._COUNT has 0 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_COUNT(keep=NAME COUNT rename=(COUNT=_NUMCLASSBINS_));
MPRINT(VAR_PROFILE):   by NAME;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._COUNT has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_CLASSOUT;
MPRINT(VAR_PROFILE):   by NAME;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 81 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 81 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc transpose data=_CLASSOUT out=_DISCRETEMID(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
MPRINT(VAR_PROFILE):   var NRAW;
MPRINT(VAR_PROFILE):   by NAME;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 81 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._DISCRETEMID has 9 observations and 10 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc delete data=WORK._CLASSOUT;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   dsid = open('_DISCRETEMID');
MPRINT(VAR_PROFILE):   if dsid then do;
MPRINT(VAR_PROFILE):   call symput('NUMCLASSBARS', left(trim(put(attrn(dsid, 'NVARS')-1, best12.))));
MPRINT(VAR_PROFILE):   dsid = close(dsid);
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   data _DISCRETEMID;
MPRINT(VAR_PROFILE):   merge _DISCRETEMID _COUNT(in=_b rename=(NAME=VARIABLE));
MPRINT(VAR_PROFILE):   keep VARIABLE _MIDPOINT1--_MIDPOINT9 _NUMCLASSBINS_;
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   if _b then output;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 9 observations read from the data set WORK._DISCRETEMID.
NOTE: There were 0 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._DISCRETEMID has 0 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   data _EMVARDIST / view=_EMVARDIST;
MPRINT(VAR_PROFILE):   set EMWS1.Clus2_TRAIN(keep
MPRINT(VAR_PROFILE):  = CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge PremiumsinLOBHousehold TOTAL_PREMIUM obs=1000000);
MPRINT(VAR_PROFILE):   run;
 
NOTE: DATA STEP view saved on file WORK._EMVARDIST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(VAR_PROFILE):   proc stdize data=_EMVARDIST outstat=_PCTLSTAT out=_null_ pctlpts=(0 5 25 50 75 95 100);
MPRINT(VAR_PROFILE):   var
MPRINT(VAR_PROFILE):   CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge PremiumsinLOBHousehold TOTAL_PREMIUM;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK._EMVARDIST.VIEW used (Total process time):
      real time           0.43 seconds
      cpu time            0.40 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.CLUS2_TRAIN.
NOTE: There were 10296 observations read from the data set WORK._EMVARDIST.
NOTE: The data set WORK._PCTLSTAT has 15 observations and 10 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.46 seconds
      cpu time            0.42 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=WORK NOLIST;
MPRINT(VAR_PROFILE):   delete _EMVARDIST / mt=view;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Deleting WORK._EMVARDIST (memtype=VIEW).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc transpose data=_PCTLSTAT out=DATA_STAT(rename=(_NAME_=VARIABLE COL1=MIN COL2=P5 COL3=P95 COL4=MAX));
MPRINT(VAR_PROFILE):   where _type_ in('P0', 'P5', 'P95', 'P100');
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 4 observations read from the data set WORK._PCTLSTAT.
      WHERE _type_ in ('P0', 'P100', 'P5', 'P95');
NOTE: The data set WORK.DATA_STAT has 9 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=DATA_STAT;
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 9 observations read from the data set WORK.DATA_STAT.
NOTE: The data set WORK.DATA_STAT has 9 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   data DATA_STAT;
MPRINT(VAR_PROFILE):   set DATA_STAT;
MPRINT(VAR_PROFILE):   length Format $12;
MPRINT(VAR_PROFILE):   array _midpoint{20};
MPRINT(VAR_PROFILE):   array _bounds{20};
MPRINT(VAR_PROFILE):   if (max - min)>1e-10 then do;
MPRINT(VAR_PROFILE):   step = abs(P95-P5)/8;
MPRINT(VAR_PROFILE):   lstep = abs(p5- min)/5;
MPRINT(VAR_PROFILE):   ustep = abs(max-p95)/5;
MPRINT(VAR_PROFILE):   ;
MPRINT(VAR_PROFILE):   if lstep<=step and ustep<=step then do;
MPRINT(VAR_PROFILE):   step = abs(MIN-MAX)/8;
MPRINT(VAR_PROFILE):   START=MIN;
MPRINT(VAR_PROFILE):   do i=1 to 8;
MPRINT(VAR_PROFILE):   _bounds(i) = MIN + i*step;
MPRINT(VAR_PROFILE):   if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
MPRINT(VAR_PROFILE):   _midpoint(i) = MIN+ (i-0.5)*step;
MPRINT(VAR_PROFILE):   if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   if lstep<=step then do;
MPRINT(VAR_PROFILE):   step = abs(MIN-P95)/8;
MPRINT(VAR_PROFILE):   do i=1 to 8;
MPRINT(VAR_PROFILE):   _bounds(i) = MIN + i*step;
MPRINT(VAR_PROFILE):   if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
MPRINT(VAR_PROFILE):   _midpoint(i) = MIN+ (i-0.5)*step;
MPRINT(VAR_PROFILE):   if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   do i=1 to 5;
MPRINT(VAR_PROFILE):   numbars = 8 + i;
MPRINT(VAR_PROFILE):   _bounds(numbars) = P95 + i*ustep;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   do i=1 to 5;
MPRINT(VAR_PROFILE):   _bounds(i) = P5 - (5-i)*lstep;
MPRINT(VAR_PROFILE):   if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
MPRINT(VAR_PROFILE):   _midpoint(i) = P5 - (5 - i + 0.5)*lstep - abs(lstep-step)/2;
MPRINT(VAR_PROFILE):   if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   if ustep<= step then do;
MPRINT(VAR_PROFILE):   step = abs(P5-MAX)/8;
MPRINT(VAR_PROFILE):   do i=1 to 8;
MPRINT(VAR_PROFILE):   numbars = i+5;
MPRINT(VAR_PROFILE):   _bounds(numbars) = P5 + i*step;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   _midpoint(numbars) = P5 + (i-0.5)*step;
MPRINT(VAR_PROFILE):   if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   do i=1 to 8;
MPRINT(VAR_PROFILE):   numbars = i+5;
MPRINT(VAR_PROFILE):   _bounds(numbars) = P5 + i*step;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   _midpoint(numbars) = P5 + (i-0.5)*step;
MPRINT(VAR_PROFILE):   if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   do i=1 to 5;
MPRINT(VAR_PROFILE):   numbars = 8+5+i;
MPRINT(VAR_PROFILE):   _bounds(numbars) = P95 + i*ustep;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;
MPRINT(VAR_PROFILE):  if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   _bounds(1) = MIN;
MPRINT(VAR_PROFILE):   _midpoint(1) = MIN;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   Format = 'F'!!trim(left(put(_n_,6.)))!!'_';
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 9 observations read from the data set WORK.DATA_STAT.
NOTE: The data set WORK.DATA_STAT has 9 observations and 53 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   data DATA_STAT;
MPRINT(VAR_PROFILE):   merge DATA_STAT _DISCRETEMID(in = _b);
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   if _b then _DISCRETE=1;
MPRINT(VAR_PROFILE):   else _DISCRETE=0;
MPRINT(VAR_PROFILE):   run;
 
WARNING: Multiple lengths were specified for the BY variable VARIABLE by input data sets. This may cause unexpected results.
NOTE: There were 9 observations read from the data set WORK.DATA_STAT.
NOTE: There were 0 observations read from the data set WORK._DISCRETEMID.
NOTE: The data set WORK.DATA_STAT has 9 observations and 55 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file fref;
MPRINT(VAR_PROFILE):   set DATA_STAT end=eof;
MPRINT(VAR_PROFILE):   array _bounds{18};
MPRINT(VAR_PROFILE):   array _midpoint{18};
MPRINT(VAR_PROFILE):   if _n_=1 then put 'proc format;';
MPRINT(VAR_PROFILE):   put 'value ' Format;
MPRINT(VAR_PROFILE):   if _DISCRETE then do;
MPRINT(VAR_PROFILE):   do i=1 to 8;
MPRINT(VAR_PROFILE):   _MID = _midpoint{i};
MPRINT(VAR_PROFILE):   if _MID ne . and i<= _NUMCLASSBINS_ then put _MID '="' _MID '"';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   put ';';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   if min eq max then do;
MPRINT(VAR_PROFILE):   put 'low - high ="' MIN '";';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   _LB = MIN;
MPRINT(VAR_PROFILE):   _MID = _midpoint{1};
MPRINT(VAR_PROFILE):   _UB = _bounds{1};
MPRINT(VAR_PROFILE):   put 'LOW -' _UB '="' _MID '"';
MPRINT(VAR_PROFILE):   do i=1 to 18-1;
MPRINT(VAR_PROFILE):   _LB = _bounds{i};
MPRINT(VAR_PROFILE):   j=i+1;
MPRINT(VAR_PROFILE):   _MID = _midpoint{j};
MPRINT(VAR_PROFILE):   _UB = _bounds{j};
MPRINT(VAR_PROFILE):   if (_UB ne .) and (_LB ne _UB) then do;
MPRINT(VAR_PROFILE):   if _UB>=MAX then put _LB '-HIGH="' _MID '"';
MPRINT(VAR_PROFILE):   else put _LB '-' _UB '="' _MID '"';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   put ';';
MPRINT(VAR_PROFILE):   if eof then put 'run;';
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file FREF is:
      Catalog Name=WORK.EM.PROFILEFORMAT.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Thursday, December 31, 2015 01:05:51 PM,
      Last Modified=Thursday, December 31, 2015 01:05:51 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\em.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 137 records were written to the file FREF.
      The minimum record length was 1.
      The maximum record length was 43.
NOTE: There were 9 observations read from the data set WORK.DATA_STAT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file FREF is file WORK.EM.PROFILEFORMAT.SOURCE.
30465     +proc format;
MPRINT(VAR_PROFILE):   proc format;
30466     +value F1_
30467     +LOW --132563.0532 ="-165634.2009 "
30468     +-132563.0532 --99445.6824 ="-132516.8301 "
30469     +-99445.6824 --66328.3116 ="-99399.45928 "
30470     +-66328.3116 --33210.9408 ="-66282.08848 "
30471     +-33210.9408 --93.57 ="-33164.71768 "
30472     +-93.57 --1.12375 ="-47.346875 "
30473     +-1.12375 -91.3225 ="45.099375 "
30474     +91.3225 -183.76875 ="137.545625 "
30475     +183.76875 -276.215 ="229.991875 "
30476     +276.215 -368.66125 ="322.438125 "
30477     +368.66125 -461.1075 ="414.884375 "
30478     +461.1075 -553.55375 ="507.330625 "
30479     +553.55375 -646 ="599.776875 "
30480     +646 -2891.978 ="2845.754875 "
30481     +2891.978 -5137.956 ="5091.732875 "
30482     +5137.956 -7383.934 ="7337.710875 "
30483     +7383.934 -9629.912 ="9583.688875 "
30484     +9629.912 -HIGH="11829.666875 "
30485     +;
MPRINT(VAR_PROFILE):   value F1_ LOW --132563.0532 ="-165634.2009 " -132563.0532 --99445.6824 ="-132516.8301 " -99445.6824 --66328.3116 ="-99399.45928 " -66328.3116 --33210.9408 ="-66282.08848 " -33210.9408 --93.57 ="-33164.71768 " -93.57 --1.12375
="-47.346875 " -1.12375 -91.3225 ="45.099375 " 91.3225 -183.76875 ="137.545625 " 183.76875 -276.215 ="229.991875 " 276.215 -368.66125 ="322.438125 " 368.66125 -461.1075 ="414.884375 " 461.1075 -553.55375 ="507.330625 " 553.55375 -646 ="599.776875 " 646
-2891.978 ="2845.754875 " 2891.978 -5137.956 ="5091.732875 " 5137.956 -7383.934 ="7337.710875 " 7383.934 -9629.912 ="9583.688875 " 9629.912 -HIGH="11829.666875 " ;
NOTE: Format F1_ has been output.
30486     +value F2_
30487     +LOW -1593.25 ="1129.125 "
30488     +1593.25 -2521.5 ="2057.375 "
30489     +2521.5 -3449.75 ="2985.625 "
30490     +3449.75 -4378 ="3913.875 "
30491     +4378 -5306.25 ="4842.125 "
30492     +5306.25 -6234.5 ="5770.375 "
30493     +6234.5 -7162.75 ="6698.625 "
30494     +7162.75 -8091 ="7626.875 "
30495     +8091 -28558.752 ="28094.627 "
30496     +28558.752 -49026.504 ="48562.379 "
30497     +49026.504 -69494.256 ="69030.131 "
30498     +69494.256 -89962.008 ="89497.883 "
30499     +89962.008 -HIGH="109965.635 "
30500     +;
MPRINT(VAR_PROFILE):   value F2_ LOW -1593.25 ="1129.125 " 1593.25 -2521.5 ="2057.375 " 2521.5 -3449.75 ="2985.625 " 3449.75 -4378 ="3913.875 " 4378 -5306.25 ="4842.125 " 5306.25 -6234.5 ="5770.375 " 6234.5 -7162.75 ="6698.625 " 7162.75 -8091 ="7626.875 "
8091 -28558.752 ="28094.627 " 28558.752 -49026.504 ="48562.379 " 49026.504 -69494.256 ="69030.131 " 69494.256 -89962.008 ="89497.883 " 89962.008 -HIGH="109965.635 " ;
NOTE: Format F2_ has been output.
30501     +value F3_
30502     +LOW -35.3275 ="16.60875 "
30503     +35.3275 -72.765 ="54.04625 "
30504     +72.765 -110.2025 ="91.48375 "
30505     +110.2025 -147.64 ="128.92125 "
30506     +147.64 -185.0775 ="166.35875 "
30507     +185.0775 -222.515 ="203.79625 "
30508     +222.515 -259.9525 ="241.23375 "
30509     +259.9525 -297.39 ="278.67125 "
30510     +297.39 -5892.312 ="5873.59325 "
30511     +5892.312 -11487.234 ="11468.51525 "
30512     +11487.234 -17082.156 ="17063.43725 "
30513     +17082.156 -22677.078 ="22658.35925 "
30514     +22677.078 -HIGH="28253.28125 "
30515     +;
MPRINT(VAR_PROFILE):   value F3_ LOW -35.3275 ="16.60875 " 35.3275 -72.765 ="54.04625 " 72.765 -110.2025 ="91.48375 " 110.2025 -147.64 ="128.92125 " 147.64 -185.0775 ="166.35875 " 185.0775 -222.515 ="203.79625 " 222.515 -259.9525 ="241.23375 " 259.9525
-297.39 ="278.67125 " 297.39 -5892.312 ="5873.59325 " 5892.312 -11487.234 ="11468.51525 " 11487.234 -17082.156 ="17063.43725 " 17082.156 -22677.078 ="22658.35925 " 22677.078 -HIGH="28253.28125 " ;
NOTE: Format F3_ has been output.
30516     +value F4_
30517     +LOW -11.30875 ="2.154375 "
30518     +11.30875 -29.6175 ="20.463125 "
30519     +29.6175 -47.92625 ="38.771875 "
30520     +47.92625 -66.235 ="57.080625 "
30521     +66.235 -84.54375 ="75.389375 "
30522     +84.54375 -102.8525 ="93.698125 "
30523     +102.8525 -121.16125 ="112.006875 "
30524     +121.16125 -139.47 ="130.315625 "
30525     +139.47 -191.236 ="182.081625 "
30526     +191.236 -243.002 ="233.847625 "
30527     +243.002 -294.768 ="285.613625 "
30528     +294.768 -346.534 ="337.379625 "
30529     +346.534 -HIGH="389.145625 "
30530     +;
MPRINT(VAR_PROFILE):   value F4_ LOW -11.30875 ="2.154375 " 11.30875 -29.6175 ="20.463125 " 29.6175 -47.92625 ="38.771875 " 47.92625 -66.235 ="57.080625 " 66.235 -84.54375 ="75.389375 " 84.54375 -102.8525 ="93.698125 " 102.8525 -121.16125 ="112.006875 "
121.16125 -139.47 ="130.315625 " 139.47 -191.236 ="182.081625 " 191.236 -243.002 ="233.847625 " 243.002 -294.768 ="285.613625 " 294.768 -346.534 ="337.379625 " 346.534 -HIGH="389.145625 " ;
NOTE: Format F4_ has been output.
30531     +value F5_
30532     +LOW -60.81875 ="28.354375 "
30533     +60.81875 -125.7475 ="93.283125 "
30534     +125.7475 -190.67625 ="158.211875 "
30535     +190.67625 -255.605 ="223.140625 "
30536     +255.605 -320.53375 ="288.069375 "
30537     +320.53375 -385.4625 ="352.998125 "
30538     +385.4625 -450.39125 ="417.926875 "
30539     +450.39125 -515.32 ="482.855625 "
30540     +515.32 -2733.14 ="2700.675625 "
30541     +2733.14 -4950.96 ="4918.495625 "
30542     +4950.96 -7168.78 ="7136.315625 "
30543     +7168.78 -9386.6 ="9354.135625 "
30544     +9386.6 -HIGH="11571.955625 "
30545     +;
MPRINT(VAR_PROFILE):   value F5_ LOW -60.81875 ="28.354375 " 60.81875 -125.7475 ="93.283125 " 125.7475 -190.67625 ="158.211875 " 190.67625 -255.605 ="223.140625 " 255.605 -320.53375 ="288.069375 " 320.53375 -385.4625 ="352.998125 " 385.4625 -450.39125
="417.926875 " 450.39125 -515.32 ="482.855625 " 515.32 -2733.14 ="2700.675625 " 2733.14 -4950.96 ="4918.495625 " 4950.96 -7168.78 ="7136.315625 " 7168.78 -9386.6 ="9354.135625 " 9386.6 -HIGH="11571.955625 " ;
NOTE: Format F5_ has been output.
30546     +value F6_
30547     +LOW -6.5725 ="-2.71375 "
30548     +6.5725 -25.145 ="15.85875 "
30549     +25.145 -43.7175 ="34.43125 "
30550     +43.7175 -62.29 ="53.00375 "
30551     +62.29 -80.8625 ="71.57625 "
30552     +80.8625 -99.435 ="90.14875 "
30553     +99.435 -118.0075 ="108.72125 "
30554     +118.0075 -136.58 ="127.29375 "
30555     +136.58 -507.004 ="497.71775 "
30556     +507.004 -877.428 ="868.14175 "
30557     +877.428 -1247.852 ="1238.56575 "
30558     +1247.852 -1618.276 ="1608.98975 "
30559     +1618.276 -HIGH="1979.41375 "
30560     +;
MPRINT(VAR_PROFILE):   value F6_ LOW -6.5725 ="-2.71375 " 6.5725 -25.145 ="15.85875 " 25.145 -43.7175 ="34.43125 " 43.7175 -62.29 ="53.00375 " 62.29 -80.8625 ="71.57625 " 80.8625 -99.435 ="90.14875 " 99.435 -118.0075 ="108.72125 " 118.0075 -136.58
="127.29375 " 136.58 -507.004 ="497.71775 " 507.004 -877.428 ="868.14175 " 877.428 -1247.852 ="1238.56575 " 1247.852 -1618.276 ="1608.98975 " 1618.276 -HIGH="1979.41375 " ;
NOTE: Format F6_ has been output.
30561     +value F7_
30562     +LOW -23.25 ="19.125 "
30563     +23.25 -31.5 ="27.375 "
30564     +31.5 -39.75 ="35.625 "
30565     +39.75 -48 ="43.875 "
30566     +48 -56.25 ="52.125 "
30567     +56.25 -64.5 ="60.375 "
30568     +64.5 -72.75 ="68.625 "
30569     +72.75 -HIGH="76.875 "
30570     +;
MPRINT(VAR_PROFILE):   value F7_ LOW -23.25 ="19.125 " 23.25 -31.5 ="27.375 " 31.5 -39.75 ="35.625 " 39.75 -48 ="43.875 " 48 -56.25 ="52.125 " 56.25 -64.5 ="60.375 " 64.5 -72.75 ="68.625 " 72.75 -HIGH="76.875 " ;
NOTE: Format F7_ has been output.
30571     +value F8_
30572     +LOW -21.3375 ="-26.83125 "
30573     +21.3375 -117.675 ="69.50625 "
30574     +117.675 -214.0125 ="165.84375 "
30575     +214.0125 -310.35 ="262.18125 "
30576     +310.35 -406.6875 ="358.51875 "
30577     +406.6875 -503.025 ="454.85625 "
30578     +503.025 -599.3625 ="551.19375 "
30579     +599.3625 -695.7 ="647.53125 "
30580     +695.7 -5566.32 ="5518.15125 "
30581     +5566.32 -10436.94 ="10388.77125 "
30582     +10436.94 -15307.56 ="15259.39125 "
30583     +15307.56 -20178.18 ="20130.01125 "
30584     +20178.18 -HIGH="25000.63125 "
30585     +;
MPRINT(VAR_PROFILE):   value F8_ LOW -21.3375 ="-26.83125 " 21.3375 -117.675 ="69.50625 " 117.675 -214.0125 ="165.84375 " 214.0125 -310.35 ="262.18125 " 310.35 -406.6875 ="358.51875 " 406.6875 -503.025 ="454.85625 " 503.025 -599.3625 ="551.19375 "
599.3625 -695.7 ="647.53125 " 695.7 -5566.32 ="5518.15125 " 5566.32 -10436.94 ="10388.77125 " 10436.94 -15307.56 ="15259.39125 " 15307.56 -20178.18 ="20130.01125 " 20178.18 -HIGH="25000.63125 " ;
NOTE: Format F8_ has been output.
30586     +value F9_
30587     +LOW -455.23022084 ="405.63523662 "
30588     +455.23022084 -554.42018929 ="504.82520507 "
30589     +554.42018929 -653.61015774 ="604.01517352 "
30590     +653.61015774 -752.8001262 ="703.20514197 "
30591     +752.8001262 -851.99009465 ="802.39511042 "
30592     +851.99009465 -951.1800631 ="901.58507887 "
30593     +951.1800631 -1050.3700315 ="1000.7750473 "
30594     +1050.3700315 -1149.56 ="1099.9650158 "
30595     +1149.56 -6785.912 ="6736.3170158 "
30596     +6785.912 -12422.264 ="12372.669016 "
30597     +12422.264 -18058.616 ="18009.021016 "
30598     +18058.616 -23694.968 ="23645.373016 "
30599     +23694.968 -HIGH="29281.725016 "
30600     +;
MPRINT(VAR_PROFILE):   value F9_ LOW -455.23022084 ="405.63523662 " 455.23022084 -554.42018929 ="504.82520507 " 554.42018929 -653.61015774 ="604.01517352 " 653.61015774 -752.8001262 ="703.20514197 " 752.8001262 -851.99009465 ="802.39511042 " 851.99009465
-951.1800631 ="901.58507887 " 951.1800631 -1050.3700315 ="1000.7750473 " 1050.3700315 -1149.56 ="1099.9650158 " 1149.56 -6785.912 ="6736.3170158 " 6785.912 -12422.264 ="12372.669016 " 12422.264 -18058.616 ="18009.021016 " 18058.616 -23694.968
="23645.373016 " 23694.968 -HIGH="29281.725016 " ;
NOTE: Format F9_ has been output.
MPRINT(VAR_PROFILE):   run;
30601     +run;
 
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename fref;
NOTE: Fileref FREF has been deassigned.
MPRINT(VAR_PROFILE):   data _binneddata / view=_binneddata;
MPRINT(VAR_PROFILE):   set EMWS1.Clus2_TRAIN(obs=1000000);
MPRINT(VAR_PROFILE):   format CustomerMonetaryValue F1_. IMP_GrossMonthlySalary F2_. IMP_PremiumsinLOBHealth F3_. IMP_PremiumsinLOBLife F4_. IMP_PremiumsinLOBMotor F5_. IMP_PremiumsinLOBWorkComp F6_. IMP_REP_CustomerAge F7_. PremiumsinLOBHousehold F8_.
TOTAL_PREMIUM F9_. ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: DATA STEP view saved on file WORK._BINNEDDATA.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data=_binneddata(obs=1000000) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(VAR_PROFILE):   class
MPRINT(VAR_PROFILE):   CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge PremiumsinLOBHousehold TOTAL_PREMIUM;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 10296   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK._BINNEDDATA.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.21 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.CLUS2_TRAIN.
NOTE: There were 10296 observations read from the data set WORK._BINNEDDATA.
NOTE: The data set WORK._TEMPTAB has 105 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.25 seconds
      cpu time            0.24 seconds
 
 
MPRINT(VAR_PROFILE):   data _INTERVAL;
MPRINT(VAR_PROFILE):   label VALUE = "Value";
MPRINT(VAR_PROFILE):   label VARIABLE = "Variable";
MPRINT(VAR_PROFILE):   label COUNT = "Frequency Count";
MPRINT(VAR_PROFILE):   label PERCENT = "Percent";
MPRINT(VAR_PROFILE):   set _temptab;
MPRINT(VAR_PROFILE):   format VALUE 12.3 count;
MPRINT(VAR_PROFILE):   value = inputn(level, 'best12.');
MPRINT(VAR_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 105 observations read from the data set WORK._TEMPTAB.
NOTE: The data set WORK._INTERVAL has 105 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._MINMAXDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._TEMPTAB (memtype=DATA).
NOTE: Deleting WORK._BINNEDDATA (memtype=VIEW).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _INTERVAL;
MPRINT(TRAIN):   length SegmentVariable $32 SegmentValue $200;
MPRINT(TRAIN):   retain SegmentVariable "_OVERALL_" SegmentValue "EMWS1.Clus2_TRAIN";
MPRINT(TRAIN):   label variable = "Variable" value = "Value" count = "Frequency Count" percent = "Percent";
MPRINT(TRAIN):   set _INTERVAL;
MPRINT(TRAIN):   run;
 
NOTE: There were 105 observations read from the data set WORK._INTERVAL.
NOTE: The data set WORK._INTERVAL has 105 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   proc append base=EMWS1.Prof2_INTDIST data=_INTERVAL force;
MPRINT(TRAIN):   run;
 
NOTE: Appending WORK._INTERVAL to EMWS1.PROF2_INTDIST.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 105 observations read from the data set WORK._INTERVAL.
NOTE: The data set EMWS1.PROF2_INTDIST has 105 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc sort data=_STAT(KEEP=VARIABLE NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS) OUT=_STAT;
MPRINT(TRAIN):   by VARIABLE;
MPRINT(TRAIN):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 9 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 9 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   data EMWS1.Prof2_STATS;
MPRINT(TRAIN):   merge EMWS1.Prof2_STATS _STAT;
MPRINT(TRAIN):   by VARIABLE;
MPRINT(TRAIN):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.PROF2_STATS.
NOTE: There were 9 observations read from the data set WORK._STAT.
NOTE: The data set EMWS1.PROF2_STATS has 11 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   filename X catalog "EMWS1.Prof2_INTERVAL.FORMAT.source";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   file X;
MPRINT(TRAIN):   put 'format' ;
MPRINT(TRAIN):   put "CustomerMonetaryValue F1_.";
MPRINT(TRAIN):   put "IMP_GrossMonthlySalary F2_.";
MPRINT(TRAIN):   put "IMP_PremiumsinLOBHealth F3_.";
MPRINT(TRAIN):   put "IMP_PremiumsinLOBLife F4_.";
MPRINT(TRAIN):   put "IMP_PremiumsinLOBMotor F5_.";
MPRINT(TRAIN):   put "IMP_PremiumsinLOBWorkComp F6_.";
MPRINT(TRAIN):   put "IMP_REP_CustomerAge F7_.";
MPRINT(TRAIN):   put "PremiumsinLOBHousehold F8_.";
MPRINT(TRAIN):   put "TOTAL_PREMIUM F9_.";
MPRINT(TRAIN):   put ';';
MPRINT(TRAIN):   run;
 
NOTE: The file X is:
      Catalog Name=EMWS1.PROF2_INTERVAL.FORMAT.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Thursday, December 31, 2015 01:05:52 PM,
      Last Modified=Thursday, December 31, 2015 01:05:52 PM,
      Filename=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\prof2_interval.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 11 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 30.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
*------------------------------------------------------------*
* Summarizing variables
* SEGMENT= _SEGMENT_
*------------------------------------------------------------*
MPRINT(SEGMENTSUMMARY):   data _null_;
MPRINT(SEGMENTSUMMARY):   retain cum othercount otherpct numLevels 0;
MPRINT(SEGMENTSUMMARY):   format Count 8.;
MPRINT(SEGMENTSUMMARY):   set _SEGMENT_ end=eof;
MPRINT(SEGMENTSUMMARY):   SegmentValue= strip(put(_SEGMENT_, best12.));
MPRINT(SEGMENTSUMMARY):   if (cum < 95) or (trim(symget('OTHERWHERE')) eq ' ' and eof) then do;
MPRINT(SEGMENTSUMMARY):   call symput('SEGMENTS'!!strip(put(_N_,BEST.)), strip(tranwrd(SegmentValue, '"','""'))) ;
MPRINT(SEGMENTSUMMARY):   call symput('COUNTS' !!strip(put(_N_,BEST.)), strip(put(count, best.))) ;
MPRINT(SEGMENTSUMMARY):   numLevels + 1;
MPRINT(SEGMENTSUMMARY):   output;
MPRINT(SEGMENTSUMMARY):   end;
MPRINT(SEGMENTSUMMARY):   else do;
MPRINT(SEGMENTSUMMARY):   call symput('OTHERWHERE' ,symget('OTHERWHERE' ) !! ' ' !! strip(SegmentValue));
MPRINT(SEGMENTSUMMARY):   othercount = othercount + count;
MPRINT(SEGMENTSUMMARY):   otherpct = otherpct + percent;
MPRINT(SEGMENTSUMMARY):   if eof then do;
MPRINT(SEGMENTSUMMARY):   SegmentValue = '_OTHER_';
MPRINT(SEGMENTSUMMARY):   count = othercount;
MPRINT(SEGMENTSUMMARY):   percent = otherpct;
MPRINT(SEGMENTSUMMARY):   numLevels + 1;
MPRINT(SEGMENTSUMMARY):   call symput('SEGMENTS'!! strip(put(numLevels,BEST.)), '_OTHER_') ;
MPRINT(SEGMENTSUMMARY):   call symput('COUNTS' !! strip(put(numLevels,BEST.)), strip(put(count, best.))) ;
MPRINT(SEGMENTSUMMARY):   output;
MPRINT(SEGMENTSUMMARY):   end;
MPRINT(SEGMENTSUMMARY):   end;
MPRINT(SEGMENTSUMMARY):   cum = cum + percent;
MPRINT(SEGMENTSUMMARY):   if eof then call symput('numLevels', strip(put(numLevels,BEST.))) ;
MPRINT(SEGMENTSUMMARY):   run ;
 
NOTE: There were 5 observations read from the data set WORK._SEGMENT_.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   set EMWS1.Prof2_SELVARS;
MPRINT(SEGMENTSUMMARY):   where SegmentVariable="_SEGMENT_" and SegmentValue="4";
MPRINT(SEGMENTSUMMARY):   if Type eq 'I' then call symput('SEGVARS',symget('SEGVARS' ) !! ' ' !! trim(left(Variable))) ;
MPRINT(SEGMENTSUMMARY):   else call symput('SEGCLASS',symget('SEGCLASS' ) !! ' ' !! trim(left(Variable))) ;
MPRINT(SEGMENTSUMMARY):   run ;
 
NOTE: There were 10 observations read from the data set EMWS1.PROF2_SELVARS.
      WHERE (SegmentVariable='_SEGMENT_') and (SegmentValue='4');
NOTE: The data set WORK._TEMPSTAT has 10 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_tempStat;
MPRINT(SEGMENTSUMMARY):   by Variable;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPSTAT.
NOTE: The data set WORK._TEMPSTAT has 10 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data Prof2_TMP / view=Prof2_TMP ;
MPRINT(SEGMENTSUMMARY):   set EMWS1.Clus2_TRAIN;
MPRINT(SEGMENTSUMMARY):   where _SEGMENT_ = 4;
NOTE: %INCLUDE (level 1) file X is file EMWS1.PROF2_INTERVAL.FORMAT.SOURCE.
30602     +format
30603     +CustomerMonetaryValue F1_.
30604     +IMP_GrossMonthlySalary F2_.
30605     +IMP_PremiumsinLOBHealth F3_.
30606     +IMP_PremiumsinLOBLife F4_.
30607     +IMP_PremiumsinLOBMotor F5_.
30608     +IMP_PremiumsinLOBWorkComp F6_.
30609     +IMP_REP_CustomerAge F7_.
30610     +PremiumsinLOBHousehold F8_.
30611     +TOTAL_PREMIUM F9_.
30612     +;
MPRINT(SEGMENTSUMMARY):   format CustomerMonetaryValue F1_. IMP_GrossMonthlySalary F2_. IMP_PremiumsinLOBHealth F3_. IMP_PremiumsinLOBLife F4_. IMP_PremiumsinLOBMotor F5_. IMP_PremiumsinLOBWorkComp F6_. IMP_REP_CustomerAge F7_. PremiumsinLOBHousehold F8_.
TOTAL_PREMIUM F9_. ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: DATA STEP view saved on file WORK.PROF2_TMP.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.10 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.12 seconds
 
 
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   put '%macro _vars;';
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thursday, December 31, 2015 01:05:50 PM,
      Last Modified=Thursday, December 31, 2015 01:05:50 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
30613     +%macro _vars;
30614     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(CLASS_PROFILE):   proc dmdb data=Prof2_TMP nonorm classout=_tempclass(rename=(NAME=VARIABLE LEVEL=VALUE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(CLASS_PROFILE):   class
MPRINT(CLASS_PROFILE):   IMP_EducationalDegree IMP_HasChildren;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Records processed = 2905   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.21 seconds
 
NOTE: There were 2905 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=4;
NOTE: There were 2905 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._TEMPCLASS has 6 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.25 seconds
      cpu time            0.23 seconds
 
 
MPRINT(CLASS_PROFILE):   proc sort data=_tempclass;
MPRINT(CLASS_PROFILE):   by VARIABLE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 6 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._TEMPCLASS has 6 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   data _CLASS;
MPRINT(CLASS_PROFILE):   label VARIABLE = "Variable";
MPRINT(CLASS_PROFILE):   label VALUE = "Value";
MPRINT(CLASS_PROFILE):   label COUNT = "Frequency Count";
MPRINT(CLASS_PROFILE):   label PERCENT = "Percent";
MPRINT(CLASS_PROFILE):   set _tempclass;
MPRINT(CLASS_PROFILE):   format COUNT;
MPRINT(CLASS_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 6 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._CLASS has 6 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   proc means data=_CLASS noprint;
MPRINT(CLASS_PROFILE):   class VARIABLE;
MPRINT(CLASS_PROFILE):   var COUNT;
MPRINT(CLASS_PROFILE):   output out=_STAT N=NUMCAT;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 6 observations read from the data set WORK._CLASS.
NOTE: The data set WORK._STAT has 3 observations and 4 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   data _STAT;
MPRINT(CLASS_PROFILE):   set _STAT;
MPRINT(CLASS_PROFILE):   where _TYPE_=1;
MPRINT(CLASS_PROFILE):   KEEP VARIABLE NUMCAT;
MPRINT(CLASS_PROFILE):   label NUMCAT = "Number of Levels";
MPRINT(CLASS_PROFILE):   format NUMCAT 8.;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._STAT.
      WHERE _TYPE_=1;
NOTE: The data set WORK._STAT has 2 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   proc datasets lib=work nolist;
MPRINT(CLASS_PROFILE):   delete _tempclass;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Deleting WORK._TEMPCLASS (memtype=DATA).
MPRINT(CLASS_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):  ;
MPRINT(SEGMENTSUMMARY):   data _CLASS;
MPRINT(SEGMENTSUMMARY):   length SegmentVariable $32 SegmentValue $200;
MPRINT(SEGMENTSUMMARY):   retain SegmentVariable "_SEGMENT_" SegmentValue "4";
MPRINT(SEGMENTSUMMARY):   label Variable = "Variable" value = "Value" count = "Frequency Count" percent = "Percent";
MPRINT(SEGMENTSUMMARY):   set _CLASS;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 6 observations read from the data set WORK._CLASS.
NOTE: The data set WORK._CLASS has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_CLASSDIST data=_CLASS force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._CLASS to EMWS1.PROF2_CLASSDIST.
NOTE: There were 6 observations read from the data set WORK._CLASS.
NOTE: 6 observations added.
NOTE: The data set EMWS1.PROF2_CLASSDIST has 12 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   merge _tempStat _STAT;
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPSTAT.
NOTE: There were 2 observations read from the data set WORK._STAT.
NOTE: The data set WORK._TEMPSTAT has 10 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Prof2: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thursday, December 31, 2015 01:05:50 PM,
      Last Modified=Thursday, December 31, 2015 01:05:52 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
30615     +%macro _vars;
30616     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _BOUNDS;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._BOUNDS (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data=Prof2_TMP(obs=1000000) varout=_STAT(rename=(NAME=VARIABLE));
MPRINT(VAR_PROFILE):   var
MPRINT(VAR_PROFILE):   IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge PremiumsinLOBHousehold TOTAL_PREMIUM;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 2905   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
 
NOTE: There were 2905 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=4;
NOTE: There were 2905 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._STAT has 8 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_STAT;
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 8 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets library=WORK nolist;
MPRINT(VAR_PROFILE):   modify _STAT;
MPRINT(VAR_PROFILE):   label NMISS = "Missing";
MPRINT(VAR_PROFILE):   label MIN = "Minimum";
MPRINT(VAR_PROFILE):   label MAX = "Maximum";
MPRINT(VAR_PROFILE):   label MEAN = "Mean";
MPRINT(VAR_PROFILE):   label STD = "Standard Deviation";
MPRINT(VAR_PROFILE):   label SKEWNESS = "Skewness";
MPRINT(VAR_PROFILE):   label KURTOSIS = "Kurtosis";
MPRINT(VAR_PROFILE):   run;
 
NOTE: MODIFY was successful for WORK._STAT.DATA.
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data = Prof2_TMP(obs=1000000) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(VAR_PROFILE):   class
MPRINT(VAR_PROFILE):   IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge PremiumsinLOBHousehold TOTAL_PREMIUM;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 2905   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.20 seconds
 
NOTE: There were 2905 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=4;
NOTE: There were 2905 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._TEMPTAB has 74 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.24 seconds
      cpu time            0.22 seconds
 
 
MPRINT(VAR_PROFILE):   data _INTERVAL;
MPRINT(VAR_PROFILE):   label VALUE = "Value";
MPRINT(VAR_PROFILE):   label VARIABLE = "Variable";
MPRINT(VAR_PROFILE):   label COUNT = "Frequency Count";
MPRINT(VAR_PROFILE):   label PERCENT = "Percent";
MPRINT(VAR_PROFILE):   set _temptab;
MPRINT(VAR_PROFILE):   format VALUE 12.3 count;
MPRINT(VAR_PROFILE):   value = inputn(level, 'best12.');
MPRINT(VAR_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 74 observations read from the data set WORK._TEMPTAB.
NOTE: The data set WORK._INTERVAL has 74 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._BINNEDDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK._MINMAXDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._TEMPTAB (memtype=DATA).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):  ;
MPRINT(SEGMENTSUMMARY):   data _INTERVAL;
MPRINT(SEGMENTSUMMARY):   length SegmentVariable $32 SegmentValue $200;
MPRINT(SEGMENTSUMMARY):   retain SegmentVariable "_SEGMENT_" SegmentValue "4";
MPRINT(SEGMENTSUMMARY):   label Variable = "Variable" value = "Value" count = "Frequency Count" percent = "Percent";
MPRINT(SEGMENTSUMMARY):   set _INTERVAL;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 74 observations read from the data set WORK._INTERVAL.
NOTE: The data set WORK._INTERVAL has 74 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_INTDIST data=_INTERVAL force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._INTERVAL to EMWS1.PROF2_INTDIST.
NOTE: There were 74 observations read from the data set WORK._INTERVAL.
NOTE: 74 observations added.
NOTE: The data set EMWS1.PROF2_INTDIST has 179 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_STAT(KEEP=VARIABLE NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS);
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: There were 8 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   merge _tempStat _STAT;
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPSTAT.
NOTE: There were 8 observations read from the data set WORK._STAT.
NOTE: The data set WORK._TEMPSTAT has 10 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_tempStat;
MPRINT(SEGMENTSUMMARY):   by Rank;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPSTAT.
NOTE: The data set WORK._TEMPSTAT has 10 observations and 15 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_STATS data=_tempStat force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._TEMPSTAT to EMWS1.PROF2_STATS.
NOTE: There were 10 observations read from the data set WORK._TEMPSTAT.
NOTE: 10 observations added.
NOTE: The data set EMWS1.PROF2_STATS has 21 observations and 15 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(SEGMENTSUMMARY):   delete _segment Prof2_TMP _interval _class _tempStat ;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: The file WORK._SEGMENT (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PROF2_TMP (memtype=VIEW).
NOTE: Deleting WORK._INTERVAL (memtype=DATA).
NOTE: Deleting WORK._CLASS (memtype=DATA).
NOTE: Deleting WORK._TEMPSTAT (memtype=DATA).
MPRINT(SEGMENTSUMMARY):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   set EMWS1.Prof2_SELVARS;
MPRINT(SEGMENTSUMMARY):   where SegmentVariable="_SEGMENT_" and SegmentValue="5";
MPRINT(SEGMENTSUMMARY):   if Type eq 'I' then call symput('SEGVARS',symget('SEGVARS' ) !! ' ' !! trim(left(Variable))) ;
MPRINT(SEGMENTSUMMARY):   else call symput('SEGCLASS',symget('SEGCLASS' ) !! ' ' !! trim(left(Variable))) ;
MPRINT(SEGMENTSUMMARY):   run ;
 
NOTE: There were 5 observations read from the data set EMWS1.PROF2_SELVARS.
      WHERE (SegmentVariable='_SEGMENT_') and (SegmentValue='5');
NOTE: The data set WORK._TEMPSTAT has 5 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_tempStat;
MPRINT(SEGMENTSUMMARY):   by Variable;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMPSTAT.
NOTE: The data set WORK._TEMPSTAT has 5 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data Prof2_TMP / view=Prof2_TMP ;
MPRINT(SEGMENTSUMMARY):   set EMWS1.Clus2_TRAIN;
MPRINT(SEGMENTSUMMARY):   where _SEGMENT_ = 5;
NOTE: %INCLUDE (level 1) file X is file EMWS1.PROF2_INTERVAL.FORMAT.SOURCE.
30617     +format
30618     +CustomerMonetaryValue F1_.
30619     +IMP_GrossMonthlySalary F2_.
30620     +IMP_PremiumsinLOBHealth F3_.
30621     +IMP_PremiumsinLOBLife F4_.
30622     +IMP_PremiumsinLOBMotor F5_.
30623     +IMP_PremiumsinLOBWorkComp F6_.
30624     +IMP_REP_CustomerAge F7_.
30625     +PremiumsinLOBHousehold F8_.
30626     +TOTAL_PREMIUM F9_.
30627     +;
MPRINT(SEGMENTSUMMARY):   format CustomerMonetaryValue F1_. IMP_GrossMonthlySalary F2_. IMP_PremiumsinLOBHealth F3_. IMP_PremiumsinLOBLife F4_. IMP_PremiumsinLOBMotor F5_. IMP_PremiumsinLOBWorkComp F6_. IMP_REP_CustomerAge F7_. PremiumsinLOBHousehold F8_.
TOTAL_PREMIUM F9_. ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: DATA STEP view saved on file WORK.PROF2_TMP.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.17 seconds
 
 
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   put '%macro _vars;';
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thursday, December 31, 2015 01:05:50 PM,
      Last Modified=Thursday, December 31, 2015 01:05:53 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
30628     +%macro _vars;
30629     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(CLASS_PROFILE):   proc dmdb data=Prof2_TMP nonorm classout=_tempclass(rename=(NAME=VARIABLE LEVEL=VALUE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(CLASS_PROFILE):   class
MPRINT(CLASS_PROFILE):   IMP_HasChildren;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Records processed = 2480   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.20 seconds
 
NOTE: There were 2480 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=5;
NOTE: There were 2480 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._TEMPCLASS has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.25 seconds
      cpu time            0.23 seconds
 
 
MPRINT(CLASS_PROFILE):   proc sort data=_tempclass;
MPRINT(CLASS_PROFILE):   by VARIABLE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._TEMPCLASS has 2 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   data _CLASS;
MPRINT(CLASS_PROFILE):   label VARIABLE = "Variable";
MPRINT(CLASS_PROFILE):   label VALUE = "Value";
MPRINT(CLASS_PROFILE):   label COUNT = "Frequency Count";
MPRINT(CLASS_PROFILE):   label PERCENT = "Percent";
MPRINT(CLASS_PROFILE):   set _tempclass;
MPRINT(CLASS_PROFILE):   format COUNT;
MPRINT(CLASS_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._CLASS has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   proc means data=_CLASS noprint;
MPRINT(CLASS_PROFILE):   class VARIABLE;
MPRINT(CLASS_PROFILE):   var COUNT;
MPRINT(CLASS_PROFILE):   output out=_STAT N=NUMCAT;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._CLASS.
NOTE: The data set WORK._STAT has 2 observations and 4 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   data _STAT;
MPRINT(CLASS_PROFILE):   set _STAT;
MPRINT(CLASS_PROFILE):   where _TYPE_=1;
MPRINT(CLASS_PROFILE):   KEEP VARIABLE NUMCAT;
MPRINT(CLASS_PROFILE):   label NUMCAT = "Number of Levels";
MPRINT(CLASS_PROFILE):   format NUMCAT 8.;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 1 observations read from the data set WORK._STAT.
      WHERE _TYPE_=1;
NOTE: The data set WORK._STAT has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   proc datasets lib=work nolist;
MPRINT(CLASS_PROFILE):   delete _tempclass;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Deleting WORK._TEMPCLASS (memtype=DATA).
MPRINT(CLASS_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):  ;
MPRINT(SEGMENTSUMMARY):   data _CLASS;
MPRINT(SEGMENTSUMMARY):   length SegmentVariable $32 SegmentValue $200;
MPRINT(SEGMENTSUMMARY):   retain SegmentVariable "_SEGMENT_" SegmentValue "5";
MPRINT(SEGMENTSUMMARY):   label Variable = "Variable" value = "Value" count = "Frequency Count" percent = "Percent";
MPRINT(SEGMENTSUMMARY):   set _CLASS;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 2 observations read from the data set WORK._CLASS.
NOTE: The data set WORK._CLASS has 2 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_CLASSDIST data=_CLASS force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._CLASS to EMWS1.PROF2_CLASSDIST.
WARNING: Variable value has different lengths on BASE and DATA files (BASE 15 DATA 12).
NOTE: There were 2 observations read from the data set WORK._CLASS.
NOTE: 2 observations added.
NOTE: The data set EMWS1.PROF2_CLASSDIST has 14 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   merge _tempStat _STAT;
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMPSTAT.
NOTE: There were 1 observations read from the data set WORK._STAT.
NOTE: The data set WORK._TEMPSTAT has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Prof2: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thursday, December 31, 2015 01:05:50 PM,
      Last Modified=Thursday, December 31, 2015 01:05:54 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
30630     +%macro _vars;
30631     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _BOUNDS;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._BOUNDS (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data=Prof2_TMP(obs=1000000) varout=_STAT(rename=(NAME=VARIABLE));
MPRINT(VAR_PROFILE):   var
MPRINT(VAR_PROFILE):   IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBMotor IMP_REP_CustomerAge;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 2480   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
 
NOTE: There were 2480 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=5;
NOTE: There were 2480 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._STAT has 4 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.24 seconds
      cpu time            0.23 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_STAT;
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 4 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 4 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets library=WORK nolist;
MPRINT(VAR_PROFILE):   modify _STAT;
MPRINT(VAR_PROFILE):   label NMISS = "Missing";
MPRINT(VAR_PROFILE):   label MIN = "Minimum";
MPRINT(VAR_PROFILE):   label MAX = "Maximum";
MPRINT(VAR_PROFILE):   label MEAN = "Mean";
MPRINT(VAR_PROFILE):   label STD = "Standard Deviation";
MPRINT(VAR_PROFILE):   label SKEWNESS = "Skewness";
MPRINT(VAR_PROFILE):   label KURTOSIS = "Kurtosis";
MPRINT(VAR_PROFILE):   run;
 
NOTE: MODIFY was successful for WORK._STAT.DATA.
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data = Prof2_TMP(obs=1000000) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(VAR_PROFILE):   class
MPRINT(VAR_PROFILE):   IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBMotor IMP_REP_CustomerAge;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 2480   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
 
NOTE: There were 2480 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=5;
NOTE: There were 2480 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._TEMPTAB has 35 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.23 seconds
      cpu time            0.23 seconds
 
 
MPRINT(VAR_PROFILE):   data _INTERVAL;
MPRINT(VAR_PROFILE):   label VALUE = "Value";
MPRINT(VAR_PROFILE):   label VARIABLE = "Variable";
MPRINT(VAR_PROFILE):   label COUNT = "Frequency Count";
MPRINT(VAR_PROFILE):   label PERCENT = "Percent";
MPRINT(VAR_PROFILE):   set _temptab;
MPRINT(VAR_PROFILE):   format VALUE 12.3 count;
MPRINT(VAR_PROFILE):   value = inputn(level, 'best12.');
MPRINT(VAR_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 35 observations read from the data set WORK._TEMPTAB.
NOTE: The data set WORK._INTERVAL has 35 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._BINNEDDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK._MINMAXDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._TEMPTAB (memtype=DATA).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):  ;
MPRINT(SEGMENTSUMMARY):   data _INTERVAL;
MPRINT(SEGMENTSUMMARY):   length SegmentVariable $32 SegmentValue $200;
MPRINT(SEGMENTSUMMARY):   retain SegmentVariable "_SEGMENT_" SegmentValue "5";
MPRINT(SEGMENTSUMMARY):   label Variable = "Variable" value = "Value" count = "Frequency Count" percent = "Percent";
MPRINT(SEGMENTSUMMARY):   set _INTERVAL;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 35 observations read from the data set WORK._INTERVAL.
NOTE: The data set WORK._INTERVAL has 35 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_INTDIST data=_INTERVAL force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._INTERVAL to EMWS1.PROF2_INTDIST.
NOTE: There were 35 observations read from the data set WORK._INTERVAL.
NOTE: 35 observations added.
NOTE: The data set EMWS1.PROF2_INTDIST has 214 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_STAT(KEEP=VARIABLE NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS);
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: There were 4 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 4 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   merge _tempStat _STAT;
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMPSTAT.
NOTE: There were 4 observations read from the data set WORK._STAT.
NOTE: The data set WORK._TEMPSTAT has 5 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_tempStat;
MPRINT(SEGMENTSUMMARY):   by Rank;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMPSTAT.
NOTE: The data set WORK._TEMPSTAT has 5 observations and 15 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_STATS data=_tempStat force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._TEMPSTAT to EMWS1.PROF2_STATS.
NOTE: There were 5 observations read from the data set WORK._TEMPSTAT.
NOTE: 5 observations added.
NOTE: The data set EMWS1.PROF2_STATS has 26 observations and 15 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(SEGMENTSUMMARY):   delete _segment Prof2_TMP _interval _class _tempStat ;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: The file WORK._SEGMENT (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PROF2_TMP (memtype=VIEW).
NOTE: Deleting WORK._INTERVAL (memtype=DATA).
NOTE: Deleting WORK._CLASS (memtype=DATA).
NOTE: Deleting WORK._TEMPSTAT (memtype=DATA).
MPRINT(SEGMENTSUMMARY):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   set EMWS1.Prof2_SELVARS;
MPRINT(SEGMENTSUMMARY):   where SegmentVariable="_SEGMENT_" and SegmentValue="3";
MPRINT(SEGMENTSUMMARY):   if Type eq 'I' then call symput('SEGVARS',symget('SEGVARS' ) !! ' ' !! trim(left(Variable))) ;
MPRINT(SEGMENTSUMMARY):   else call symput('SEGCLASS',symget('SEGCLASS' ) !! ' ' !! trim(left(Variable))) ;
MPRINT(SEGMENTSUMMARY):   run ;
 
NOTE: There were 5 observations read from the data set EMWS1.PROF2_SELVARS.
      WHERE (SegmentVariable='_SEGMENT_') and (SegmentValue='3');
NOTE: The data set WORK._TEMPSTAT has 5 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_tempStat;
MPRINT(SEGMENTSUMMARY):   by Variable;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMPSTAT.
NOTE: The data set WORK._TEMPSTAT has 5 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data Prof2_TMP / view=Prof2_TMP ;
MPRINT(SEGMENTSUMMARY):   set EMWS1.Clus2_TRAIN;
MPRINT(SEGMENTSUMMARY):   where _SEGMENT_ = 3;
NOTE: %INCLUDE (level 1) file X is file EMWS1.PROF2_INTERVAL.FORMAT.SOURCE.
30632     +format
30633     +CustomerMonetaryValue F1_.
30634     +IMP_GrossMonthlySalary F2_.
30635     +IMP_PremiumsinLOBHealth F3_.
30636     +IMP_PremiumsinLOBLife F4_.
30637     +IMP_PremiumsinLOBMotor F5_.
30638     +IMP_PremiumsinLOBWorkComp F6_.
30639     +IMP_REP_CustomerAge F7_.
30640     +PremiumsinLOBHousehold F8_.
30641     +TOTAL_PREMIUM F9_.
30642     +;
MPRINT(SEGMENTSUMMARY):   format CustomerMonetaryValue F1_. IMP_GrossMonthlySalary F2_. IMP_PremiumsinLOBHealth F3_. IMP_PremiumsinLOBLife F4_. IMP_PremiumsinLOBMotor F5_. IMP_PremiumsinLOBWorkComp F6_. IMP_REP_CustomerAge F7_. PremiumsinLOBHousehold F8_.
TOTAL_PREMIUM F9_. ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: DATA STEP view saved on file WORK.PROF2_TMP.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.18 seconds
 
 
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   put '%macro _vars;';
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thursday, December 31, 2015 01:05:50 PM,
      Last Modified=Thursday, December 31, 2015 01:05:54 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
30643     +%macro _vars;
30644     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(CLASS_PROFILE):   proc dmdb data=Prof2_TMP nonorm classout=_tempclass(rename=(NAME=VARIABLE LEVEL=VALUE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(CLASS_PROFILE):   class
MPRINT(CLASS_PROFILE):   IMP_EducationalDegree IMP_HasChildren;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Records processed = 1878   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.21 seconds
 
NOTE: There were 1878 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=3;
NOTE: There were 1878 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._TEMPCLASS has 5 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.26 seconds
      cpu time            0.23 seconds
 
 
MPRINT(CLASS_PROFILE):   proc sort data=_tempclass;
MPRINT(CLASS_PROFILE):   by VARIABLE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._TEMPCLASS has 5 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   data _CLASS;
MPRINT(CLASS_PROFILE):   label VARIABLE = "Variable";
MPRINT(CLASS_PROFILE):   label VALUE = "Value";
MPRINT(CLASS_PROFILE):   label COUNT = "Frequency Count";
MPRINT(CLASS_PROFILE):   label PERCENT = "Percent";
MPRINT(CLASS_PROFILE):   set _tempclass;
MPRINT(CLASS_PROFILE):   format COUNT;
MPRINT(CLASS_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._CLASS has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   proc means data=_CLASS noprint;
MPRINT(CLASS_PROFILE):   class VARIABLE;
MPRINT(CLASS_PROFILE):   var COUNT;
MPRINT(CLASS_PROFILE):   output out=_STAT N=NUMCAT;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 5 observations read from the data set WORK._CLASS.
NOTE: The data set WORK._STAT has 3 observations and 4 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   data _STAT;
MPRINT(CLASS_PROFILE):   set _STAT;
MPRINT(CLASS_PROFILE):   where _TYPE_=1;
MPRINT(CLASS_PROFILE):   KEEP VARIABLE NUMCAT;
MPRINT(CLASS_PROFILE):   label NUMCAT = "Number of Levels";
MPRINT(CLASS_PROFILE):   format NUMCAT 8.;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._STAT.
      WHERE _TYPE_=1;
NOTE: The data set WORK._STAT has 2 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   proc datasets lib=work nolist;
MPRINT(CLASS_PROFILE):   delete _tempclass;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Deleting WORK._TEMPCLASS (memtype=DATA).
MPRINT(CLASS_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):  ;
MPRINT(SEGMENTSUMMARY):   data _CLASS;
MPRINT(SEGMENTSUMMARY):   length SegmentVariable $32 SegmentValue $200;
MPRINT(SEGMENTSUMMARY):   retain SegmentVariable "_SEGMENT_" SegmentValue "3";
MPRINT(SEGMENTSUMMARY):   label Variable = "Variable" value = "Value" count = "Frequency Count" percent = "Percent";
MPRINT(SEGMENTSUMMARY):   set _CLASS;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 5 observations read from the data set WORK._CLASS.
NOTE: The data set WORK._CLASS has 5 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_CLASSDIST data=_CLASS force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._CLASS to EMWS1.PROF2_CLASSDIST.
NOTE: There were 5 observations read from the data set WORK._CLASS.
NOTE: 5 observations added.
NOTE: The data set EMWS1.PROF2_CLASSDIST has 19 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   merge _tempStat _STAT;
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMPSTAT.
NOTE: There were 2 observations read from the data set WORK._STAT.
NOTE: The data set WORK._TEMPSTAT has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Prof2: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thursday, December 31, 2015 01:05:50 PM,
      Last Modified=Thursday, December 31, 2015 01:05:55 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
30645     +%macro _vars;
30646     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _BOUNDS;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._BOUNDS (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data=Prof2_TMP(obs=1000000) varout=_STAT(rename=(NAME=VARIABLE));
MPRINT(VAR_PROFILE):   var
MPRINT(VAR_PROFILE):   IMP_GrossMonthlySalary IMP_PremiumsinLOBMotor IMP_REP_CustomerAge;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 1878   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.20 seconds
 
NOTE: There were 1878 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=3;
NOTE: There were 1878 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._STAT has 3 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.24 seconds
      cpu time            0.21 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_STAT;
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 3 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 3 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets library=WORK nolist;
MPRINT(VAR_PROFILE):   modify _STAT;
MPRINT(VAR_PROFILE):   label NMISS = "Missing";
MPRINT(VAR_PROFILE):   label MIN = "Minimum";
MPRINT(VAR_PROFILE):   label MAX = "Maximum";
MPRINT(VAR_PROFILE):   label MEAN = "Mean";
MPRINT(VAR_PROFILE):   label STD = "Standard Deviation";
MPRINT(VAR_PROFILE):   label SKEWNESS = "Skewness";
MPRINT(VAR_PROFILE):   label KURTOSIS = "Kurtosis";
MPRINT(VAR_PROFILE):   run;
 
NOTE: MODIFY was successful for WORK._STAT.DATA.
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data = Prof2_TMP(obs=1000000) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(VAR_PROFILE):   class
MPRINT(VAR_PROFILE):   IMP_GrossMonthlySalary IMP_PremiumsinLOBMotor IMP_REP_CustomerAge;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 1878   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
 
NOTE: There were 1878 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=3;
NOTE: There were 1878 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._TEMPTAB has 25 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
 
 
MPRINT(VAR_PROFILE):   data _INTERVAL;
MPRINT(VAR_PROFILE):   label VALUE = "Value";
MPRINT(VAR_PROFILE):   label VARIABLE = "Variable";
MPRINT(VAR_PROFILE):   label COUNT = "Frequency Count";
MPRINT(VAR_PROFILE):   label PERCENT = "Percent";
MPRINT(VAR_PROFILE):   set _temptab;
MPRINT(VAR_PROFILE):   format VALUE 12.3 count;
MPRINT(VAR_PROFILE):   value = inputn(level, 'best12.');
MPRINT(VAR_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 25 observations read from the data set WORK._TEMPTAB.
NOTE: The data set WORK._INTERVAL has 25 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._BINNEDDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK._MINMAXDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._TEMPTAB (memtype=DATA).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):  ;
MPRINT(SEGMENTSUMMARY):   data _INTERVAL;
MPRINT(SEGMENTSUMMARY):   length SegmentVariable $32 SegmentValue $200;
MPRINT(SEGMENTSUMMARY):   retain SegmentVariable "_SEGMENT_" SegmentValue "3";
MPRINT(SEGMENTSUMMARY):   label Variable = "Variable" value = "Value" count = "Frequency Count" percent = "Percent";
MPRINT(SEGMENTSUMMARY):   set _INTERVAL;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 25 observations read from the data set WORK._INTERVAL.
NOTE: The data set WORK._INTERVAL has 25 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_INTDIST data=_INTERVAL force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._INTERVAL to EMWS1.PROF2_INTDIST.
NOTE: There were 25 observations read from the data set WORK._INTERVAL.
NOTE: 25 observations added.
NOTE: The data set EMWS1.PROF2_INTDIST has 239 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_STAT(KEEP=VARIABLE NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS);
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: There were 3 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 3 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   merge _tempStat _STAT;
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMPSTAT.
NOTE: There were 3 observations read from the data set WORK._STAT.
NOTE: The data set WORK._TEMPSTAT has 5 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_tempStat;
MPRINT(SEGMENTSUMMARY):   by Rank;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMPSTAT.
NOTE: The data set WORK._TEMPSTAT has 5 observations and 15 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_STATS data=_tempStat force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._TEMPSTAT to EMWS1.PROF2_STATS.
NOTE: There were 5 observations read from the data set WORK._TEMPSTAT.
NOTE: 5 observations added.
NOTE: The data set EMWS1.PROF2_STATS has 31 observations and 15 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(SEGMENTSUMMARY):   delete _segment Prof2_TMP _interval _class _tempStat ;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: The file WORK._SEGMENT (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PROF2_TMP (memtype=VIEW).
NOTE: Deleting WORK._INTERVAL (memtype=DATA).
NOTE: Deleting WORK._CLASS (memtype=DATA).
NOTE: Deleting WORK._TEMPSTAT (memtype=DATA).
MPRINT(SEGMENTSUMMARY):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   set EMWS1.Prof2_SELVARS;
MPRINT(SEGMENTSUMMARY):   where SegmentVariable="_SEGMENT_" and SegmentValue="2";
MPRINT(SEGMENTSUMMARY):   if Type eq 'I' then call symput('SEGVARS',symget('SEGVARS' ) !! ' ' !! trim(left(Variable))) ;
MPRINT(SEGMENTSUMMARY):   else call symput('SEGCLASS',symget('SEGCLASS' ) !! ' ' !! trim(left(Variable))) ;
MPRINT(SEGMENTSUMMARY):   run ;
 
NOTE: There were 7 observations read from the data set EMWS1.PROF2_SELVARS.
      WHERE (SegmentVariable='_SEGMENT_') and (SegmentValue='2');
NOTE: The data set WORK._TEMPSTAT has 7 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_tempStat;
MPRINT(SEGMENTSUMMARY):   by Variable;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 7 observations read from the data set WORK._TEMPSTAT.
NOTE: The data set WORK._TEMPSTAT has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data Prof2_TMP / view=Prof2_TMP ;
MPRINT(SEGMENTSUMMARY):   set EMWS1.Clus2_TRAIN;
MPRINT(SEGMENTSUMMARY):   where _SEGMENT_ = 2;
NOTE: %INCLUDE (level 1) file X is file EMWS1.PROF2_INTERVAL.FORMAT.SOURCE.
30647     +format
30648     +CustomerMonetaryValue F1_.
30649     +IMP_GrossMonthlySalary F2_.
30650     +IMP_PremiumsinLOBHealth F3_.
30651     +IMP_PremiumsinLOBLife F4_.
30652     +IMP_PremiumsinLOBMotor F5_.
30653     +IMP_PremiumsinLOBWorkComp F6_.
30654     +IMP_REP_CustomerAge F7_.
30655     +PremiumsinLOBHousehold F8_.
30656     +TOTAL_PREMIUM F9_.
30657     +;
MPRINT(SEGMENTSUMMARY):   format CustomerMonetaryValue F1_. IMP_GrossMonthlySalary F2_. IMP_PremiumsinLOBHealth F3_. IMP_PremiumsinLOBLife F4_. IMP_PremiumsinLOBMotor F5_. IMP_PremiumsinLOBWorkComp F6_. IMP_REP_CustomerAge F7_. PremiumsinLOBHousehold F8_.
TOTAL_PREMIUM F9_. ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: DATA STEP view saved on file WORK.PROF2_TMP.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.15 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
 
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   put '%macro _vars;';
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thursday, December 31, 2015 01:05:50 PM,
      Last Modified=Thursday, December 31, 2015 01:05:55 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
30658     +%macro _vars;
30659     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(CLASS_PROFILE):   proc dmdb data=Prof2_TMP nonorm classout=_tempclass(rename=(NAME=VARIABLE LEVEL=VALUE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(CLASS_PROFILE):   class
MPRINT(CLASS_PROFILE):   IMP_HasChildren;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Records processed = 1849   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
 
NOTE: There were 1849 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=2;
NOTE: There were 1849 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._TEMPCLASS has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.29 seconds
      cpu time            0.29 seconds
 
 
MPRINT(CLASS_PROFILE):   proc sort data=_tempclass;
MPRINT(CLASS_PROFILE):   by VARIABLE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._TEMPCLASS has 2 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   data _CLASS;
MPRINT(CLASS_PROFILE):   label VARIABLE = "Variable";
MPRINT(CLASS_PROFILE):   label VALUE = "Value";
MPRINT(CLASS_PROFILE):   label COUNT = "Frequency Count";
MPRINT(CLASS_PROFILE):   label PERCENT = "Percent";
MPRINT(CLASS_PROFILE):   set _tempclass;
MPRINT(CLASS_PROFILE):   format COUNT;
MPRINT(CLASS_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._CLASS has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   proc means data=_CLASS noprint;
MPRINT(CLASS_PROFILE):   class VARIABLE;
MPRINT(CLASS_PROFILE):   var COUNT;
MPRINT(CLASS_PROFILE):   output out=_STAT N=NUMCAT;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._CLASS.
NOTE: The data set WORK._STAT has 2 observations and 4 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   data _STAT;
MPRINT(CLASS_PROFILE):   set _STAT;
MPRINT(CLASS_PROFILE):   where _TYPE_=1;
MPRINT(CLASS_PROFILE):   KEEP VARIABLE NUMCAT;
MPRINT(CLASS_PROFILE):   label NUMCAT = "Number of Levels";
MPRINT(CLASS_PROFILE):   format NUMCAT 8.;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 1 observations read from the data set WORK._STAT.
      WHERE _TYPE_=1;
NOTE: The data set WORK._STAT has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   proc datasets lib=work nolist;
MPRINT(CLASS_PROFILE):   delete _tempclass;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Deleting WORK._TEMPCLASS (memtype=DATA).
MPRINT(CLASS_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):  ;
MPRINT(SEGMENTSUMMARY):   data _CLASS;
MPRINT(SEGMENTSUMMARY):   length SegmentVariable $32 SegmentValue $200;
MPRINT(SEGMENTSUMMARY):   retain SegmentVariable "_SEGMENT_" SegmentValue "2";
MPRINT(SEGMENTSUMMARY):   label Variable = "Variable" value = "Value" count = "Frequency Count" percent = "Percent";
MPRINT(SEGMENTSUMMARY):   set _CLASS;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 2 observations read from the data set WORK._CLASS.
NOTE: The data set WORK._CLASS has 2 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_CLASSDIST data=_CLASS force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._CLASS to EMWS1.PROF2_CLASSDIST.
WARNING: Variable value has different lengths on BASE and DATA files (BASE 15 DATA 12).
NOTE: There were 2 observations read from the data set WORK._CLASS.
NOTE: 2 observations added.
NOTE: The data set EMWS1.PROF2_CLASSDIST has 21 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   merge _tempStat _STAT;
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 7 observations read from the data set WORK._TEMPSTAT.
NOTE: There were 1 observations read from the data set WORK._STAT.
NOTE: The data set WORK._TEMPSTAT has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Prof2: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thursday, December 31, 2015 01:05:50 PM,
      Last Modified=Thursday, December 31, 2015 01:05:56 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
30660     +%macro _vars;
30661     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _BOUNDS;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._BOUNDS (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data=Prof2_TMP(obs=1000000) varout=_STAT(rename=(NAME=VARIABLE));
MPRINT(VAR_PROFILE):   var
MPRINT(VAR_PROFILE):   IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 1849   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.18 seconds
 
NOTE: There were 1849 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=2;
NOTE: There were 1849 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._STAT has 6 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.23 seconds
      cpu time            0.21 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_STAT;
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 6 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 6 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets library=WORK nolist;
MPRINT(VAR_PROFILE):   modify _STAT;
MPRINT(VAR_PROFILE):   label NMISS = "Missing";
MPRINT(VAR_PROFILE):   label MIN = "Minimum";
MPRINT(VAR_PROFILE):   label MAX = "Maximum";
MPRINT(VAR_PROFILE):   label MEAN = "Mean";
MPRINT(VAR_PROFILE):   label STD = "Standard Deviation";
MPRINT(VAR_PROFILE):   label SKEWNESS = "Skewness";
MPRINT(VAR_PROFILE):   label KURTOSIS = "Kurtosis";
MPRINT(VAR_PROFILE):   run;
 
NOTE: MODIFY was successful for WORK._STAT.DATA.
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data = Prof2_TMP(obs=1000000) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(VAR_PROFILE):   class
MPRINT(VAR_PROFILE):   IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 1849   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
 
NOTE: There were 1849 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=2;
NOTE: There were 1849 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._TEMPTAB has 46 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
 
 
MPRINT(VAR_PROFILE):   data _INTERVAL;
MPRINT(VAR_PROFILE):   label VALUE = "Value";
MPRINT(VAR_PROFILE):   label VARIABLE = "Variable";
MPRINT(VAR_PROFILE):   label COUNT = "Frequency Count";
MPRINT(VAR_PROFILE):   label PERCENT = "Percent";
MPRINT(VAR_PROFILE):   set _temptab;
MPRINT(VAR_PROFILE):   format VALUE 12.3 count;
MPRINT(VAR_PROFILE):   value = inputn(level, 'best12.');
MPRINT(VAR_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 46 observations read from the data set WORK._TEMPTAB.
NOTE: The data set WORK._INTERVAL has 46 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._BINNEDDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK._MINMAXDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._TEMPTAB (memtype=DATA).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):  ;
MPRINT(SEGMENTSUMMARY):   data _INTERVAL;
MPRINT(SEGMENTSUMMARY):   length SegmentVariable $32 SegmentValue $200;
MPRINT(SEGMENTSUMMARY):   retain SegmentVariable "_SEGMENT_" SegmentValue "2";
MPRINT(SEGMENTSUMMARY):   label Variable = "Variable" value = "Value" count = "Frequency Count" percent = "Percent";
MPRINT(SEGMENTSUMMARY):   set _INTERVAL;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 46 observations read from the data set WORK._INTERVAL.
NOTE: The data set WORK._INTERVAL has 46 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_INTDIST data=_INTERVAL force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._INTERVAL to EMWS1.PROF2_INTDIST.
NOTE: There were 46 observations read from the data set WORK._INTERVAL.
NOTE: 46 observations added.
NOTE: The data set EMWS1.PROF2_INTDIST has 285 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_STAT(KEEP=VARIABLE NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS);
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: There were 6 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 6 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   merge _tempStat _STAT;
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 7 observations read from the data set WORK._TEMPSTAT.
NOTE: There were 6 observations read from the data set WORK._STAT.
NOTE: The data set WORK._TEMPSTAT has 7 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_tempStat;
MPRINT(SEGMENTSUMMARY):   by Rank;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 7 observations read from the data set WORK._TEMPSTAT.
NOTE: The data set WORK._TEMPSTAT has 7 observations and 15 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_STATS data=_tempStat force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._TEMPSTAT to EMWS1.PROF2_STATS.
NOTE: There were 7 observations read from the data set WORK._TEMPSTAT.
NOTE: 7 observations added.
NOTE: The data set EMWS1.PROF2_STATS has 38 observations and 15 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(SEGMENTSUMMARY):   delete _segment Prof2_TMP _interval _class _tempStat ;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: The file WORK._SEGMENT (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PROF2_TMP (memtype=VIEW).
NOTE: Deleting WORK._INTERVAL (memtype=DATA).
NOTE: Deleting WORK._CLASS (memtype=DATA).
NOTE: Deleting WORK._TEMPSTAT (memtype=DATA).
MPRINT(SEGMENTSUMMARY):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   set EMWS1.Prof2_SELVARS;
MPRINT(SEGMENTSUMMARY):   where SegmentVariable="_SEGMENT_" and SegmentValue="1";
MPRINT(SEGMENTSUMMARY):   if Type eq 'I' then call symput('SEGVARS',symget('SEGVARS' ) !! ' ' !! trim(left(Variable))) ;
MPRINT(SEGMENTSUMMARY):   else call symput('SEGCLASS',symget('SEGCLASS' ) !! ' ' !! trim(left(Variable))) ;
MPRINT(SEGMENTSUMMARY):   run ;
 
NOTE: There were 9 observations read from the data set EMWS1.PROF2_SELVARS.
      WHERE (SegmentVariable='_SEGMENT_') and (SegmentValue='1');
NOTE: The data set WORK._TEMPSTAT has 9 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_tempStat;
MPRINT(SEGMENTSUMMARY):   by Variable;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 9 observations read from the data set WORK._TEMPSTAT.
NOTE: The data set WORK._TEMPSTAT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data Prof2_TMP / view=Prof2_TMP ;
MPRINT(SEGMENTSUMMARY):   set EMWS1.Clus2_TRAIN;
MPRINT(SEGMENTSUMMARY):   where _SEGMENT_ = 1;
NOTE: %INCLUDE (level 1) file X is file EMWS1.PROF2_INTERVAL.FORMAT.SOURCE.
30662     +format
30663     +CustomerMonetaryValue F1_.
30664     +IMP_GrossMonthlySalary F2_.
30665     +IMP_PremiumsinLOBHealth F3_.
30666     +IMP_PremiumsinLOBLife F4_.
30667     +IMP_PremiumsinLOBMotor F5_.
30668     +IMP_PremiumsinLOBWorkComp F6_.
30669     +IMP_REP_CustomerAge F7_.
30670     +PremiumsinLOBHousehold F8_.
30671     +TOTAL_PREMIUM F9_.
30672     +;
MPRINT(SEGMENTSUMMARY):   format CustomerMonetaryValue F1_. IMP_GrossMonthlySalary F2_. IMP_PremiumsinLOBHealth F3_. IMP_PremiumsinLOBLife F4_. IMP_PremiumsinLOBMotor F5_. IMP_PremiumsinLOBWorkComp F6_. IMP_REP_CustomerAge F7_. PremiumsinLOBHousehold F8_.
TOTAL_PREMIUM F9_. ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: DATA STEP view saved on file WORK.PROF2_TMP.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
 
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   put '%macro _vars;';
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thursday, December 31, 2015 01:05:50 PM,
      Last Modified=Thursday, December 31, 2015 01:05:57 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
30673     +%macro _vars;
30674     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(CLASS_PROFILE):   proc dmdb data=Prof2_TMP nonorm classout=_tempclass(rename=(NAME=VARIABLE LEVEL=VALUE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(CLASS_PROFILE):   class
MPRINT(CLASS_PROFILE):   IMP_EducationalDegree;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Records processed = 1184   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.23 seconds
 
NOTE: There were 1184 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=1;
NOTE: There were 1184 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._TEMPCLASS has 3 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.24 seconds
      cpu time            0.25 seconds
 
 
MPRINT(CLASS_PROFILE):   proc sort data=_tempclass;
MPRINT(CLASS_PROFILE):   by VARIABLE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 3 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._TEMPCLASS has 3 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   data _CLASS;
MPRINT(CLASS_PROFILE):   label VARIABLE = "Variable";
MPRINT(CLASS_PROFILE):   label VALUE = "Value";
MPRINT(CLASS_PROFILE):   label COUNT = "Frequency Count";
MPRINT(CLASS_PROFILE):   label PERCENT = "Percent";
MPRINT(CLASS_PROFILE):   set _tempclass;
MPRINT(CLASS_PROFILE):   format COUNT;
MPRINT(CLASS_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 3 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._CLASS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   proc means data=_CLASS noprint;
MPRINT(CLASS_PROFILE):   class VARIABLE;
MPRINT(CLASS_PROFILE):   var COUNT;
MPRINT(CLASS_PROFILE):   output out=_STAT N=NUMCAT;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 3 observations read from the data set WORK._CLASS.
NOTE: The data set WORK._STAT has 2 observations and 4 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   data _STAT;
MPRINT(CLASS_PROFILE):   set _STAT;
MPRINT(CLASS_PROFILE):   where _TYPE_=1;
MPRINT(CLASS_PROFILE):   KEEP VARIABLE NUMCAT;
MPRINT(CLASS_PROFILE):   label NUMCAT = "Number of Levels";
MPRINT(CLASS_PROFILE):   format NUMCAT 8.;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 1 observations read from the data set WORK._STAT.
      WHERE _TYPE_=1;
NOTE: The data set WORK._STAT has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   proc datasets lib=work nolist;
MPRINT(CLASS_PROFILE):   delete _tempclass;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Deleting WORK._TEMPCLASS (memtype=DATA).
MPRINT(CLASS_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):  ;
MPRINT(SEGMENTSUMMARY):   data _CLASS;
MPRINT(SEGMENTSUMMARY):   length SegmentVariable $32 SegmentValue $200;
MPRINT(SEGMENTSUMMARY):   retain SegmentVariable "_SEGMENT_" SegmentValue "1";
MPRINT(SEGMENTSUMMARY):   label Variable = "Variable" value = "Value" count = "Frequency Count" percent = "Percent";
MPRINT(SEGMENTSUMMARY):   set _CLASS;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 3 observations read from the data set WORK._CLASS.
NOTE: The data set WORK._CLASS has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_CLASSDIST data=_CLASS force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._CLASS to EMWS1.PROF2_CLASSDIST.
NOTE: There were 3 observations read from the data set WORK._CLASS.
NOTE: 3 observations added.
NOTE: The data set EMWS1.PROF2_CLASSDIST has 24 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   merge _tempStat _STAT;
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 9 observations read from the data set WORK._TEMPSTAT.
NOTE: There were 1 observations read from the data set WORK._STAT.
NOTE: The data set WORK._TEMPSTAT has 9 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Prof2: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thursday, December 31, 2015 01:05:50 PM,
      Last Modified=Thursday, December 31, 2015 01:05:58 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD3464_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
30675     +%macro _vars;
30676     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _BOUNDS;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._BOUNDS (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data=Prof2_TMP(obs=1000000) varout=_STAT(rename=(NAME=VARIABLE));
MPRINT(VAR_PROFILE):   var
MPRINT(VAR_PROFILE):   CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge PremiumsinLOBHousehold TOTAL_PREMIUM;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 1184   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.18 seconds
 
NOTE: There were 1184 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=1;
NOTE: There were 1184 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._STAT has 8 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.23 seconds
      cpu time            0.20 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_STAT;
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 8 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets library=WORK nolist;
MPRINT(VAR_PROFILE):   modify _STAT;
MPRINT(VAR_PROFILE):   label NMISS = "Missing";
MPRINT(VAR_PROFILE):   label MIN = "Minimum";
MPRINT(VAR_PROFILE):   label MAX = "Maximum";
MPRINT(VAR_PROFILE):   label MEAN = "Mean";
MPRINT(VAR_PROFILE):   label STD = "Standard Deviation";
MPRINT(VAR_PROFILE):   label SKEWNESS = "Skewness";
MPRINT(VAR_PROFILE):   label KURTOSIS = "Kurtosis";
MPRINT(VAR_PROFILE):   run;
 
NOTE: MODIFY was successful for WORK._STAT.DATA.
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data = Prof2_TMP(obs=1000000) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(VAR_PROFILE):   class
MPRINT(VAR_PROFILE):   CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge PremiumsinLOBHousehold TOTAL_PREMIUM;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 1184   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.PROF2_TMP.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.23 seconds
 
NOTE: There were 1184 observations read from the data set EMWS1.CLUS2_TRAIN.
      WHERE _SEGMENT_=1;
NOTE: There were 1184 observations read from the data set WORK.PROF2_TMP.
NOTE: The data set WORK._TEMPTAB has 81 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.23 seconds
      cpu time            0.25 seconds
 
 
MPRINT(VAR_PROFILE):   data _INTERVAL;
MPRINT(VAR_PROFILE):   label VALUE = "Value";
MPRINT(VAR_PROFILE):   label VARIABLE = "Variable";
MPRINT(VAR_PROFILE):   label COUNT = "Frequency Count";
MPRINT(VAR_PROFILE):   label PERCENT = "Percent";
MPRINT(VAR_PROFILE):   set _temptab;
MPRINT(VAR_PROFILE):   format VALUE 12.3 count;
MPRINT(VAR_PROFILE):   value = inputn(level, 'best12.');
MPRINT(VAR_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 81 observations read from the data set WORK._TEMPTAB.
NOTE: The data set WORK._INTERVAL has 81 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._BINNEDDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: The file WORK._MINMAXDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._TEMPTAB (memtype=DATA).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):  ;
MPRINT(SEGMENTSUMMARY):   data _INTERVAL;
MPRINT(SEGMENTSUMMARY):   length SegmentVariable $32 SegmentValue $200;
MPRINT(SEGMENTSUMMARY):   retain SegmentVariable "_SEGMENT_" SegmentValue "1";
MPRINT(SEGMENTSUMMARY):   label Variable = "Variable" value = "Value" count = "Frequency Count" percent = "Percent";
MPRINT(SEGMENTSUMMARY):   set _INTERVAL;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 81 observations read from the data set WORK._INTERVAL.
NOTE: The data set WORK._INTERVAL has 81 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_INTDIST data=_INTERVAL force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._INTERVAL to EMWS1.PROF2_INTDIST.
NOTE: There were 81 observations read from the data set WORK._INTERVAL.
NOTE: 81 observations added.
NOTE: The data set EMWS1.PROF2_INTDIST has 366 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_STAT(KEEP=VARIABLE NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS);
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: There were 8 observations read from the data set WORK._STAT.
NOTE: The data set WORK._STAT has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   data _tempStat;
MPRINT(SEGMENTSUMMARY):   merge _tempStat _STAT;
MPRINT(SEGMENTSUMMARY):   by VARIABLE;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 9 observations read from the data set WORK._TEMPSTAT.
NOTE: There were 8 observations read from the data set WORK._STAT.
NOTE: The data set WORK._TEMPSTAT has 9 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc sort data=_tempStat;
MPRINT(SEGMENTSUMMARY):   by Rank;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: There were 9 observations read from the data set WORK._TEMPSTAT.
NOTE: The data set WORK._TEMPSTAT has 9 observations and 15 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc append base=EMWS1.Prof2_STATS data=_tempStat force;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: Appending WORK._TEMPSTAT to EMWS1.PROF2_STATS.
NOTE: There were 9 observations read from the data set WORK._TEMPSTAT.
NOTE: 9 observations added.
NOTE: The data set EMWS1.PROF2_STATS has 47 observations and 15 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SEGMENTSUMMARY):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(SEGMENTSUMMARY):   delete _segment Prof2_TMP _interval _class _tempStat ;
MPRINT(SEGMENTSUMMARY):   run;
 
NOTE: The file WORK._SEGMENT (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PROF2_TMP (memtype=VIEW).
NOTE: Deleting WORK._INTERVAL (memtype=DATA).
NOTE: Deleting WORK._CLASS (memtype=DATA).
NOTE: Deleting WORK._TEMPSTAT (memtype=DATA).
MPRINT(SEGMENTSUMMARY):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(TRAIN):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   data EMWS1.Prof2_INTDIST;
MPRINT(TRAIN):   set EMWS1.Prof2_INTDIST;
MPRINT(TRAIN):   label SegmentVariable = "Segment Variable" SegmentValue = "Segment Value" Color = "Color";
MPRINT(TRAIN):   if SegmentVariable = '_OVERALL_' then Color = 1;
MPRINT(TRAIN):   else Color = 0;
MPRINT(TRAIN):   run;
 
NOTE: There were 366 observations read from the data set EMWS1.PROF2_INTDIST.
NOTE: The data set EMWS1.PROF2_INTDIST has 366 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   data EMWS1.Prof2_CLASSDIST;
MPRINT(TRAIN):   set EMWS1.Prof2_CLASSDIST;
MPRINT(TRAIN):   label SegmentVariable = "Segment Variable" SegmentValue = "Segment Value" Groupindex = "Group Index";
MPRINT(TRAIN):   if SegmentVariable = '_OVERALL_' then GroupIndex = 0;
MPRINT(TRAIN):   else GroupIndex = 1;
MPRINT(TRAIN):   run;
 
NOTE: There were 24 observations read from the data set EMWS1.PROF2_CLASSDIST.
NOTE: The data set EMWS1.PROF2_CLASSDIST has 24 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "SIZE STATS CLASSDIST INTDIST";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "PROFILEVIEW";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "Profileview";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Plot";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "COLOR";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "SIZE";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "STATS";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "CLASSDIST";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "INTDIST";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "_SEGMENT_";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34661119261133;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 126 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS1.Prof2_WORTH;
MPRINT(TRAIN):   set EMWS1.Prof2_STATS;
MPRINT(TRAIN):   label SegmentVariable = "Segment Variable" SegmentValue = "Segment Value" Variable = "Variable" Rank = "Rank" Worth = "Worth";
MPRINT(TRAIN):   where WORTH ne .;
MPRINT(TRAIN):   run;
 
NOTE: There were 36 observations read from the data set EMWS1.PROF2_STATS.
      WHERE WORTH not = .;
NOTE: The data set EMWS1.PROF2_WORTH has 36 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "WORTH";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "1";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "profworth";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "VARIABLE";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "WORTH";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Plot";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "SEGMENTVARIABLE";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "WORTH";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7314431223699;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 126 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 252 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS1.Prof2_SIZE;
MPRINT(TRAIN):   set EMWS1.Prof2_SIZE;
MPRINT(TRAIN):   label percent = "Percent" count = "Frequency Count";
MPRINT(TRAIN):   format PERCENT 5.2;
MPRINT(TRAIN):   format COUNT 12.;
MPRINT(TRAIN):   run;
The SAS System
 
 
NOTE: There were 5 observations read from the data set EMWS1.PROF2_SIZE.
NOTE: The data set EMWS1.PROF2_SIZE has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "SIZE";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "PIE";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "segmentmanysize";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "COUNT";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Plot";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "PERCENT";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "SEGMENTVARIABLE";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "SIZE";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73347093664737;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 252 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 379 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "SIZE";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "size";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Stats";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86634998343249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 379 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 505 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "STATS";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "profilevars";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Stats";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.25621845771382;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 505 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 631 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "CLASSDIST";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "clusbarplot";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Stats";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36229713464262;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 631 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 757 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "INTDIST";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "clushistplot";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Stats";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12452091701539;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 757 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 883 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS1 nolist;
MPRINT(TRAIN):   delete Prof2_SELVARS _SUMMARYVARS DATA_STAT Prof2_MACS(mt=catalog) Prof2_INTERVAL(mt=catalog);
MPRINT(TRAIN):   run;
 
NOTE: The file EMWS1._SUMMARYVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.DATA_STAT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.PROF2_MACS (memtype=CATALOG) was not found, but appears on a DELETE statement.
NOTE: Deleting EMWS1.PROF2_SELVARS (memtype=DATA).
NOTE: Deleting EMWS1.PROF2_INTERVAL (memtype=CATALOG).
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
30677      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30678      * End TRAIN: Prof2;
MPRINT(EM_DIAGRAM):   * End TRAIN: Prof2;
30679      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30680      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30681      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
30682      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30683      ;
MPRINT(EM_DIAGRAM):   ;
30684      ;
MPRINT(EM_DIAGRAM):   ;
30685      ;
MPRINT(EM_DIAGRAM):   ;
30686      ;
MPRINT(EM_DIAGRAM):   ;
30687      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   ;
30688      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
30689      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   quit;
30690      *------------------------------------------------------------*;
30691      /*; *"; *'; */
30692      ;
30693      run;
30694      quit;
30695      /* Reset EM Options */
30696      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
30697      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
30698      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
30699      filename _temp catalog 'sashelp.emwip.em_sasgraph.source';
MPRINT(EM_DIAGRAM):    filename _temp catalog 'sashelp.emwip.em_sasgraph.source';
30700      %include _temp;
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMWIP.EM_SASGRAPH.SOURCE.
30701     +filename _fdsep catalog 'sashelp.emwip.em_dsep.source';
MPRINT(EM_DIAGRAM):   filename _fdsep catalog 'sashelp.emwip.em_dsep.source';
30702     +%include _fdsep;
NOTE: %INCLUDE (level 2) file _FDSEP is file SASHELP.EMWIP.EM_DSEP.SOURCE.
30703     +%macro em_dsep;
30704     +  %global emdsep;
30705     +   %if %substr(&sysscp, 1, 3)= WIN %then
30706     +       %let emdsep=\;
30707     +   %else
30708     +       %if %substr(&sysscp, 1, 3)= DNT %then
30709     +           %let emdsep=\;
30710     +   %else
30711     +       %let emdsep=/;
30712     +%mend em_dsep;
30713     +%em_dsep;
MPRINT(EM_DIAGRAM):  ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
30714     +filename _fdsep;
MPRINT(EM_DIAGRAM):   filename _fdsep;
NOTE: Fileref _FDSEP has been deassigned.
MPRINT(EM_DIAGRAM):  ;
30715     +%em_dsep;
30716     +%macro em_sasgraph(device=JPEG, folder=);
30717     +    %if %sysfunc(exist(work.gseg)) %then %do;
30718     +        proc delete data=work.gseg;
30719     +        run;
30720     +    %end;
30721     +    proc catalog c=work.gseg;
30722     +       contents out=work.gseg;
30723     +    run;
30724     +    data work.gseg;
30725     +       set work.gseg;
30726     +       if desc = '' then desc = name;
30727     +    run;
30728     +    proc sort data=work.gseg;
30729     +       by desc;
30730     +    run;
30731     +    %let _wipGraphPath=%superq(folder);
30732     +    %if (%superq(_wipGraphPath) eq ) %then %do;
30733     +        data _null_;
30734     +           path = pathname('WORK');
30735     +           rc = dcreate('EM_SASGRAPH',strip(path));
30736     +           call symput('_wipGraphPath', strip(path)!!strip(symget('emdsep'))!!'EM_SASGRAPH');
30737     +        run;
30738     +    %end;
30739     +    filename _dref "&_wipGraphpath";
30740     +    %let did=%sysfunc(dopen(_dref));
30741     +    %let memcount=%sysfunc(dnum(&did));
30742     +    %if &memcount %then %do;
30743     +        %do i=1 %to &memcount;
30744     +            %let filename=&_wipGraphPath&emdsep%sysfunc(dread(&did, &i));
30745     +            %if "&filename" ne "" %then %do; %put >>>> &filename;
30746     +                %let prefix = %sysfunc(reverse(%lowcase(%scan(%nrbquote(%sysfunc(reverse(&filename))), 1, .))));
30747     +                %if (&prefix = jpg) or (&prefix eq gif) %then %do;
30748     +                    filename _fref "&filename";
30749     +                    %let rc = %sysfunc(fdelete(_fref));
30750     +                    filename _fref;
30751     +                %end;
30752     +            %end;
30753     +        %end;
30754     +    %end;
30755     +    %let rc=%sysfunc(dclose(&did));
30756     +    filename _dref;
30757     +    data work.gseg;
30758     +       keep libname memname name desc type date crdate moddate;
30759     +       array token(7) $ ('/' '\' ':' '"' '<' '>' '|');
30760     +       length string $2000 device ftype $8;
30761     +       length filename $200;
30762     +       retain index 0;
30763     +       set work.gseg;
30764     +       by desc;
30765     +       filename = desc;
30766     +       if first.desc then do;
30767     +          filename = desc;
30768     +          index = 1;
30769     +       end;
30770     +       else do;
30771     +          filename = strip(desc)!!' ('!!strip(put(index, best.))!!')';
30772     +       end;
30773     +       do i=1 to 7;
30774     +          filename = tranwrd(filename, strip(token(i)), '_');
30775     +       end;
30776     +       desc = filename;
30777     +       index+1;
30778     +       device = upcase("&device");
30779     +       select(device);
30780     +          when('JPEG') ftype='jpg';
30781     +          when('GIF')  ftype='gif';
30782     +          otherwise do;
30783     +                       ftype='jpg';
30784     +                       device="JPEG";
30785     +          end;
30786     +       end;
30787     +       string = "&_wipGraphPath&emdsep"!!strip(filename)!!'.'!!ftype;
30788     +       call execute('filename  gsasfile "'!!strip(string)!!'";');
30789     +       call execute('goptions reset=all device='!!strip(device)!!' display');
30790     +       call execute('         gaccess= gsasfile');
30791     +       call execute('         gsfmode= replace cback=white;');
30792     +       call execute('proc greplay igout=work.gseg nofs;');
30793     +       call execute(    'replay '!!strip(name)!!';');
30794     +       call execute('quit;');
30795     +       call execute('filename gsasfile;');
30796     +       call execute('goptions reset=all device=WMF NODISPLAY;');
30797     +    run;
30798     +%mend em_sasgraph;
NOTE: %INCLUDE (level 1) ending.
30803      filename _temp;
MPRINT(EM_DIAGRAM):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
30804      %em_sasgraph(device=GIF, folder=C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\GRAPH);
MPRINT(EM_SASGRAPH):   proc catalog c=work.gseg;
MPRINT(EM_SASGRAPH):   contents out=work.gseg;
MPRINT(EM_SASGRAPH):   run;
 
NOTE: The data set WORK.GSEG has 0 observations and 8 variables.
 
NOTE: PROCEDURE CATALOG used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_SASGRAPH):   data work.gseg;
MPRINT(EM_SASGRAPH):   set work.gseg;
MPRINT(EM_SASGRAPH):   if desc = '' then desc = name;
MPRINT(EM_SASGRAPH):   run;
 
NOTE: There were 0 observations read from the data set WORK.GSEG.
NOTE: The data set WORK.GSEG has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_SASGRAPH):   proc sort data=work.gseg;
MPRINT(EM_SASGRAPH):   by desc;
MPRINT(EM_SASGRAPH):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK.GSEG has 0 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_SASGRAPH):   filename _dref "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\GRAPH";
MPRINT(EM_SASGRAPH):   filename _dref;
NOTE: Fileref _DREF has been deassigned.
MPRINT(EM_SASGRAPH):   data work.gseg;
MPRINT(EM_SASGRAPH):   keep libname memname name desc type date crdate moddate;
MPRINT(EM_SASGRAPH):   array token(7) $ ('/' '\' ':' '"' '<' '>' '|');
MPRINT(EM_SASGRAPH):   length string $2000 device ftype $8;
MPRINT(EM_SASGRAPH):   length filename $200;
MPRINT(EM_SASGRAPH):   retain index 0;
MPRINT(EM_SASGRAPH):   set work.gseg;
MPRINT(EM_SASGRAPH):   by desc;
MPRINT(EM_SASGRAPH):   filename = desc;
MPRINT(EM_SASGRAPH):   if first.desc then do;
MPRINT(EM_SASGRAPH):   filename = desc;
MPRINT(EM_SASGRAPH):   index = 1;
MPRINT(EM_SASGRAPH):   end;
MPRINT(EM_SASGRAPH):   else do;
MPRINT(EM_SASGRAPH):   filename = strip(desc)!!' ('!!strip(put(index, best.))!!')';
MPRINT(EM_SASGRAPH):   end;
MPRINT(EM_SASGRAPH):   do i=1 to 7;
MPRINT(EM_SASGRAPH):   filename = tranwrd(filename, strip(token(i)), '_');
MPRINT(EM_SASGRAPH):   end;
MPRINT(EM_SASGRAPH):   desc = filename;
MPRINT(EM_SASGRAPH):   index+1;
MPRINT(EM_SASGRAPH):   device = upcase("GIF");
MPRINT(EM_SASGRAPH):   select(device);
MPRINT(EM_SASGRAPH):   when('JPEG') ftype='jpg';
MPRINT(EM_SASGRAPH):   when('GIF') ftype='gif';
MPRINT(EM_SASGRAPH):   otherwise do;
MPRINT(EM_SASGRAPH):   ftype='jpg';
MPRINT(EM_SASGRAPH):   device="JPEG";
MPRINT(EM_SASGRAPH):   end;
MPRINT(EM_SASGRAPH):   end;
MPRINT(EM_SASGRAPH):   string = "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\GRAPH\"!!strip(filename)!!'.'!!ftype;
MPRINT(EM_SASGRAPH):   call execute('filename  gsasfile "'!!strip(string)!!'";');
MPRINT(EM_SASGRAPH):   call execute('goptions reset=all device='!!strip(device)!!' display');
MPRINT(EM_SASGRAPH):   call execute('         gaccess= gsasfile');
MPRINT(EM_SASGRAPH):   call execute('         gsfmode= replace cback=white;');
MPRINT(EM_SASGRAPH):   call execute('proc greplay igout=work.gseg nofs;');
MPRINT(EM_SASGRAPH):   call execute( 'replay '!!strip(name)!!';');
MPRINT(EM_SASGRAPH):   call execute('quit;');
MPRINT(EM_SASGRAPH):   call execute('filename gsasfile;');
MPRINT(EM_SASGRAPH):   call execute('goptions reset=all device=WMF NODISPLAY;');
MPRINT(EM_SASGRAPH):   run;
 
NOTE: There were 0 observations read from the data set WORK.GSEG.
NOTE: The data set WORK.GSEG has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
30805      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
30806      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
30807      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 883 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 883 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
30808      proc freq data=EMWS1.Prof2_WORTH noprint order=data;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Prof2_WORTH noprint order=data;
30809      table SEGMENTVARIABLE/ out=WORK.REPORTVALUE;
MPRINT(EM_DIAGRAM):   table SEGMENTVARIABLE/ out=WORK.REPORTVALUE;
30810      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set EMWS1.PROF2_WORTH.
NOTE: The data set WORK.REPORTVALUE has 1 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
30811      proc freq data=EMWS1.Prof2_SIZE noprint order=data;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Prof2_SIZE noprint order=data;
30812      table SEGMENTVARIABLE/ out=WORK.REPORTVALUE;
MPRINT(EM_DIAGRAM):   table SEGMENTVARIABLE/ out=WORK.REPORTVALUE;
30813      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.PROF2_SIZE.
NOTE: The data set WORK.REPORTVALUE has 1 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 31, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:06:00" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                December 31, 2015
Time:                13:06:00
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2L1V_SV "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2L1V_SV new;
MPRINT(EM_DIAGRAM):   run;
30915      %let EMEXCEPTIONSTRING=;
30916      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
30917      * SCORE: Prof2;
MPRINT(EM_DIAGRAM):   * SCORE: Prof2;
30918      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30919      %let EM_ACTION = SCORE;
30920      %let syscc = 0;
30921      %macro main;
30922         %if %sysfunc(indexw(&EM_DEBUG, _ALL_)) or %sysfunc(indexw(&EM_DEBUG, SOURCE)) %then %do;
30923             options MPRINT;
30924         %end;
30925
30926         filename temp catalog 'sashelp.emexpl.profile_macros.source';
30927         %include temp;
30928         filename temp;
30929
30930         /* Initialize property macro variables */
30931         %SetProperties;
30932
30933         %if %upcase(&EM_ACTION) = CREATE %then %do;
30934
30935             filename temp catalog 'sashelp.emexpl.profile_create.source';
30936             %include temp;
30937             filename temp;
30938             %create;
30939         %end;
30940         %else
30941         %if %upcase(&EM_ACTION) = TRAIN %then %do;
30942
30943             filename temp catalog 'sashelp.emexpl.profile_train.source';
30944             %include temp;
30945             filename temp;
30946             %train;
30947         %end;
30948      %mend main;
30949
30950      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.profile_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.PROFILE_MACROS.SOURCE.
30951     +%macro SetProperties;
30952     +   %em_checkmacro(name=EM_PROPERTY_PROFILEALL,         global=Y, value=N);
30953     +   %em_checkmacro(name=EM_PROPERTY_USEREPORTVARS,      global=Y, value=Y);
30954     +   %em_checkmacro(name=EM_PROPERTY_OTHERPERCENTCUTOFF, global=Y, value=95);
30955     +   %em_checkmacro(name=EM_PROPERTY_TARGETROLE,         global=Y, value=NONE);
30956     +   %em_checkmacro(name=EM_PROPERTY_NUMHISTBARS,        global=Y, value=8);
30957     +   %em_checkmacro(name=EM_PROPERTY_MINWORTH,           global=Y, value=0.01);
30958     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,           global=Y, value=1);
30959     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMREPORT,       global=Y, value=10);
30960     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMINPUT,        global=Y, value=10);
30961     +   %em_checkmacro(name=EM_PROPERTY_PRINTWORTH,         global=Y, value=Y);
30962     +%mend SetProperties;
30965     +%macro makeVarMacros(level= );
30967     +    %let numvars = 0;
30968     +    %let where   = '';
30970     +    %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
30971     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL="&level"  and USE in('Y', 'D'));
30972     +    %else
30973     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE ='INPUT' and LEVEL="&level" and USE in('Y', 'D'));
30975     +    %if &level = INTERVAL %then %do;
30976     +        %let numvars = %eval( &EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED);
30977     +        %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
30978     +             %let numvars = %eval(&numvars + &EM_NUM_INTERVAL_TARGET);
30979     +    %end;
30980     +    %else %do;
30981     +        %if &level = NOMINAL %then %do;
30982     +            %let numvars = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +  &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED);
30983     +             %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then %do;
30984     +                 %let numvars = %eval(&numvars + &EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET);
30985     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL in('NOMINAL', 'BINARY') and USE in('Y', 'D'));
30986     +             %end;
30987     +             %else
30988     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE ='INPUT' and LEVEL in("NOMINAL", "BINARY") and USE in('Y', 'D'));
30990     +        %end;
30991     +        %else %do;
30992     +            %let numvars = %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED);
30993     +            %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
30994     +                %let numvars = %eval(&numvars + &EM_NUM_ORDINAL_TARGET);
30995     +        %end;
30996     +    %end;
30998     +    %if &numvars>0 %then %do;
30999     +         %let numloop = %sysfunc(ceil(&numvars/10000));
31000     +         %let loopcount = 0;
31002     +         %do %while((&numloop - &loopcount) > 0);
31003     +             %let first = %eval((&loopcount*10000) + 1);
31004     +             %let last  = %eval(&first + 10000);
31005     +             %let loopcount = %eval(&loopcount +1);
31006     +             %let centry = &EM_LIB..&EM_NODEID._MACS.&LEVEL._&loopcount..SOURCE;
31007     +             filename X catalog "&centry";
31008     +             data _null_;
31009     +                length _STRING_ $80;
31010     +                retain _STRING_ ;
31011     +                file X;
31012     +                set &EM_DATA_VARIABLESET(firstobs=&first obs=&last) end=eof;
31014     +                where &where;
31016     +                if _N_=1 then
31017     +                   put '%macro _PROFVAR;';
31019     +                if (length(_STRING_) + length(trim(NAME))+ 1  < 80) then do;
31020     +                   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
31021     +                   if eof then do;
31022     +                      put _STRING_;
31023     +                      put '%mend _PROFVAR;';
31024     +                   end;
31025     +                end;
31026     +                else do;
31027     +                   put _STRING_;
31028     +                  _string_ = TRIM(NAME);
31029     +                   if eof then do;
31030     +                      put _string_;
31031     +                      put '%mend _PROFVAR;';
31032     +                   end;
31033     +                end;
31034     +             run;
31035     +             filename X;
31036     +         %end;
31037     +    %end;
31039     +%mend makeVarMacros;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Prof2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31042      *------------------------------------------------------------*;
31043      * End SCORE: Prof2;
31044      *------------------------------------------------------------*;
 
31045      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
31046      * Prof2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   * Prof2: Scoring DATA data;
31047      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31048      data EMWS1.Prof2_TRAIN
31049      / view=EMWS1.Prof2_TRAIN
31050      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Prof2_TRAIN / view=EMWS1.Prof2_TRAIN ;
31051      set EMWS1.Clus2_TRAIN
31052      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_TRAIN ;
31053      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.PROF2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS2_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.14 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
31054      quit;
 
31056      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
31057      * Prof2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Prof2: Computing metadata for TRAIN data;
31058      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.PROF2_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.17 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Prof2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Prof2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Prof2_TRAIN out=WORK.M0JKU5KK noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JKU5KK;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JKU5KK(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JKU5KK;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JKU5KK;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2IAAHO4 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2IAAHO4;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2IAAHO4;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M26D1N5T(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2IAAHO4;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2IAAHO4;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2IAAHO4;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2IAAHO4;
MPRINT(EMADVISECOLUMNS):   set WORK.M2IAAHO4;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Clus2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Prof2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Prof2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Prof2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.PROF2_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 31, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:06:01" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                December 31, 2015
Time:                13:06:01
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1UD47OE "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Prof2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1UD47OE new;
MPRINT(EM_DIAGRAM):   run;
31380      %let EMEXCEPTIONSTRING=;
31381      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
31382      * REPORT: Prof2;
MPRINT(EM_DIAGRAM):   * REPORT: Prof2;
31383      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31384      %let EM_ACTION = REPORT;
31385      %let syscc = 0;
31386      %macro main;
31387         %if %sysfunc(indexw(&EM_DEBUG, _ALL_)) or %sysfunc(indexw(&EM_DEBUG, SOURCE)) %then %do;
31388             options MPRINT;
31389         %end;
31390
31391         filename temp catalog 'sashelp.emexpl.profile_macros.source';
31392         %include temp;
31393         filename temp;
31394
31395         /* Initialize property macro variables */
31396         %SetProperties;
31397
31398         %if %upcase(&EM_ACTION) = CREATE %then %do;
31399
31400             filename temp catalog 'sashelp.emexpl.profile_create.source';
31401             %include temp;
31402             filename temp;
31403             %create;
31404         %end;
31405         %else
31406         %if %upcase(&EM_ACTION) = TRAIN %then %do;
31407
31408             filename temp catalog 'sashelp.emexpl.profile_train.source';
31409             %include temp;
31410             filename temp;
31411             %train;
31412         %end;
31413      %mend main;
31414
31415      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.profile_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.PROFILE_MACROS.SOURCE.
31416     +%macro SetProperties;
31417     +   %em_checkmacro(name=EM_PROPERTY_PROFILEALL,         global=Y, value=N);
31418     +   %em_checkmacro(name=EM_PROPERTY_USEREPORTVARS,      global=Y, value=Y);
31419     +   %em_checkmacro(name=EM_PROPERTY_OTHERPERCENTCUTOFF, global=Y, value=95);
31420     +   %em_checkmacro(name=EM_PROPERTY_TARGETROLE,         global=Y, value=NONE);
31421     +   %em_checkmacro(name=EM_PROPERTY_NUMHISTBARS,        global=Y, value=8);
31422     +   %em_checkmacro(name=EM_PROPERTY_MINWORTH,           global=Y, value=0.01);
31423     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,           global=Y, value=1);
31424     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMREPORT,       global=Y, value=10);
31425     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMINPUT,        global=Y, value=10);
31426     +   %em_checkmacro(name=EM_PROPERTY_PRINTWORTH,         global=Y, value=Y);
31427     +%mend SetProperties;
31430     +%macro makeVarMacros(level= );
31432     +    %let numvars = 0;
31433     +    %let where   = '';
31435     +    %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
31436     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL="&level"  and USE in('Y', 'D'));
31437     +    %else
31438     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE ='INPUT' and LEVEL="&level" and USE in('Y', 'D'));
31440     +    %if &level = INTERVAL %then %do;
31441     +        %let numvars = %eval( &EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED);
31442     +        %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
31443     +             %let numvars = %eval(&numvars + &EM_NUM_INTERVAL_TARGET);
31444     +    %end;
31445     +    %else %do;
31446     +        %if &level = NOMINAL %then %do;
31447     +            %let numvars = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +  &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED);
31448     +             %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then %do;
31449     +                 %let numvars = %eval(&numvars + &EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET);
31450     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL in('NOMINAL', 'BINARY') and USE in('Y', 'D'));
31451     +             %end;
31452     +             %else
31453     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE ='INPUT' and LEVEL in("NOMINAL", "BINARY") and USE in('Y', 'D'));
31455     +        %end;
31456     +        %else %do;
31457     +            %let numvars = %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED);
31458     +            %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
31459     +                %let numvars = %eval(&numvars + &EM_NUM_ORDINAL_TARGET);
31460     +        %end;
31461     +    %end;
31463     +    %if &numvars>0 %then %do;
31464     +         %let numloop = %sysfunc(ceil(&numvars/10000));
31465     +         %let loopcount = 0;
31467     +         %do %while((&numloop - &loopcount) > 0);
31468     +             %let first = %eval((&loopcount*10000) + 1);
31469     +             %let last  = %eval(&first + 10000);
31470     +             %let loopcount = %eval(&loopcount +1);
31471     +             %let centry = &EM_LIB..&EM_NODEID._MACS.&LEVEL._&loopcount..SOURCE;
31472     +             filename X catalog "&centry";
31473     +             data _null_;
31474     +                length _STRING_ $80;
31475     +                retain _STRING_ ;
31476     +                file X;
31477     +                set &EM_DATA_VARIABLESET(firstobs=&first obs=&last) end=eof;
31479     +                where &where;
31481     +                if _N_=1 then
31482     +                   put '%macro _PROFVAR;';
31484     +                if (length(_STRING_) + length(trim(NAME))+ 1  < 80) then do;
31485     +                   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
31486     +                   if eof then do;
31487     +                      put _STRING_;
31488     +                      put '%mend _PROFVAR;';
31489     +                   end;
31490     +                end;
31491     +                else do;
31492     +                   put _STRING_;
31493     +                  _string_ = TRIM(NAME);
31494     +                   if eof then do;
31495     +                      put _string_;
31496     +                      put '%mend _PROFVAR;';
31497     +                   end;
31498     +                end;
31499     +             run;
31500     +             filename X;
31501     +         %end;
31502     +    %end;
31504     +%mend makeVarMacros;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: Prof2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31507      *------------------------------------------------------------*;
31508      * End REPORT: Prof2;
31509      *------------------------------------------------------------*;
 
31510      /* Reset EM Options */
31511      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
31512      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
31513      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
