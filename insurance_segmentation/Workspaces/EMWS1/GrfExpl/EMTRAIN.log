MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. Dezember 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.20 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                16. Dezember 2015
Time:                19.20 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O31OH164 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O31OH164 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\GrfExpl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. Dezember 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.20 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                D059331";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\GrfExpl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\GrfExpl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\GrfExpl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\GrfExpl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16. Dezember 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19.20 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                D059331";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\GrfExpl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\GrfExpl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\GrfExpl\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
20675      proc freq data=EMWS1.GrfExpl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.GrfExpl_VariableSet noprint;
20676      table ROLE*LEVEL/out=WORK.GrfExplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.GrfExplMETA;
20677      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set EMWS1.GRFEXPL_VARIABLESET.
NOTE: The data set WORK.GRFEXPLMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

20678      proc print data=WORK.GrfExplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.GrfExplMETA label noobs;
20679      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
20680      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
20681      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
20682      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
20683      run;

NOTE: There were 4 observations read from the data set WORK.GRFEXPLMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20684      title10;
MPRINT(EM_DIAGRAM):   title10;
20685      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'insurance_segmentation';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'insurance segmentation';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21017      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21018      * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
21019      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
21020      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

21021      %let EMEXCEPTIONSTRING=;
21022      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21023      * TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   * TRAIN: GrfExpl;
21024      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21025      %let EM_ACTION = TRAIN;
21026      %let syscc = 0;
21027      %macro main;
21028         filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
21029         %include temp;
21030         filename temp;
21031      
21032         %SetProperties;
21033      
21034         %if %upcase(&EM_ACTION) = CREATE %then %do;
21035      
21036             filename temp catalog 'sashelp.emexpl.graphexplore_create.source';
21037             %include temp;
21038             filename temp;
21039             %create;
21040         %end;
21041         %else
21042         %if %upcase(&EM_ACTION) = TRAIN %then %do;
21043      
21044             filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
21045             %include temp;
21046             filename temp;
21047             %train;
21048      
21049         %end;
21050         %else
21051         %if %upcase(&EM_ACTION) = REPORT %then %do;
21052      
21053             filename temp catalog 'sashelp.emexpl.graphexplore_report.source';
21054             %include temp;
21055             filename temp;
21056      
21057             %report;
21058         %end;
21059      
21060      %mend main;
21061      
21062      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_MACROS.SOURCE.
21063     +%macro SetProperties;
21064     +   %em_checkmacro(name=EM_PROPERTY_INTERVALBYTARGET,      global=Y, value=Y);
21065     +   %em_checkmacro(name=EM_PROPERTY_CLASSBYTARGET,         global=Y, value=Y);
21066     +   %em_checkmacro(name=EM_PROPERTY_DATASOURCE,            global=Y, value=SAMPLE);
21067     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLEMETHOD,        global=Y, value=FIRSTN);
21068     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLESIZE,          global=Y, value=DEFAULT);
21069     +   %em_checkmacro(name=EM_PROPERTY_EMRANDOMSEED,          global=Y, value=12345);
21070     +
21071     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_TRAIN.SOURCE.
21072     +%macro train;
21074     +    %let graphData = &em_import_data;
21075     +    %if "&graphData" eq "" %then
21076     +        %let graphData = &em_import_transaction;
21077     +    %if "&graphData" eq "" %then
21078     +        %let graphData = &em_import_document;
21079     +    %if "&graphData" eq "" %then
21080     +        %let graphData = &em_import_validate;
21081     +    %if "&graphData" eq "" %then
21082     +        %let graphData = &em_import_test;
21083     +    %if "&graphData" eq "" %then
21084     +        %let graphData = &em_import_score;
21086     +    %if "&graphData" eq "" %then %do;
21087     +        %let emexceptionString = exception.server.IMPORT.NODATA;
21088     +        %goto doendm;
21089     +    %end;
21091     +    %em_getname(key=SAMPLE_DATA, type=DATA);
21093     +    filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
21094     +    %include vartemp;
21095     +    filename vartemp;
21097     +    data tempVariableSet;
21098     +       set &em_data_variableset;
21099     +       where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
21100     +       if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
21101     +    run;
21102     +    %em_varMacro(name=varSample, metadata=tempVariableSet, where=, key=NAME, nummacro=numVarSample);
21105     +     %exploreSample(DATA=&graphData, OUTPUT=&EM_USER_SAMPLE_DATA, METADATA=&EM_DATA_VARIABLESET, VARS=%varSample,
21106     +                      METHOD=&EM_PROPERTY_EMSAMPLEMETHOD, SIZE=&EM_PROPERTY_EMSAMPLESIZE,
21107     +                      ALPHA=, PVALUE=, SEED=&EM_PROPERTY_EMRANDOMSEED);
21109     +    %doendm:
21111     +%mend train;
21113     +%train;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 2) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
21114     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
21115     +   filename macFile catalog 'work.emutil.macro.source';
21116     +   %let _METAOBS = 0;
21118     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
21119     +                   or (&metadata eq ) %then %do;
21120     +       %goto doend;
21121     +   %end;
21122     +   data _null_;
21123     +      length _STRING_ $80;
21124     +      retain _STRING_;
21125     +      set &metadata end=eof;
21126     +      file macFile;
21127     +      %if %nrbquote(&where) ne %then %do;
21128     +          %let whereClause = where (%nrbquote(&where));
21129     +          %unquote(&whereClause);
21130     +      %end;
21131     +      if _N_=1 then do;
21132     +         string = "%"!!"macro &name;";
21133     +         put string;
21134     +      end;
21135     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
21136     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
21137     +         if eof then do;
21138     +            put _STRING_;
21139     +            string = "%"!!"mend &name;";
21140     +            put string;
21141     +            %if (&nummacro ne ) %then %do;
21142     +                string = strip(put(_N_, best.));
21143     +                put "%" "global &nummacro;";
21144     +                put "%" "let &nummacro = " string ";";
21145     +                call symput('_METAOBS', string);
21146     +            %end;
21147     +         end;
21148     +      end;
21149     +      else do;
21150     +         put _STRING_;
21151     +         _string_ = TRIM(&key);
21152     +         if eof then do;
21153     +            put _STRING_;
21154     +            string = "%"!!"mend &name;";
21155     +            put string;
21156     +        end;
21157     +      end;
21158     +      if eof then do;
21159     +         string = strip(put(_N_, best.));
21160     +         call symput('_METAOBS', string);
21161     +         %if (&nummacro ne ) %then %do;
21162     +             put "%" "global &nummacro;";
21163     +             put "%" "let &nummacro = " string ";";
21164     +         %end;
21165     +      end;
21166     +   run;
21168     +   %doend:
21169     +   %if ^&_METAOBS %then %do;
21170     +       data _null_;
21171     +          file macFile;
21172     +          put "%" "macro &name;";
21173     +          put "%" "mend &name;";
21174     +          %if (&nummacro ne ) %then %do;
21175     +              put "%" "global &nummacro;";
21176     +              put "%" "let &nummacro = 0;";
21177     +          %end;
21178     +      run;
21179     +   %end;
21180     +   %inc macFile;
21181     +   filename macFile;
21182     +%mend em_varMacro;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS1.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 14 observations read from the data set EMWS1.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 14 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Mittwoch, 16. Dezember 2015 19.20 Uhr,
      Last Modified=Mittwoch, 16. Dezember 2015 19.20 Uhr,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD12100_WDFN33788459A_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO

NOTE: 10 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 72.
NOTE: There were 14 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 2) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
21183     +%macro varSample;
21184     +ClaimsRate CustomerAge CustomerIdentity CustomerMonetaryValue
21185     +EducationalDegree FirstPolicyYear GeographicLiving GrossMonthlySalary
21186     +HasChildren PremiumsinLOBHealth PremiumsinLOBHousehold PremiumsinLOBLife
21187     +PremiumsinLOBMotor PremiumsinLOBWorkComp
21188     +%mend varSample;
21189     +%global numVarSample;
21190     +%let numVarSample = 14 ;
21191     +%global numVarSample;
21192     +%let numVarSample = 14 ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 2) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
21193     +/*------------------------------------------------------------------
21194     +  MACRO EXPLOREOBS
21196     +  SUPPORT:  SASDHD - David Duling
21197     +  PRODUCT:  Enterprise Miner
21199     +  DESCRIPTION:
21200     +  Generates maximum and default numbers of observations to
21201     +  download for visualization depending on the record length.
21203     +  Values were determined by trial and error using typical
21204     +  Windows workstation configurations.
21206     +  Discrete sets of values are returned so that user experience
21207     +  will be consitent with similar sized data sets.
21209     +  These macro variables are set:
21210     +  _exploreobs_max -- maximum number of obs downloadable
21211     +  _exploreobs_def -- default number of obs to be downloaded
21212     +  _exploreobs_recl - record length.  Might be useful for reporting.
21214     +  Use the _exploreobs_max to set limit the GUI selection of
21215     +  observations for downloading.  The GUI selection for obs
21216     +  could be reduced to "Default" and "Max".
21218     +  Parameters
21219     +  data=   libname.memname of input data
21220     +  vars=   subset list of variables.
21221     +          downloading 1 out of 500 really does work like downloading
21222     +          1 out of 1 vars.  Users may select a subset of vars for
21223     +                   visualizations.  Pass in the list as space delimited
21224     +          var names.  If vars is not specified, the record length
21225     +          of the entire data will be used.
21226     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
21228     +  Control
21229     +  Users may control the values by entering these macro variables.
21230     +            EM_EXPLOREOBS_MAX
21231     +            EM_EXPLOREOBS_DEFAULT
21232     +  These values override the computed values.
21234     +  Debugging
21235     +  %let _exploreobs_debug=1 ;
21236     +--------------------------------------------------------------------
21237     +  HISTORY: 20APR2004. sasdhd. pushed.
21238     +           18DEC2004. sasdhd. S0280556.
21239     +           07SEP2007. sasdhd. HK1009586
21240     +--------------------------------------------------------------------*/
21242     +%macro exploreobs(data=,vars=, nbytes=) ;
21244     +   /*--- variable definitions ---*/
21245     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
21246     +   %local xobs xvars xlen vlen xi vname vlist ;
21247     +   %local _exp_source _exp_notes ;
21249     +   /*--- USER definitions ---*/
21250     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
21252     +   /*--- variable intializations ---*/
21253     +   %let _exploreobs_max=0 ;
21254     +   %let _exploreobs_def=0 ;
21255     +   %let _exploreobs_recl=0 ;
21256     +   %let xvars= 0 ;
21257     +   %let xlen = 0 ;
21258     +   %let xobs = 0 ;
21260     +   /*--- data error checks ---*/
21261     +   %if "&data" eq "" %then %do ;
21262     +            %put NOTE: DATA is not specified. ;
21263     +            %goto term ;
21264     +      %end ;
21266     +   %let dsid=%sysfunc(open(&data)) ;
21267     +   %if not &dsid %then %do ;
21268     +            %put NOTE: DATA &data is not available. ;
21269     +            %goto term ;
21270     +      %end ;
21272     +   /*--- if a vars list exists generate a subset ---*/
21273     +   %if &vars ne %then %do ;
21274     +         %let dsid=%sysfunc(close(&dsid)) ;
21275     +         %if &_exploreobs_debug ne 1 %then %do ;
21276     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
21277     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
21278     +                  options nosource nonotes ;
21279     +         %end ;
21280     +         data _exploreobs_temp_data ;
21281     +         set &data(obs=0) ;
21282     +          keep &vars ;
21283     +         run;
21284     +         %if &_exploreobs_debug ne 1 %then %do ;
21285     +                  options &_exp_source &_exp_notes ;
21286     +         %end ;
21287     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
21288     +         %if &dsid eq 0 %then %do ;
21289     +                  %put NOTE: Sample is not available.;
21290     +                  %goto term ;
21291     +            %end ;
21292     +      %end ;
21294     +   /*--- get var attributes ---*/
21295     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
21296     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
21297     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
21298     +   %let dsid= %sysfunc(close(&dsid)) ;
21300     +   /*--- set default and max obs ---*/
21301     +   %let _exploreobs_recl=%eval(&xlen) ;
21302     +   %if &_exploreobs_recl eq 0 %then %do ;
21303     +             %let _exploreobs_max= 0 ;
21304     +             %let _exploreobs_def= 0 ;
21305     +             %goto term ;
21307     +   %end ;
21308     +   %else
21309     +   %if &_exploreobs_recl le 32 %then %do ;
21310     +             %let _exploreobs_max=100000 ;
21311     +             %let _exploreobs_def= 10000 ;
21312     +   %end ;
21313     +   %else
21314     +   %if &_exploreobs_recl le 128 %then %do ;
21315     +             %let _exploreobs_max=60000 ;
21316     +             %let _exploreobs_def= 6000 ;
21317     +   %end ;
21318     +   %else
21319     +   %if &_exploreobs_recl lt 1000 %then %do ;
21320     +             %let _exploreobs_max=20000 ;
21321     +             %let _exploreobs_def= 2000 ;
21322     +   %end ;
21323     +   %else
21324     +   %if &_exploreobs_recl lt 5000 %then %do ;
21325     +             %let _exploreobs_max= 10000 ;
21326     +             %let _exploreobs_def=  1000 ;
21327     +   %end ;
21328     +   %else
21329     +   %if &_exploreobs_recl lt 20000 %then %do ;
21330     +             %let _exploreobs_max= 5000 ;
21331     +             %let _exploreobs_def=  500 ;
21332     +   %end ;
21333     +   %else %do ;
21334     +             %let _exploreobs_max= 1000 ;
21335     +             %let _exploreobs_def=  200 ;
21336     +   %end ;
21338     +   /*--- Users options ---*/
21339     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
21340     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
21341     +   %end;
21342     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
21343     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
21344     +   %end;
21346     +    /*--- S0868273 ---*/
21347     +    %if "&NBYTES" ne "" %then %do;
21348     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
21349     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
21350     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
21351     +       %end;
21353     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
21354     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
21355     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
21356     +          %if ^&_exploreobs_def %then
21357     +              %let _exploreobs_def = 1;
21359     +       %end;
21360     +    %end;
21362     +   /*--- Terminate ---*/
21363     +   %term:
21365     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
21366     +%mend ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS1.Ids_DATA(obs=0) ;
MPRINT(EXPLOREOBS):   keep ClaimsRate CustomerAge CustomerIdentity CustomerMonetaryValue EducationalDegree FirstPolicyYear GeographicLiving GrossMonthlySalary HasChildren PremiumsinLOBHealth PremiumsinLOBHousehold PremiumsinLOBLife PremiumsinLOBMotor 
PremiumsinLOBWorkComp ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS1.Ids_DATA : vars= 14 : recl= 120 : max=60000 : def= 6000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
MPRINT(EXPLORESAMPLE):   proc sql;
MPRINT(EXPLORESAMPLE):   reset noprint;
MPRINT(EXPLORESAMPLE):   select count(*) into :popsize from EMWS1.Ids_DATA;
NOTE: View EMWS1.IDS_DATA.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: There were 10296 observations read from the data set INS_PROJ.A2ZINSURANCE.
MPRINT(EXPLORESAMPLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set EMWS1.GrfExpl_VariableSet end=eof;
MPRINT(EXPLORESAMPLE):   where (SAMPLEROLE='STRATIFICATION') or (ROLE in('TARGET', 'SEGMENT') and LEVEL ne 'INTERVAL' and SAMPLEROLE in('STRATIFICATION', ''));
MPRINT(EXPLORESAMPLE):   call symput('VVStratVar_'!!strip(put(_N_, best.)), "'"!!tranwrd(trim(NAME), "'", "''")!!"'n");
MPRINT(EXPLORESAMPLE):   call symput('StratVar_'!!strip(put(_N_, best.)), trim(NAME));
MPRINT(EXPLORESAMPLE):   if eof then call symput('StratNum', strip(put(_N_, best.)));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 0 observations read from the data set EMWS1.GRFEXPL_VARIABLESET.
      WHERE (SAMPLEROLE='STRATIFICATION') or (ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL') and SAMPLEROLE in (' ', 'STRATIFICATION'));
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

*------------------------------------------------------------*
* Simple random sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS1.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS1.Ids_DATA (keep=ClaimsRate CustomerAge CustomerIdentity CustomerMonetaryValue EducationalDegree FirstPolicyYear GeographicLiving GrossMonthlySalary HasChildren PremiumsinLOBHealth PremiumsinLOBHousehold PremiumsinLOBLife 
PremiumsinLOBMotor PremiumsinLOBWorkComp) ;
MPRINT(EXPLORESAMPLE):   drop _sample_count_;
MPRINT(EXPLORESAMPLE):   if _sample_count_ < 6000 then do;
MPRINT(EXPLORESAMPLE):   if ranuni(12345)*( 10296+1 - _N_) <= (6000 - _sample_count_) then do;
MPRINT(EXPLORESAMPLE):   _sample_count_ + 1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS1.IDS_DATA.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: There were 10296 observations read from the data set INS_PROJ.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: The data set EMWS1.GRFEXPL_SAMPLE_DATA has 6000 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
21369     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
21370     +   filename macFile catalog 'work.emutil.macro.source';
21371     +   %let _METAOBS = 0;
21373     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
21374     +                   or (&metadata eq ) %then %do;
21375     +       %goto doend;
21376     +   %end;
21377     +   data _null_;
21378     +      length _STRING_ $80;
21379     +      retain _STRING_;
21380     +      set &metadata end=eof;
21381     +      file macFile;
21382     +      %if %nrbquote(&where) ne %then %do;
21383     +          %let whereClause = where (%nrbquote(&where));
21384     +          %unquote(&whereClause);
21385     +      %end;
21386     +      if _N_=1 then do;
21387     +         string = "%"!!"macro &name;";
21388     +         put string;
21389     +      end;
21390     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
21391     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
21392     +         if eof then do;
21393     +            put _STRING_;
21394     +            string = "%"!!"mend &name;";
21395     +            put string;
21396     +            %if (&nummacro ne ) %then %do;
21397     +                string = strip(put(_N_, best.));
21398     +                put "%" "global &nummacro;";
21399     +                put "%" "let &nummacro = " string ";";
21400     +                call symput('_METAOBS', string);
21401     +            %end;
21402     +         end;
21403     +      end;
21404     +      else do;
21405     +         put _STRING_;
21406     +         _string_ = TRIM(&key);
21407     +         if eof then do;
21408     +            put _STRING_;
21409     +            string = "%"!!"mend &name;";
21410     +            put string;
21411     +        end;
21412     +      end;
21413     +      if eof then do;
21414     +         string = strip(put(_N_, best.));
21415     +         call symput('_METAOBS', string);
21416     +         %if (&nummacro ne ) %then %do;
21417     +             put "%" "global &nummacro;";
21418     +             put "%" "let &nummacro = " string ";";
21419     +         %end;
21420     +      end;
21421     +   run;
21423     +   %doend:
21424     +   %if ^&_METAOBS %then %do;
21425     +       data _null_;
21426     +          file macFile;
21427     +          put "%" "macro &name;";
21428     +          put "%" "mend &name;";
21429     +          %if (&nummacro ne ) %then %do;
21430     +              put "%" "global &nummacro;";
21431     +              put "%" "let &nummacro = 0;";
21432     +          %end;
21433     +      run;
21434     +   %end;
21435     +   %inc macFile;
21436     +   filename macFile;
21437     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS1.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 14 observations read from the data set EMWS1.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 14 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 1 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Mittwoch, 16. Dezember 2015 19.20 Uhr,
      Last Modified=Mittwoch, 16. Dezember 2015 19.20 Uhr,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD12100_WDFN33788459A_\Prc2\emutil.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO

NOTE: 10 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 72.
NOTE: There were 14 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
21438     +%macro varSample;
21439     +ClaimsRate CustomerAge CustomerIdentity CustomerMonetaryValue
21440     +EducationalDegree FirstPolicyYear GeographicLiving GrossMonthlySalary
21441     +HasChildren PremiumsinLOBHealth PremiumsinLOBHousehold PremiumsinLOBLife
21442     +PremiumsinLOBMotor PremiumsinLOBWorkComp
21443     +%mend varSample;
21444     +%global numVarSample;
21445     +%let numVarSample = 14 ;
21446     +%global numVarSample;
21447     +%let numVarSample = 14 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
21448     +/*------------------------------------------------------------------
21449     +  MACRO EXPLOREOBS
21451     +  SUPPORT:  SASDHD - David Duling
21452     +  PRODUCT:  Enterprise Miner
21454     +  DESCRIPTION:
21455     +  Generates maximum and default numbers of observations to
21456     +  download for visualization depending on the record length.
21458     +  Values were determined by trial and error using typical
21459     +  Windows workstation configurations.
21461     +  Discrete sets of values are returned so that user experience
21462     +  will be consitent with similar sized data sets.
21464     +  These macro variables are set:
21465     +  _exploreobs_max -- maximum number of obs downloadable
21466     +  _exploreobs_def -- default number of obs to be downloaded
21467     +  _exploreobs_recl - record length.  Might be useful for reporting.
21469     +  Use the _exploreobs_max to set limit the GUI selection of
21470     +  observations for downloading.  The GUI selection for obs
21471     +  could be reduced to "Default" and "Max".
21473     +  Parameters
21474     +  data=   libname.memname of input data
21475     +  vars=   subset list of variables.
21476     +          downloading 1 out of 500 really does work like downloading
21477     +          1 out of 1 vars.  Users may select a subset of vars for
21478     +                   visualizations.  Pass in the list as space delimited
21479     +          var names.  If vars is not specified, the record length
21480     +          of the entire data will be used.
21481     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
21483     +  Control
21484     +  Users may control the values by entering these macro variables.
21485     +            EM_EXPLOREOBS_MAX
21486     +            EM_EXPLOREOBS_DEFAULT
21487     +  These values override the computed values.
21489     +  Debugging
21490     +  %let _exploreobs_debug=1 ;
21491     +--------------------------------------------------------------------
21492     +  HISTORY: 20APR2004. sasdhd. pushed.
21493     +           18DEC2004. sasdhd. S0280556.
21494     +           07SEP2007. sasdhd. HK1009586
21495     +--------------------------------------------------------------------*/
21497     +%macro exploreobs(data=,vars=, nbytes=) ;
21499     +   /*--- variable definitions ---*/
21500     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
21501     +   %local xobs xvars xlen vlen xi vname vlist ;
21502     +   %local _exp_source _exp_notes ;
21504     +   /*--- USER definitions ---*/
21505     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
21507     +   /*--- variable intializations ---*/
21508     +   %let _exploreobs_max=0 ;
21509     +   %let _exploreobs_def=0 ;
21510     +   %let _exploreobs_recl=0 ;
21511     +   %let xvars= 0 ;
21512     +   %let xlen = 0 ;
21513     +   %let xobs = 0 ;
21515     +   /*--- data error checks ---*/
21516     +   %if "&data" eq "" %then %do ;
21517     +            %put NOTE: DATA is not specified. ;
21518     +            %goto term ;
21519     +      %end ;
21521     +   %let dsid=%sysfunc(open(&data)) ;
21522     +   %if not &dsid %then %do ;
21523     +            %put NOTE: DATA &data is not available. ;
21524     +            %goto term ;
21525     +      %end ;
21527     +   /*--- if a vars list exists generate a subset ---*/
21528     +   %if &vars ne %then %do ;
21529     +         %let dsid=%sysfunc(close(&dsid)) ;
21530     +         %if &_exploreobs_debug ne 1 %then %do ;
21531     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
21532     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
21533     +                  options nosource nonotes ;
21534     +         %end ;
21535     +         data _exploreobs_temp_data ;
21536     +         set &data(obs=0) ;
21537     +          keep &vars ;
21538     +         run;
21539     +         %if &_exploreobs_debug ne 1 %then %do ;
21540     +                  options &_exp_source &_exp_notes ;
21541     +         %end ;
21542     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
21543     +         %if &dsid eq 0 %then %do ;
21544     +                  %put NOTE: Sample is not available.;
21545     +                  %goto term ;
21546     +            %end ;
21547     +      %end ;
21549     +   /*--- get var attributes ---*/
21550     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
21551     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
21552     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
21553     +   %let dsid= %sysfunc(close(&dsid)) ;
21555     +   /*--- set default and max obs ---*/
21556     +   %let _exploreobs_recl=%eval(&xlen) ;
21557     +   %if &_exploreobs_recl eq 0 %then %do ;
21558     +             %let _exploreobs_max= 0 ;
21559     +             %let _exploreobs_def= 0 ;
21560     +             %goto term ;
21562     +   %end ;
21563     +   %else
21564     +   %if &_exploreobs_recl le 32 %then %do ;
21565     +             %let _exploreobs_max=100000 ;
21566     +             %let _exploreobs_def= 10000 ;
21567     +   %end ;
21568     +   %else
21569     +   %if &_exploreobs_recl le 128 %then %do ;
21570     +             %let _exploreobs_max=60000 ;
21571     +             %let _exploreobs_def= 6000 ;
21572     +   %end ;
21573     +   %else
21574     +   %if &_exploreobs_recl lt 1000 %then %do ;
21575     +             %let _exploreobs_max=20000 ;
21576     +             %let _exploreobs_def= 2000 ;
21577     +   %end ;
21578     +   %else
21579     +   %if &_exploreobs_recl lt 5000 %then %do ;
21580     +             %let _exploreobs_max= 10000 ;
21581     +             %let _exploreobs_def=  1000 ;
21582     +   %end ;
21583     +   %else
21584     +   %if &_exploreobs_recl lt 20000 %then %do ;
21585     +             %let _exploreobs_max= 5000 ;
21586     +             %let _exploreobs_def=  500 ;
21587     +   %end ;
21588     +   %else %do ;
21589     +             %let _exploreobs_max= 1000 ;
21590     +             %let _exploreobs_def=  200 ;
21591     +   %end ;
21593     +   /*--- Users options ---*/
21594     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
21595     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
21596     +   %end;
21597     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
21598     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
21599     +   %end;
21601     +    /*--- S0868273 ---*/
21602     +    %if "&NBYTES" ne "" %then %do;
21603     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
21604     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
21605     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
21606     +       %end;
21608     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
21609     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
21610     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
21611     +          %if ^&_exploreobs_def %then
21612     +              %let _exploreobs_def = 1;
21614     +       %end;
21615     +    %end;
21617     +   /*--- Terminate ---*/
21618     +   %term:
21620     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
21621     +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS1.Ids_DATA(obs=0) ;
MPRINT(EXPLOREOBS):   keep ClaimsRate CustomerAge CustomerIdentity CustomerMonetaryValue EducationalDegree FirstPolicyYear GeographicLiving GrossMonthlySalary HasChildren PremiumsinLOBHealth PremiumsinLOBHousehold PremiumsinLOBLife PremiumsinLOBMotor 
PremiumsinLOBWorkComp ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS1.Ids_DATA : vars= 14 : recl= 120 : max=60000 : def= 6000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
MPRINT(EXPLORESAMPLE):   proc sql;
MPRINT(EXPLORESAMPLE):   reset noprint;
MPRINT(EXPLORESAMPLE):   select count(*) into :popsize from EMWS1.Ids_DATA;
NOTE: View EMWS1.IDS_DATA.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
NOTE: There were 10296 observations read from the data set INS_PROJ.A2ZINSURANCE.
MPRINT(EXPLORESAMPLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(EXPLORESAMPLE):   data _null_;
MPRINT(EXPLORESAMPLE):   set EMWS1.GrfExpl_VariableSet end=eof;
MPRINT(EXPLORESAMPLE):   where (SAMPLEROLE='STRATIFICATION') or (ROLE in('TARGET', 'SEGMENT') and LEVEL ne 'INTERVAL' and SAMPLEROLE in('STRATIFICATION', ''));
MPRINT(EXPLORESAMPLE):   call symput('VVStratVar_'!!strip(put(_N_, best.)), "'"!!tranwrd(trim(NAME), "'", "''")!!"'n");
MPRINT(EXPLORESAMPLE):   call symput('StratVar_'!!strip(put(_N_, best.)), trim(NAME));
MPRINT(EXPLORESAMPLE):   if eof then call symput('StratNum', strip(put(_N_, best.)));
MPRINT(EXPLORESAMPLE):   run;

NOTE: There were 0 observations read from the data set EMWS1.GRFEXPL_VARIABLESET.
      WHERE (SAMPLEROLE='STRATIFICATION') or (ROLE in ('SEGMENT', 'TARGET') and (LEVEL not = 'INTERVAL') and SAMPLEROLE in (' ', 'STRATIFICATION'));
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

*------------------------------------------------------------*
* Simple random sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS1.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS1.Ids_DATA (keep=ClaimsRate CustomerAge CustomerIdentity CustomerMonetaryValue EducationalDegree FirstPolicyYear GeographicLiving GrossMonthlySalary HasChildren PremiumsinLOBHealth PremiumsinLOBHousehold PremiumsinLOBLife 
PremiumsinLOBMotor PremiumsinLOBWorkComp) ;
MPRINT(EXPLORESAMPLE):   drop _sample_count_;
MPRINT(EXPLORESAMPLE):   if _sample_count_ < 6000 then do;
MPRINT(EXPLORESAMPLE):   if ranuni(12345)*( 10296+1 - _N_) <= (6000 - _sample_count_) then do;
MPRINT(EXPLORESAMPLE):   _sample_count_ + 1;
MPRINT(EXPLORESAMPLE):   output;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   end;
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS1.IDS_DATA.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      
NOTE: There were 10296 observations read from the data set INS_PROJ.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: The data set EMWS1.GRFEXPL_SAMPLE_DATA has 6000 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21624      *------------------------------------------------------------*;
21625      * End TRAIN: GrfExpl;
21626      *------------------------------------------------------------*;
21627      

21628      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21629      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
21630      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21631      ;
MPRINT(EM_DIAGRAM):   ;
21632      ;
MPRINT(EM_DIAGRAM):   ;
21633      ;
MPRINT(EM_DIAGRAM):   ;
21634      ;
MPRINT(EM_DIAGRAM):   ;
21635      quit;
MPRINT(EM_DIAGRAM):   quit;
21636      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21637      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
21638      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21639      /*; *"; *'; */
21640      ;
MPRINT(EM_DIAGRAM):   ;
21641      run;
MPRINT(EM_DIAGRAM):   run;
21642      quit;
MPRINT(EM_DIAGRAM):   quit;
21643      /* Reset EM Options */
21644      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
21645      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
21646      goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=WMF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
