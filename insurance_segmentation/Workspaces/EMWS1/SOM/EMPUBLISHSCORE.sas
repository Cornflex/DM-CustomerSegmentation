*****************************************;
*** Begin Scoring Code from PROC DMVQ ***;
*****************************************;


*** Begin Class Look-up, Standardization, Replacement ;
drop _dm_bad; _dm_bad = 0;

*** Standardize ClaimsRate ;
drop T_ClaimsRate ;
if missing( ClaimsRate ) then T_ClaimsRate = .;
else T_ClaimsRate = (ClaimsRate - 0.67794677876012) * 3.19941338729829;

*** Standardize CustomerMonetaryValue ;
drop T_CustomerMonetaryValue ;
if missing( CustomerMonetaryValue ) then T_CustomerMonetaryValue = .;
else T_CustomerMonetaryValue = (CustomerMonetaryValue
         - 216.160594666394) * 0.00411467214717;

*** Standardize IMP_GrossMonthlySalary ;
drop T_IMP_GrossMonthlySalary ;
if missing( IMP_GrossMonthlySalary ) then T_IMP_GrossMonthlySalary = .;
else T_IMP_GrossMonthlySalary = (IMP_GrossMonthlySalary
         - 5037.76267683033) * 0.00052230054959;

*** Standardize IMP_REP_CustomerAge ;
drop T_IMP_REP_CustomerAge ;
if missing( IMP_REP_CustomerAge ) then T_IMP_REP_CustomerAge = .;
else T_IMP_REP_CustomerAge = (IMP_REP_CustomerAge
         - 48.3002159661034) * 0.05849681051166;

*** Standardize IMP_REP_FirstPolicyYear ;
drop T_IMP_REP_FirstPolicyYear ;
if missing( IMP_REP_FirstPolicyYear ) then T_IMP_REP_FirstPolicyYear = .;
else T_IMP_REP_FirstPolicyYear = (IMP_REP_FirstPolicyYear
         - 1985.99729349606) * 0.1517962336811;

*** Standardize TOTAL_PREMIUM ;
drop T_TOTAL_PREMIUM ;
if missing( TOTAL_PREMIUM ) then T_TOTAL_PREMIUM = .;
else T_TOTAL_PREMIUM = (TOTAL_PREMIUM - 748.218286034205) * 0.00576895696549;

*** Generate dummy variables for IMP_EducationalDegree ;
drop T_IMP_EducationalDegree ;
if missing( IMP_EducationalDegree ) then do;
   T_IMP_EducationalDegree = .;
end;
else do;
   length _dm15 $ 15; drop _dm15 ;
   _dm15 = put( IMP_EducationalDegree , $CHAR15. );
   %DMNORMIP( _dm15 )
   if _dm15 = '3 - BSC/MSC'  then do;
      T_IMP_EducationalDegree = 0.73555748368902;
   end;
   else if _dm15 = '2 - HIGH SCHOOL'  then do;
      T_IMP_EducationalDegree = -0.80523581525977;
   end;
   else if _dm15 = '1 - BASIC'  then do;
      T_IMP_EducationalDegree = -1.6661375152455;
   end;
   else if _dm15 = '4 - PHD'  then do;
      T_IMP_EducationalDegree = 1.7532834175406;
   end;
   else do;
      T_IMP_EducationalDegree = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for IMP_GeographicLiving ;
drop IMP_GeographicLiving1 IMP_GeographicLiving2 IMP_GeographicLiving3 
        IMP_GeographicLiving4 ;
if missing( IMP_GeographicLiving ) then do;
   IMP_GeographicLiving1 = .;
   IMP_GeographicLiving2 = .;
   IMP_GeographicLiving3 = .;
   IMP_GeographicLiving4 = .;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( IMP_GeographicLiving , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '4'  then do;
      IMP_GeographicLiving1 = -0.32404062826594;
      IMP_GeographicLiving2 = -0.16763086377407;
      IMP_GeographicLiving3 = -0.25011493503349;
      IMP_GeographicLiving4 = 0.6085514560971;
   end;
   else if _dm12 = '1'  then do;
      IMP_GeographicLiving1 = 0.77142936442447;
      IMP_GeographicLiving2 = -0.16763086377407;
      IMP_GeographicLiving3 = -0.25011493503349;
      IMP_GeographicLiving4 = -0.41076962910268;
   end;
   else if _dm12 = '3'  then do;
      IMP_GeographicLiving1 = -0.32404062826594;
      IMP_GeographicLiving2 = -0.16763086377407;
      IMP_GeographicLiving3 = 0.99943834172648;
      IMP_GeographicLiving4 = -0.41076962910268;
   end;
   else if _dm12 = '2'  then do;
      IMP_GeographicLiving1 = -0.32404062826594;
      IMP_GeographicLiving2 = 1.49121975680923;
      IMP_GeographicLiving3 = -0.25011493503349;
      IMP_GeographicLiving4 = -0.41076962910268;
   end;
   else do;
      IMP_GeographicLiving1 = .;
      IMP_GeographicLiving2 = .;
      IMP_GeographicLiving3 = .;
      IMP_GeographicLiving4 = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for IMP_HasChildren ;
drop IMP_HasChildren0 IMP_HasChildren1 ;
if missing( IMP_HasChildren ) then do;
   IMP_HasChildren0 = .;
   IMP_HasChildren1 = .;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( IMP_HasChildren , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      IMP_HasChildren0 = -0.45354645930186;
      IMP_HasChildren1 = 0.45354645930186;
   end;
   else if _dm12 = '0'  then do;
      IMP_HasChildren0 = 1.10231025194501;
      IMP_HasChildren1 = -1.10231025194501;
   end;
   else do;
      IMP_HasChildren0 = .;
      IMP_HasChildren1 = .;
      _DM_BAD = 1;
   end;
end;

*** End Class Look-up, Standardization, Replacement ;


*** Omitted Cases;
if _dm_bad then do;
   SOM_SEGMENT = .; Distance = .;
   goto SOMvlex ;
end; *** omitted;

*** Compute Distances and Cluster Membership;
label SOM_SEGMENT = 'SOM Segment ID' ;
label Distance = 'Distance' ;
array SOMvads [4] _temporary_;
drop _vqclus _vqmvar _vqnvar;
_vqmvar = 0;
do _vqclus = 1 to 4; SOMvads [_vqclus] = 0; end;
if not missing( T_ClaimsRate ) then do;
   SOMvads [1] + ( T_ClaimsRate - -1.25517180534964 )**2;
   SOMvads [2] + ( T_ClaimsRate - -0.34130240407873 )**2;
   SOMvads [3] + ( T_ClaimsRate - 0.83054969460279 )**2;
   SOMvads [4] + ( T_ClaimsRate - 0.07067935204244 )**2;
end;
else _vqmvar + 1;
if not missing( T_CustomerMonetaryValue ) then do;
   SOMvads [1] + ( T_CustomerMonetaryValue - 1.03222745653387 )**2;
   SOMvads [2] + ( T_CustomerMonetaryValue - 0.7895222548465 )**2;
   SOMvads [3] + ( T_CustomerMonetaryValue - -0.81231629827361 )**2;
   SOMvads [4] + ( T_CustomerMonetaryValue - -0.06504658269929 )**2;
end;
else _vqmvar + 1;
if not missing( T_IMP_GrossMonthlySalary ) then do;
   SOMvads [1] + ( T_IMP_GrossMonthlySalary - -0.06707159557092 )**2;
   SOMvads [2] + ( T_IMP_GrossMonthlySalary - -1.25781786484766 )**2;
   SOMvads [3] + ( T_IMP_GrossMonthlySalary - -0.32587827951253 )**2;
   SOMvads [4] + ( T_IMP_GrossMonthlySalary - 1.1292784630376 )**2;
end;
else _vqmvar + 1;
if not missing( T_IMP_REP_CustomerAge ) then do;
   SOMvads [1] + ( T_IMP_REP_CustomerAge - -0.10692632498744 )**2;
   SOMvads [2] + ( T_IMP_REP_CustomerAge - -1.34337159296403 )**2;
   SOMvads [3] + ( T_IMP_REP_CustomerAge - -0.29129690682388 )**2;
   SOMvads [4] + ( T_IMP_REP_CustomerAge - 1.2575703160448 )**2;
end;
else _vqmvar + 1;
if not missing( T_IMP_REP_FirstPolicyYear ) then do;
   SOMvads [1] + ( T_IMP_REP_FirstPolicyYear - -0.11107058598029 )**2;
   SOMvads [2] + ( T_IMP_REP_FirstPolicyYear - 0.00636335517055 )**2;
   SOMvads [3] + ( T_IMP_REP_FirstPolicyYear - -0.00637748123013 )**2;
   SOMvads [4] + ( T_IMP_REP_FirstPolicyYear - 0.20711092326321 )**2;
end;
else _vqmvar + 1;
if not missing( T_TOTAL_PREMIUM ) then do;
   SOMvads [1] + ( T_TOTAL_PREMIUM - -0.31191325268047 )**2;
   SOMvads [2] + ( T_TOTAL_PREMIUM - 1.45454923550056 )**2;
   SOMvads [3] + ( T_TOTAL_PREMIUM - -0.36648717891179 )**2;
   SOMvads [4] + ( T_TOTAL_PREMIUM - 0.05525288976225 )**2;
end;
else _vqmvar + 1;
if not missing( T_IMP_EducationalDegree ) then do;
   SOMvads [1] + ( T_IMP_EducationalDegree - 0.28242865790302 )**2;
   SOMvads [2] + ( T_IMP_EducationalDegree - -0.98175281173005 )**2;
   SOMvads [3] + ( T_IMP_EducationalDegree - 0.10361672767739 )**2;
   SOMvads [4] + ( T_IMP_EducationalDegree - 0.02013504420802 )**2;
end;
else _vqmvar + 0.99999999999999;
if not missing( IMP_GeographicLiving1 ) then do;
   SOMvads [1] + ( IMP_GeographicLiving1 - 0.05974361634316 )**2;
   SOMvads [2] + ( IMP_GeographicLiving1 - 0.01482759247105 )**2;
   SOMvads [3] + ( IMP_GeographicLiving1 - -0.01993915846831 )**2;
   SOMvads [4] + ( IMP_GeographicLiving1 - -0.06440810718549 )**2;
end;
else _vqmvar + 0.25;
if not missing( IMP_GeographicLiving2 ) then do;
   SOMvads [1] + ( IMP_GeographicLiving2 - 0.03350163546329 )**2;
   SOMvads [2] + ( IMP_GeographicLiving2 - 0.04248955919997 )**2;
   SOMvads [3] + ( IMP_GeographicLiving2 - -0.02441148245593 )**2;
   SOMvads [4] + ( IMP_GeographicLiving2 - 0.08397525417257 )**2;
end;
else _vqmvar + 0.25;
if not missing( IMP_GeographicLiving3 ) then do;
   SOMvads [1] + ( IMP_GeographicLiving3 - -0.03042151911071 )**2;
   SOMvads [2] + ( IMP_GeographicLiving3 - 0.02804575508764 )**2;
   SOMvads [3] + ( IMP_GeographicLiving3 - 0.05149883073965 )**2;
   SOMvads [4] + ( IMP_GeographicLiving3 - -0.01858637490278 )**2;
end;
else _vqmvar + 0.24999999999999;
if not missing( IMP_GeographicLiving4 ) then do;
   SOMvads [1] + ( IMP_GeographicLiving4 - -0.05136027421938 )**2;
   SOMvads [2] + ( IMP_GeographicLiving4 - -0.06278391103058 )**2;
   SOMvads [3] + ( IMP_GeographicLiving4 - -0.0084567231626 )**2;
   SOMvads [4] + ( IMP_GeographicLiving4 - 0.02349210519286 )**2;
end;
else _vqmvar + 0.24999999999999;
if not missing( IMP_HasChildren0 ) then do;
   SOMvads [1] + ( IMP_HasChildren0 - -0.41876366002261 )**2;
   SOMvads [2] + ( IMP_HasChildren0 - -0.12081082388353 )**2;
   SOMvads [3] + ( IMP_HasChildren0 - -0.38413698505137 )**2;
   SOMvads [4] + ( IMP_HasChildren0 - 1.08076899164473 )**2;
end;
else _vqmvar + 0.5;
if not missing( IMP_HasChildren1 ) then do;
   SOMvads [1] + ( IMP_HasChildren1 - 0.41876366002261 )**2;
   SOMvads [2] + ( IMP_HasChildren1 - 0.12081082388353 )**2;
   SOMvads [3] + ( IMP_HasChildren1 - 0.38413698505137 )**2;
   SOMvads [4] + ( IMP_HasChildren1 - -1.08076899164473 )**2;
end;
else _vqmvar + 0.5;
_vqnvar = 9 - _vqmvar;
if _vqnvar <= 1.3301360013429E-11 then do;
   SOM_SEGMENT = .; Distance = .;
end;
else do;
   SOM_SEGMENT = 1; Distance = SOMvads [1];
   _vqfzdst = Distance * 0.99999999999988; drop _vqfzdst;
   do _vqclus = 2 to 4;
      if SOMvads [_vqclus] < _vqfzdst then do;
         SOM_SEGMENT = _vqclus; Distance = SOMvads [_vqclus];
         _vqfzdst = Distance * 0.99999999999988;
      end;
   end;
   Distance = sqrt(Distance * (9 / _vqnvar));
end;

*** SOM Row and Column;
label SOM_DIMENSION1 = 'SOM Dimension1' ;
label SOM_DIMENSION2 = 'SOM Dimension2' ;
label SOM_ID = 'SOM ID' ;
length SOM_ID $8;
if SOM_SEGMENT > 0 then do;
   SOM_DIMENSION1 = 1 + floor(( SOM_SEGMENT - 1) / 2);
   SOM_DIMENSION2 = 1 + mod( SOM_SEGMENT - 1, 2 );
   SOM_ID = put( SOM_DIMENSION1 ,8. );
   SOM_ID = left( SOM_ID );
   _vqlen = 1 + length( SOM_ID ); drop _vqlen;
   substr( SOM_ID , _vqlen , 1 ) = ':';
   length _dm8 $8; _dm8 = put( SOM_DIMENSION2 , 8. );
   _dm8 = left(_dm8); drop _dm8;
   substr( SOM_ID , _vqlen+1 ) = _dm8;
end;
else do; SOM_DIMENSION1 = .; SOM_DIMENSION2 = .; SOM_ID = ' '; end;
SOMvlex :;

***************************************;
*** End Scoring Code from PROC DMVQ ***;
***************************************;
