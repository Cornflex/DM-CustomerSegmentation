MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 29, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "01:32:21" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 29, 2015
Time:                01:32:21
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2VMHD0T "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\Trans\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2VMHD0T new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\Trans\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 29, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "01:32:21" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                raquel";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\Trans\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\Trans\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\Trans\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\Trans\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 29, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "01:32:21" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                raquel";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\Trans\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\Trans\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\Trans\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ '\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\Trans\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
20861      proc freq data=EMWS1.Trans_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Trans_VariableSet noprint;
20862      table ROLE*LEVEL/out=WORK.TransMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TransMETA;
20863      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set EMWS1.TRANS_VARIABLESET.
NOTE: The data set WORK.TRANSMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20864      proc print data=WORK.TransMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TransMETA label noobs;
20865      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
20866      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
20867      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
20868      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
20869      run;

NOTE: There were 5 observations read from the data set WORK.TRANSMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20870      title10;
MPRINT(EM_DIAGRAM):   title10;
20871      data WORK.M20YJSR8;
MPRINT(EM_DIAGRAM):    data WORK.M20YJSR8;
20872      set WORK.M20YJSR8;
MPRINT(EM_DIAGRAM):   set WORK.M20YJSR8;
20873      if (METHOD='NONE' and ROLE ne 'FREQ') or (role = 'REJECTED' and METHOD = 'DEFAULT') then delete;
MPRINT(EM_DIAGRAM):   if (METHOD='NONE' and ROLE ne 'FREQ') or (role = 'REJECTED' and METHOD = 'DEFAULT') then delete;
20874      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set WORK.M20YJSR8.
NOTE: The data set WORK.M20YJSR8 has 13 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpnobs from EMWS1.Impt_TRAIN;
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 10296 observations read from the data set INS_PROJ.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
      
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
MPRINT(EM_DIAGRAM):   quit;
20939      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
20940      * Trans: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   * Trans: Computing Summary Statistics;
20941      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20942      data WORK.M07GP3A2;
MPRINT(EM_DIAGRAM):   data WORK.M07GP3A2;
20943      set WORK.M07GP3A2;
MPRINT(EM_DIAGRAM):   set WORK.M07GP3A2;
20944      if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
20945      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set WORK.M07GP3A2.
NOTE: The data set WORK.M07GP3A2 has 13 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20946      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
20947      * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
20948      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
20949      %macro DMDBClass;
20950          IMP_CustomerAge(ASC) IMP_EducationalDegree(ASC) IMP_GeographicLiving(ASC)
20951         IMP_HasChildren(ASC)
20952      %mend DMDBClass;
20953      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
20954      * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
20955      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
20956      %macro DMDBVar;
20957          ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary
20958         IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor
20959         IMP_PremiumsinLOBWorkComp IMP_REP_FirstPolicyYear PremiumsinLOBHousehold
20960      %mend DMDBVar;
20961      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20962      * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
20963      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20964      proc dmdb batch data=EMWS1.Impt_TRAIN
20965      dmdbcat=WORK.EM_DMDB
20966      classout=WORK.Transclassout
20967      maxlevel = 513
20968      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Impt_TRAIN dmdbcat=WORK.EM_DMDB classout=WORK.Transclassout maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
20969      class %DMDBClass;
MPRINT(DMDBCLASS):   IMP_CustomerAge(ASC) IMP_EducationalDegree(ASC) IMP_GeographicLiving(ASC) IMP_HasChildren(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
20970      var %DMDBVar;
MPRINT(DMDBVAR):   ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_FirstPolicyYear PremiumsinLOBHousehold
MPRINT(EM_DIAGRAM):  ;
20971      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 10296   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INS_PROJ.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
      
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set WORK.TRANSCLASSOUT has 78 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.12 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
20972      quit;
20973      *--- end code ---*;

20974      data WORK.TransINTERVALMETA;
MPRINT(EM_DIAGRAM):    data WORK.TransINTERVALMETA;
20975      set WORK.M20YJSR8;
MPRINT(EM_DIAGRAM):   set WORK.M20YJSR8;
20976      if LEVEL ne 'INTERVAL' then delete;
MPRINT(EM_DIAGRAM):   if LEVEL ne 'INTERVAL' then delete;
20977      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set WORK.M20YJSR8.
NOTE: The data set WORK.TRANSINTERVALMETA has 9 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20978      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
20979      * Trans: Determining Variables to Scale;
MPRINT(EM_DIAGRAM):   * Trans: Determining Variables to Scale;
20980      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20981      data WORK.M33K70_Y;
MPRINT(EM_DIAGRAM):   data WORK.M33K70_Y;
20982      set WORK.M33K70_Y;
MPRINT(EM_DIAGRAM):   set WORK.M33K70_Y;
20983      where (TYPE="N" and (METHOD in("MAX_NORM", "MAX_CORR", "EQUALIZE", "OP_MAX_NORM", "OP_EQUALIZE"))) or (ROLE eq "FREQ");
MPRINT(EM_DIAGRAM):   where (TYPE="N" and (METHOD in("MAX_NORM", "MAX_CORR", "EQUALIZE", "OP_MAX_NORM", "OP_EQUALIZE"))) or (ROLE eq "FREQ");
20984      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK.M33K70_Y.
      WHERE ((TYPE='N') and METHOD in ('EQUALIZE', 'MAX_CORR', 'MAX_NORM', 'OP_EQUALIZE', 'OP_MAX_NORM')) or (ROLE='FREQ');
NOTE: The data set WORK.M33K70_Y has 0 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

*------------------------------------------------------------* 
*  Trans: Optimal binning transformation requires a targetvariable.  Transformation will be ignored. 
*------------------------------------------------------------* 
*------------------------------------------------------------* 
*  Trans: Equalize transformation requires a class target variable.  Transformation will be ignored. 
*------------------------------------------------------------* 
*------------------------------------------------------------* 
*  Trans: Optimize equalize max. transformation requires a class target variable.  Transformation will be ignored. 
*------------------------------------------------------------* 
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.18 seconds
      
20987      %exploreSample(DATA=EMWS1.Impt_TRAIN, OUTPUT=EMWS1.Trans_SAMPLE_DATA, METADATA=EMWS1.Impt_CMeta_TRAIN, VARS=, METHOD=FIRSTN, SIZE=DEFAULT, ALPHA=0.01, PVALUE=0.01, SEED=12345);
MPRINT(EM_DIAGRAM):     
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
20988     +/*------------------------------------------------------------------
20989     +  MACRO EXPLOREOBS
20991     +  SUPPORT:  SASDHD - David Duling
20992     +  PRODUCT:  Enterprise Miner
20994     +  DESCRIPTION:
20995     +  Generates maximum and default numbers of observations to
20996     +  download for visualization depending on the record length.
20998     +  Values were determined by trial and error using typical
20999     +  Windows workstation configurations.
21001     +  Discrete sets of values are returned so that user experience
21002     +  will be consitent with similar sized data sets.
21004     +  These macro variables are set:
21005     +  _exploreobs_max -- maximum number of obs downloadable
21006     +  _exploreobs_def -- default number of obs to be downloaded
21007     +  _exploreobs_recl - record length.  Might be useful for reporting.
21009     +  Use the _exploreobs_max to set limit the GUI selection of
21010     +  observations for downloading.  The GUI selection for obs
21011     +  could be reduced to "Default" and "Max".
21013     +  Parameters
21014     +  data=   libname.memname of input data
21015     +  vars=   subset list of variables.
21016     +          downloading 1 out of 500 really does work like downloading
21017     +          1 out of 1 vars.  Users may select a subset of vars for
21018     +                   visualizations.  Pass in the list as space delimited
21019     +          var names.  If vars is not specified, the record length
21020     +          of the entire data will be used.
21021     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
21023     +  Control
21024     +  Users may control the values by entering these macro variables.
21025     +            EM_EXPLOREOBS_MAX
21026     +            EM_EXPLOREOBS_DEFAULT
21027     +  These values override the computed values.
21029     +  Debugging
21030     +  %let _exploreobs_debug=1 ;
21031     +--------------------------------------------------------------------
21032     +  HISTORY: 20APR2004. sasdhd. pushed.
21033     +           18DEC2004. sasdhd. S0280556.
21034     +           07SEP2007. sasdhd. HK1009586
21035     +--------------------------------------------------------------------*/
21037     +%macro exploreobs(data=,vars=, nbytes=) ;
21039     +   /*--- variable definitions ---*/
21040     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
21041     +   %local xobs xvars xlen vlen xi vname vlist ;
21042     +   %local _exp_source _exp_notes ;
21044     +   /*--- USER definitions ---*/
21045     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
21047     +   /*--- variable intializations ---*/
21048     +   %let _exploreobs_max=0 ;
21049     +   %let _exploreobs_def=0 ;
21050     +   %let _exploreobs_recl=0 ;
21051     +   %let xvars= 0 ;
21052     +   %let xlen = 0 ;
21053     +   %let xobs = 0 ;
21055     +   /*--- data error checks ---*/
21056     +   %if "&data" eq "" %then %do ;
21057     +            %put NOTE: DATA is not specified. ;
21058     +            %goto term ;
21059     +      %end ;
21061     +   %let dsid=%sysfunc(open(&data)) ;
21062     +   %if not &dsid %then %do ;
21063     +            %put NOTE: DATA &data is not available. ;
21064     +            %goto term ;
21065     +      %end ;
21067     +   /*--- if a vars list exists generate a subset ---*/
21068     +   %if &vars ne %then %do ;
21069     +         %let dsid=%sysfunc(close(&dsid)) ;
21070     +         %if &_exploreobs_debug ne 1 %then %do ;
21071     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
21072     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
21073     +                  options nosource nonotes ;
21074     +         %end ;
21075     +         data _exploreobs_temp_data ;
21076     +         set &data(obs=0) ;
21077     +          keep &vars ;
21078     +         run;
21079     +         %if &_exploreobs_debug ne 1 %then %do ;
21080     +                  options &_exp_source &_exp_notes ;
21081     +         %end ;
21082     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
21083     +         %if &dsid eq 0 %then %do ;
21084     +                  %put NOTE: Sample is not available.;
21085     +                  %goto term ;
21086     +            %end ;
21087     +      %end ;
21089     +   /*--- get var attributes ---*/
21090     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
21091     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
21092     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
21093     +   %let dsid= %sysfunc(close(&dsid)) ;
21095     +   /*--- set default and max obs ---*/
21096     +   %let _exploreobs_recl=%eval(&xlen) ;
21097     +   %if &_exploreobs_recl eq 0 %then %do ;
21098     +             %let _exploreobs_max= 0 ;
21099     +             %let _exploreobs_def= 0 ;
21100     +             %goto term ;
21102     +   %end ;
21103     +   %else
21104     +   %if &_exploreobs_recl le 32 %then %do ;
21105     +             %let _exploreobs_max=100000 ;
21106     +             %let _exploreobs_def= 10000 ;
21107     +   %end ;
21108     +   %else
21109     +   %if &_exploreobs_recl le 128 %then %do ;
21110     +             %let _exploreobs_max=60000 ;
21111     +             %let _exploreobs_def= 6000 ;
21112     +   %end ;
21113     +   %else
21114     +   %if &_exploreobs_recl lt 1000 %then %do ;
21115     +             %let _exploreobs_max=20000 ;
21116     +             %let _exploreobs_def= 2000 ;
21117     +   %end ;
21118     +   %else
21119     +   %if &_exploreobs_recl lt 5000 %then %do ;
21120     +             %let _exploreobs_max= 10000 ;
21121     +             %let _exploreobs_def=  1000 ;
21122     +   %end ;
21123     +   %else
21124     +   %if &_exploreobs_recl lt 20000 %then %do ;
21125     +             %let _exploreobs_max= 5000 ;
21126     +             %let _exploreobs_def=  500 ;
21127     +   %end ;
21128     +   %else %do ;
21129     +             %let _exploreobs_max= 1000 ;
21130     +             %let _exploreobs_def=  200 ;
21131     +   %end ;
21133     +   /*--- Users options ---*/
21134     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
21135     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
21136     +   %end;
21137     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
21138     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
21139     +   %end;
21141     +    /*--- S0868273 ---*/
21142     +    %if "&NBYTES" ne "" %then %do;
21143     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
21144     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
21145     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
21146     +       %end;
21148     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
21149     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
21150     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
21151     +          %if ^&_exploreobs_def %then
21152     +              %let _exploreobs_def = 1;
21154     +       %end;
21155     +    %end;
21157     +   /*--- Terminate ---*/
21158     +   %term:
21160     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
21161     +%mend ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
NOTE: EXPLOREOBS EMWS1.Impt_TRAIN : vars= 26 : recl= 218 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS1.Trans_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS1.Impt_TRAIN(obs= 2000 );
MPRINT(EXPLORESAMPLE):   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 10296 observations read from the data set INS_PROJ.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
      
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 2000 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set EMWS1.TRANS_SAMPLE_DATA has 2000 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
