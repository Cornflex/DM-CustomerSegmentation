*------------------------------------------------------------*
User:                D059331
Date:                December 30, 2015
Time:                15:20:31
Site:                70107571
Platform:            X64_8PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 30, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:20:23" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 30, 2015
Time:                15:20:23
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1QQ9LCC "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1QQ9LCC new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 30, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:20:23" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                D059331";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 30, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:20:23" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                D059331";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
47419      proc freq data=EMWS1.Filter_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Filter_VariableSet noprint;
47420      table ROLE*LEVEL/out=WORK.FilterMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.FilterMETA;
47421      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set EMWS1.FILTER_VARIABLESET.
NOTE: The data set WORK.FILTERMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
47422      proc print data=WORK.FilterMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.FilterMETA label noobs;
47423      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
47424      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
47425      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
47426      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
47427      run;
 
NOTE: There were 5 observations read from the data set WORK.FILTERMETA.
NOTE: The PROCEDURE PRINT printed page 12.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47428      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Filter: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M3D6J4Q2;
MPRINT(EM_DIAGRAM):   set WORK.M3D6J4Q2;
MPRINT(EM_DIAGRAM):   if CALCMETHOD eq 'DEFAULT' then do;
MPRINT(EM_DIAGRAM):   if ROLE ne 'INPUT' then CALCMETHOD='NONE';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if level='INTERVAL' then CALCMETHOD='NONE';
MPRINT(EM_DIAGRAM):   else CALCMETHOD='NONE';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if KEEPMISSING eq 'D' then do;
MPRINT(EM_DIAGRAM):   if ROLE ne 'INPUT' then KEEPMISSING='Y';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if level='INTERVAL' then KEEPMISSING='Y';
MPRINT(EM_DIAGRAM):   else KEEPMISSING='Y';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if CALCMETHOD='NONE' and KEEPMISSING='Y' then delete;
MPRINT(EM_DIAGRAM):   run;
47451      filename cdist catalog 'SASHELP.EMUTIL.EM_CLASSDIST.SOURCE';
MPRINT(EM_DIAGRAM):    filename cdist catalog 'SASHELP.EMUTIL.EM_CLASSDIST.SOURCE';
47452      %inc cdist;
NOTE: %INCLUDE (level 1) file CDIST is file SASHELP.EMUTIL.EM_CLASSDIST.SOURCE.
47453     +%macro class_profile(DATA=, OUTPUT=_CLASS, VARS=, METADATA=, WHERE=, STAT=_STAT, FREQ=);
47454     +   %if %INDEX(&EM_DEBUG, LOG SOURCE) %then %do;
47455     +       %put *** Statistics for Class variables ***;
47456     +       %put >>> DATA= &data  OUTPUT= &output;
47457     +       %put >>> VAR= &vars;
47458     +       %put >>> WHERE=  &where;
47459     +       %put >>> FREQ=  &freq;
47460     +   %end;
47462     +      /* Process metadata data set */
47463     +   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
47464     +   %if %sysfunc(exist(&metadata))>0 and ("&metadata" ne "") %then %do;
47465     +       %let FREQ=;
47466     +       %let _nobs=0;
47467     +       data _null;
47468     +          set &metadata(where=(LEVEL ne 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
47469     +          if eof then call symput('_nobs', put(_N_, best.));
47470     +       run;
47471     +       %if "&_nobs" ne "0" %then %do;
47472     +           data _null_;
47473     +              file _mac;
47474     +              length _VARS $80; retain _vars;
47475     +              if _n_ =1 then put '%macro _vars;';
47476     +              set &metadata end=eof;
47477     +              where LEVEL ne 'INTERVAL' or ROLE='FREQ';
47478     +              if ROLE='FREQ' then call symput('FREQ', NAME);
47479     +              else do;
47480     +                 if length(strip(_vars)) + length(strip(NAME)) + 1 <80  then
47481     +                    _vars = strip(_vars)!! ' ' !!strip(NAME);
47482     +                 else do;
47483     +                    put _Vars;
47484     +                    _vars = strip(NAME);
47485     +                 end;
47486     +              end;
47487     +              if eof then do;
47488     +                 put _Vars;
47489     +                 put '%mend _vars;';
47490     +              end;
47491     +           run;
47492     +       %end;
47493     +       %else %do;
47494     +           data _null_;
47495     +              file _mac;
47496     +              put '%macro _vars;';
47497     +              put '%mend _vars;';
47498     +           run;
47499     +       %end;
47500     +   %end;
47501     +   %else %do;
47502     +       data _null_;
47503     +          file _mac;
47504     +          put '%macro _vars;';
47505     +          put '%mend _vars;';
47506     +       run;
47507     +   %end;
47508     +   %inc _mac;
47509     +   filename _mac;
47511     +   %if "&VARS" eq "" and %_vars eq %then %goto doend;
47513     +   /* Check if FREQ variable is in the data set */
47514     +   %if &freq ne %then %do;
47515     +       data _null_;
47516     +          dsid = open("&data");
47517     +          if dsid>0 then do;
47518     +               if varnum(dsid, "&FREQ")<1 then
47519     +                  call symput('FREQ', '');
47520     +               dsid = close(dsid);
47521     +          end;
47522     +       run;
47523     +   %end;
47525     +   proc dmdb data=&DATA  nonorm classout=_tempclass(rename=(NAME=VARIABLE LEVEL=VALUE FREQUENCY=COUNT FREQPERCENT=PERCENT));
47526     +      class %_Vars &vars;
47527     +      %if &FREQ ne %then %do;
47528     +          freq &FREQ;
47529     +      %end;
47530     +      %if %bquote(&WHERE) ne %then %do;
47531     +            where &WHERE;
47532     +      %end;
47533     +   run;
47534     +   proc sort data=_tempclass;
47535     +      by VARIABLE;
47536     +   run;
47537     +   data &output;
47538     +      label VARIABLE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
47539     +      label VALUE        = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
47540     +      label COUNT        = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,    NOQUOTE))";
47541     +      label PERCENT      = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))";
47542     +      set _tempclass;
47543     +      format COUNT;
47544     +      keep VARIABLE COUNT PERCENT VALUE;
47545     +   run;
47546     +   proc means data=&output noprint;
47547     +      class VARIABLE;
47548     +      var COUNT;
47549     +      output out=&STAT N=NUMCAT;
47550     +   run;
47551     +   data &STAT;
47552     +      set &STAT;
47553     +      where _TYPE_=1;
47554     +      KEEP VARIABLE NUMCAT;
47555     +      label NUMCAT   = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel,   NOQUOTE))";
47556     +      format NUMCAT 8.;
47557     +   run;
47558     +   proc datasets lib=work nolist;
47559     +      delete _tempclass;
47560     +   run;
47561     +   quit;
47563     +   %doend:
47564     +%mend class_profile;
NOTE: %INCLUDE (level 1) ending.
47566      filename cdist;
MPRINT(EM_DIAGRAM):   filename cdist;
NOTE: Fileref CDIST has been deassigned.
47567      %class_profile(DATA=EMWS1.Trans_TRAIN, OUTPUT=EMWS1.Filter_CLASSDIST, METADATA=EMWS1.Filter_VariableSet, STAT=_STAT);
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null;
MPRINT(CLASS_PROFILE):   set EMWS1.Filter_VariableSet(where=(LEVEL ne 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(CLASS_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.FILTER_VARIABLESET.
      WHERE (LEVEL not = 'INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 3 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   length _VARS $80;
MPRINT(CLASS_PROFILE):   retain _vars;
MPRINT(CLASS_PROFILE):   if _n_ =1 then put '%macro _vars;';
MPRINT(CLASS_PROFILE):   set EMWS1.Filter_VariableSet end=eof;
MPRINT(CLASS_PROFILE):   where LEVEL ne 'INTERVAL' or ROLE='FREQ';
MPRINT(CLASS_PROFILE):   if ROLE='FREQ' then call symput('FREQ', NAME);
MPRINT(CLASS_PROFILE):   else do;
MPRINT(CLASS_PROFILE):   if length(strip(_vars)) + length(strip(NAME)) + 1 <80 then _vars = strip(_vars)!! ' ' !!strip(NAME);
MPRINT(CLASS_PROFILE):   else do;
MPRINT(CLASS_PROFILE):   put _Vars;
MPRINT(CLASS_PROFILE):   _vars = strip(NAME);
MPRINT(CLASS_PROFILE):   end;
MPRINT(CLASS_PROFILE):   end;
MPRINT(CLASS_PROFILE):   if eof then do;
MPRINT(CLASS_PROFILE):   put _Vars;
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   end;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Wednesday, December 30, 2015 03:20:24 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:24 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 3 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 58.
NOTE: There were 3 observations read from the data set EMWS1.FILTER_VARIABLESET.
      WHERE (LEVEL not = 'INTERVAL') or (ROLE='FREQ');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
47568     +%macro _vars;
47569     +IMP_EducationalDegree IMP_GeographicLiving IMP_HasChildren
47570     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(CLASS_PROFILE):   proc dmdb data=EMWS1.Trans_TRAIN nonorm classout=_tempclass(rename=(NAME=VARIABLE LEVEL=VALUE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(CLASS_PROFILE):   class
MPRINT(_VARS):   IMP_EducationalDegree IMP_GeographicLiving IMP_HasChildren
MPRINT(CLASS_PROFILE):   ;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Variable IMP_FirstPolicyYear is uninitialized.
NOTE: Records processed = 10296   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      10296 at 128408:24
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.17 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: The data set WORK._TEMPCLASS has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.20 seconds
      cpu time            0.18 seconds
 
 
MPRINT(CLASS_PROFILE):   proc sort data=_tempclass;
MPRINT(CLASS_PROFILE):   by VARIABLE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set WORK._TEMPCLASS has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(CLASS_PROFILE):   data EMWS1.Filter_CLASSDIST;
MPRINT(CLASS_PROFILE):   label VARIABLE = "Variable";
MPRINT(CLASS_PROFILE):   label VALUE = "Value";
MPRINT(CLASS_PROFILE):   label COUNT = "Frequency Count";
MPRINT(CLASS_PROFILE):   label PERCENT = "Percent";
MPRINT(CLASS_PROFILE):   set _tempclass;
MPRINT(CLASS_PROFILE):   format COUNT;
MPRINT(CLASS_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set WORK._TEMPCLASS.
NOTE: The data set EMWS1.FILTER_CLASSDIST has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   proc means data=EMWS1.Filter_CLASSDIST noprint;
MPRINT(CLASS_PROFILE):   class VARIABLE;
MPRINT(CLASS_PROFILE):   var COUNT;
MPRINT(CLASS_PROFILE):   output out=_STAT N=NUMCAT;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.FILTER_CLASSDIST.
NOTE: The data set WORK._STAT has 4 observations and 4 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   data _STAT;
MPRINT(CLASS_PROFILE):   set _STAT;
MPRINT(CLASS_PROFILE):   where _TYPE_=1;
MPRINT(CLASS_PROFILE):   KEEP VARIABLE NUMCAT;
MPRINT(CLASS_PROFILE):   label NUMCAT = "Number of Levels";
MPRINT(CLASS_PROFILE):   format NUMCAT 8.;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 3 observations read from the data set WORK._STAT.
      WHERE _TYPE_=1;
NOTE: The data set WORK._STAT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   proc datasets lib=work nolist;
MPRINT(CLASS_PROFILE):   delete _tempclass;
MPRINT(CLASS_PROFILE):   run;
 
NOTE: Deleting WORK._TEMPCLASS (memtype=DATA).
MPRINT(CLASS_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
47571      data EMWS1.Filter_CLASSDIST;
MPRINT(EM_DIAGRAM):    data EMWS1.Filter_CLASSDIST;
47572      set EMWS1.Filter_CLASSDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_CLASSDIST;
47573      length Filter $1;
MPRINT(EM_DIAGRAM):   length Filter $1;
47574      retain Filter 'N';
MPRINT(EM_DIAGRAM):   retain Filter 'N';
47575      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.FILTER_CLASSDIST.
NOTE: The data set EMWS1.FILTER_CLASSDIST has 10 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
47576      proc sort data=EMWS1.Filter_CLASSDIST;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Filter_CLASSDIST;
47577      by variable value;
MPRINT(EM_DIAGRAM):   by variable value;
47578      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.FILTER_CLASSDIST.
NOTE: The data set EMWS1.FILTER_CLASSDIST has 10 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47579      data EMWS1.Filter_CLASSFILTER / view=EMWS1.Filter_CLASSFILTER;
MPRINT(EM_DIAGRAM):    data EMWS1.Filter_CLASSFILTER / view=EMWS1.Filter_CLASSFILTER;
47580      set EMWS1.Filter_CLASSDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_CLASSDIST;
47581      where Filter eq 'Y';
MPRINT(EM_DIAGRAM):   where Filter eq 'Y';
47582      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.FILTER_CLASSFILTER.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47583      %let EM_CODEBAR = *------------------------------------------------------------*;
47584      filename cdist catalog 'SASHELP.EMUTIL.EM_VARDIST.SOURCE';
MPRINT(EM_DIAGRAM):    filename cdist catalog 'SASHELP.EMUTIL.EM_VARDIST.SOURCE';
47585      %inc cdist;
NOTE: %INCLUDE (level 1) file CDIST is file SASHELP.EMUTIL.EM_VARDIST.SOURCE.
47586     +%macro var_profile(DATA=, OUTPUT=_INTERVAL, VARS=, METADATA=, COMPUTESTAT=Y, STAT=_STAT, PCTLSTAT=_PCTLSTAT, FREQ=,
47587     +                   BINDATA=, BIN=Y, NUMBARS=8, MINMAX=N);
47588     +   %let _em_nodeid = EM;
47589     +   %if %symexist(EM_NODEID) %then %do;
47590     +       %let _em_nodeid = &em_nodeid;
47591     +   %end;
47593     +   %let msgString = %sysfunc(sasmsg(sashelp.dmine, computingsummarystats_note, NOQUOTE, &_em_nodeid));
47594     +   %put &EM_CODEBAR;
47595     +   %put * &msgString;
47596     +   %put &EM_CODEBAR;
47598     +   /* Process metadata data set */
47599     +   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
47600     +   %if %sysfunc(exist(&metadata))>0 and (&metadata ne ) %then %do;
47601     +       %let FREQ=;
47602     +       %let _nobs=0;
47603     +       data _null;
47604     +          set &metadata(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
47605     +          if eof then call symput('_nobs', put(_N_, best.));
47606     +       run;
47607     +       %if "&_nobs" ne "0" %then %do;
47608     +           data _null_;
47609     +              file _mac;
47610     +              length _VARS $80; retain _vars;
47611     +              if _n_ =1 then put '%macro _vars;';
47612     +              set &metadata end=eof;
47613     +              where LEVEL = 'INTERVAL' or ROLE='FREQ';
47614     +              if ROLE='FREQ' then call symput('FREQ', trim(NAME));
47615     +              else do;
47616     +                 if length(strip(_vars)) + length(strip(NAME)) + 1 <80  then
47617     +                    _vars = strip(_vars)!! ' ' !!strip(NAME);
47618     +                 else do;
47619     +                    put _Vars;
47620     +                    _vars = strip(NAME);
47621     +                 end;
47622     +              end;
47624     +              if eof then do;
47625     +                 put _Vars;
47626     +                 put '%mend _vars;';
47627     +              end;
47628     +           run;
47629     +       %end;
47630     +       %else %do;
47631     +           data _null_;
47632     +              file _mac;
47633     +              put '%macro _vars;';
47634     +              put '%mend _vars;';
47635     +           run;
47636     +       %end;
47637     +   %end;
47638     +   %else %do;
47639     +       data _null_;
47640     +          file _mac;
47641     +          put '%macro _vars;';
47642     +          put '%mend _vars;';
47643     +       run;
47644     +   %end;
47645     +   %inc _mac;
47646     +   filename _mac;
47648     +   %if "&VARS" eq "" and %_vars eq %then %goto doend;
47650     +   /* Check if FREQ variable is in the data set */
47651     +   %if &freq ne %then %do;
47652     +       data _null_;
47653     +          dsid = open("&data");
47654     +          if dsid>0 then do;
47655     +               if varnum(dsid, "&FREQ")<1 then
47656     +                  call symput('FREQ', '');
47657     +               dsid = close(dsid);
47658     +          end;
47659     +       run;
47660     +   %end;
47662     +   %if &bindata eq %then %do;
47663     +       %let bindata = _BOUNDS;
47664     +       proc datasets lib=work nolist mt=(DATA VIEW);
47665     +          delete _BOUNDS;
47666     +       run;
47667     +   %end;
47669     +   %global _EM_VARDISTOBS_MAX;
47670     +   %let _EM_VARDISTOBS_MAX = 1000000;
47672     +   %if %symexist(EM_VARDISTOBS_MAX) %then %do;
47673     +       %let _EM_VARDISTOBS_MAX= %eval(&EM_VARDISTOBS_MAX);
47674     +   %end;
47676     +   %if &computeStat = Y %then %do;
47677     +       proc dmdb data=&DATA(obs=&_EM_VARDISTOBS_MAX) varout=&STAT(rename=(NAME=VARIABLE));
47678     +          var %_Vars &vars;
47679     +          %if &FREQ ne %then %do;
47680     +              freq &FREQ;
47681     +          %end;
47682     +       run;
47683     +       proc sort data=&stat;
47684     +          by VARIABLE;
47685     +       run;
47687     +       %if ^%sysfunc(indexc(&STAT, .)) %then %do;
47688     +           %let _library = WORK;
47689     +           %let _member  = &STAT;
47690     +      %end;
47691     +      %else %do;
47692     +          %let _library = %scan(&STAT, 1, .);
47693     +          %let _member  = %scan(&STAT, 2, .);
47694     +      %end;
47696     +      proc datasets library=&_library nolist;
47697     +         modify &_member;
47698     +         label NMISS    = "%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))";
47699     +         label MIN      = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
47700     +         label MAX      = "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
47701     +         label MEAN     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel,    NOQUOTE))";
47702     +         label STD      = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel,     NOQUOTE))";
47703     +         label SKEWNESS = "%sysfunc(sasmsg(sashelp.dmine, rpt_skewness_vlabel, NOQUOTE))";
47704     +         label KURTOSIS = "%sysfunc(sasmsg(sashelp.dmine, rpt_kurtosis_vlabel, NOQUOTE))";
47705     +      run;
47706     +      quit;
47707     +   %end;
47709     +   %if &BIN ne N %then %do;
47710     +       %if %sysfunc(exist(&bindata))<1 %then %do;
47711     +           %let msgString = %sysfunc(sasmsg(sashelp.dmine, computingmidpoints_note, NOQUOTE, &_em_nodeid));
47712     +           %put &EM_CODEBAR;
47713     +           %put * &msgString;
47714     +           %put &EM_CODEBAR;
47715     +           filename fref catalog 'work.em.profileformat.source';
47717     +            %let _maxlevel = %eval(&numbars + 1);
47718     +            proc dmdb data=&data(obs=&_EM_VARDISTOBS_MAX) classout=_CLASSOUT maxlevel=&_maxlevel;
47719     +               class %_vars &vars;
47720     +            run;
47721     +            proc freq data=_CLASSOUT ORDER=DATA noprint;
47722     +               table NAME / OUT = _COUNT(where=(COUNT<&_maxlevel));
47723     +            run;
47724     +           proc sort data=_COUNT(keep=NAME COUNT rename=(COUNT=_NUMCLASSBINS_));
47725     +              by NAME;
47726     +           run;
47727     +           proc sort data=_CLASSOUT;
47728     +              by NAME;
47729     +          run;
47730     +          proc transpose data=_CLASSOUT out=_DISCRETEMID(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
47731     +             var NRAW;
47732     +             by NAME;
47733     +          run;
47734     +          proc delete data=WORK._CLASSOUT;
47735     +          run;
47736     +          data _null_;
47737     +             dsid = open('_DISCRETEMID');
47738     +             if dsid then do;
47739     +                call symput('NUMCLASSBARS', left(trim(put(attrn(dsid, 'NVARS')-1, best12.))));
47740     +                dsid = close(dsid);
47741     +             end;
47742     +          run;
47743     +          data _DISCRETEMID;
47744     +             merge _DISCRETEMID _COUNT(in=_b rename=(NAME=VARIABLE));
47745     +             keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars _NUMCLASSBINS_;
47746     +             by VARIABLE;
47747     +             if _b then output;
47748     +          run;
47750     +          data _EMVARDIST / view=_EMVARDIST;
47751     +             set &DATA(keep=%_VARS &vars &FREQ  obs=&_EM_VARDISTOBS_MAX);
47752     +          run;
47753     +          proc stdize data=_EMVARDIST outstat=&pctlstat  out=_null_ pctlpts=(0 5 25 50 75 95 100);
47754     +             var %_vars &vars;
47755     +             %if &FREQ ne %then %do;
47756     +                 freq &FREQ / notrunc;
47757     +             %end;
47758     +          run;
47759     +          proc datasets lib=WORK NOLIST;
47760     +             delete _EMVARDIST / mt=view;
47761     +          run;
47762     +          quit;
47763     +          %if %upcase(&minmax) = Y %then %do;
47764     +              proc transpose data=&pctlstat out=_MINMAXDATA(rename=(_NAME_=VARIABLE COL1=MIN COL2=MAX));
47765     +                 where  _type_ in('P0', 'P100');
47766     +              run;
47767     +              data _MINMAXDATA(keep=Variable Value Pos);
47768     +                 set _MINMAXDATA;
47769     +                 label VARIABLE  = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
47770     +                 Value = min; Pos=1; output;
47771     +                 Value = max; Pos=3; output;
47772     +              run;
47773     +          %end;
47774     +          proc transpose data=&pctlstat out=&bindata(rename=(_NAME_=VARIABLE COL1=MIN COL2=P5
47775     +                                                             COL3=P95 COL4=MAX));
47776     +             where  _type_ in('P0', 'P5', 'P95', 'P100');
47777     +          run;
47778     +          proc sort data=&bindata;
47779     +             by VARIABLE;
47780     +          run;
47782     +          %let new_numbars=%eval(&NUMBARS+12);
47783     +          data &bindata;
47784     +             set &bindata;
47785     +             length Format $12;
47786     +             array _midpoint{&new_NUMBARS};
47787     +             array _bounds{&new_NUMBARS};
47788     +             if (max - min)>1e-10 then do;
47789     +                step = abs(P95-P5)/&NUMBARS;
47790     +                lstep = abs(p5- min)/5;
47791     +                ustep = abs(max-p95)/5;
47792     +                /* No outlying values */;
47793     +                if lstep<=step and ustep<=step then do;
47794     +                   step = abs(MIN-MAX)/&NUMBARS;
47795     +                   START=MIN;
47796     +                   do i=1 to &numbars;
47797     +                      _bounds(i)   = MIN + i*step;      if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
47798     +                      _midpoint(i) = MIN+ (i-0.5)*step; if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
47799     +                   end;
47800     +                   %let new_numbars = &numbars;
47801     +                end;
47802     +                else do;
47803     +                   if lstep<=step then do;
47804     +                      step = abs(MIN-P95)/&NUMBARS;
47805     +                      /* Start Histogram at MIN value */
47806     +                      do i=1 to &NUMBARS;
47807     +                         _bounds(i)   = MIN + i*step;       if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
47808     +                         _midpoint(i) = MIN+ (i-0.5)*step;  if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
47809     +                      end;
47810     +                      /* Make BINS with upper outliers width */
47811     +                      do i=1 to 5;
47812     +                         numbars = &numbars + i;
47813     +                         _bounds(numbars)   = P95 + i*ustep;  if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
47814     +                         _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;  if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
47815     +                      end;
47816     +                       %let new_numbars = %eval(&numbars+5);
47817     +                   end;
47818     +                   else do;
47819     +                      /* Make BINS with lower outliers width */
47820     +                      do i=1 to 5;
47821     +                         _bounds(i)   = P5 - (5-i)*lstep; if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
47822     +                         _midpoint(i) = P5 - (5 - i + 0.5)*lstep - abs(lstep-step)/2; if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
47823     +                      end;
47824     +                      if ustep<= step then do;
47825     +                         step = abs(P5-MAX)/&NUMBARS;
47826     +                         /* End Histogram at MAX value */
47827     +                         do i=1 to &NUMBARS;
47828     +                            numbars = i+5;
47829     +                            _bounds(numbars)   = P5 + i*step; if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
47830     +                            _midpoint(numbars) = P5 + (i-0.5)*step; if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
47831     +                         end;
47832     +                          %let new_numbars = %eval(&numbars+5);
47833     +                      end;
47834     +                      else do;
47835     +                         do i=1 to &NUMBARS;
47836     +                            numbars = i+5;
47837     +                            _bounds(numbars)  = P5 + i*step; if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
47838     +                            _midpoint(numbars) = P5 + (i-0.5)*step; if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
47839     +                         end;
47840     +                         /* Make BINS with upper outliers width */
47841     +                         do i=1 to 5;
47842     +                            numbars = &numbars+5+i;
47843     +                            _bounds(numbars)   = P95 + i*ustep; if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
47844     +                            _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
47845     +                         end;
47846     +                         %let new_numbars = %eval(&numbars+10);
47847     +                      end;
47848     +                   end;
47849     +                end;
47850     +             end;
47851     +             else do;
47852     +                _bounds(1)   = MIN;
47853     +                _midpoint(1) = MIN;
47854     +             end;
47855     +             Format = 'F'!!trim(left(put(_n_,6.)))!!'_';
47856     +          run;
47857     +          %if %sysfunc(exist(_DISCRETEMID)) %then %do;
47858     +              data &bindata;
47859     +                 merge &bindata _DISCRETEMID(in = _b);
47860     +                 by VARIABLE;
47861     +                 if _b then _DISCRETE=1;
47862     +                 else _DISCRETE=0;
47863     +              run;
47864     +          %end;
47866     +          data _null_;
47867     +             file fref;
47868     +             set &bindata end=eof;
47869     +             array _bounds{&NEW_NUMBARS};
47870     +             array _midpoint{&NEW_NUMBARS};
47871     +             if _n_=1 then
47872     +                put 'proc format;';
47874     +             put 'value ' Format;
47875     +             if _DISCRETE then do;
47876     +                 do i=1 to &numbars;
47877     +                    _MID = _midpoint{i};
47878     +                    if _MID ne . and i<= _NUMCLASSBINS_ then
47879     +                       put _MID '="' _MID '"';
47880     +                 end;
47881     +                 put ';';
47882     +             end;
47883     +             else do;
47884     +                if min eq max then do;
47885     +                   put 'low - high ="' MIN '";';
47886     +                end;
47887     +                else do;
47888     +                   _LB  = MIN;
47889     +                   _MID = _midpoint{1};
47890     +                   _UB  = _bounds{1};
47891     +                   put 'LOW -' _UB '="' _MID '"';
47893     +                   do i=1 to &NEW_NUMBARS-1;
47894     +                      _LB  = _bounds{i};
47895     +                      j=i+1;
47896     +                      _MID = _midpoint{j};
47897     +                      _UB  = _bounds{j};
47898     +                      if (_UB ne .) and (_LB ne _UB) then do;
47899     +                         if _UB>=MAX then
47900     +                            put _LB '-HIGH="' _MID '"';
47901     +                         else
47902     +                            put _LB '-' _UB '="' _MID '"';
47903     +                      end;
47904     +                   end;
47905     +                end;
47906     +             end;
47907     +             put ';';
47908     +             if eof then put 'run;';
47909     +          run;
47911     +          %inc fref;
47913     +          filename fref;
47914     +      %end;
47916     +      data _binneddata / view=_binneddata;
47917     +         set &DATA(obs=&_EM_VARDISTOBS_MAX);
47919     +         %let dsid    =%sysfunc(open(&bindata));
47920     +         %let namenum = %sysfunc(varnum(&dsid, VARIABLE));
47921     +         %let fmtnum  = %sysfunc(varnum(&dsid, FORMAT));
47922     +         %let obs = %sysfunc(fetch(&dsid));
47924     +         %if (&obs=0) %then %do;
47925     +             format
47926     +         %end;
47928     +         %let _count = 0;
47929     +         %do %while(&obs=0);
47930     +             %let _count = %eval(&_count +1);
47931     +             %let _name = %sysfunc(getvarc(&dsid, &namenum));
47932     +             %let _fmtname = %sysfunc(getvarc(&dsid, &fmtnum));
47933     +             %do;
47934     +                &_name &_fmtname..
47935     +             %end;
47936     +             %let obs = %sysfunc(fetch(&dsid));
47937     +         %end;
47938     +         %let dsid=%sysfunc(close(&dsid));
47939     +         ;
47940     +      run;
47941     +   %end;
47943     +    %if &bin ne N %then %do;
47944     +        proc dmdb data=_binneddata(obs=&_EM_VARDISTOBS_MAX) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
47945     +    %end;
47946     +    %else %do;
47947     +        proc dmdb data = &data(obs=&_EM_VARDISTOBS_MAX) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
47948     +    %end;
47949     +      class %_vars &vars;
47950     +      %if &FREQ ne %then %do;
47951     +          freq &FREQ;
47952     +      %end;
47953     +   run;
47954     +   data &output;
47955     +      label VALUE        = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
47956     +      label VARIABLE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
47957     +      label COUNT        = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,    NOQUOTE))";
47958     +      label PERCENT      = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))";
47959     +      set _temptab;
47960     +      format VALUE 12.3 count;
47961     +      value = inputn(level, 'best12.');
47962     +      keep VARIABLE COUNT PERCENT VALUE;
47963     +   run;
47964     +   %if &BIN ne N and %sysfunc(exist(_MINMAXDATA)) and &minmax=Y %then %do;
47965     +       data &output;
47966     +          set &output(in=_a) _MINMAXDATA;
47967     +          if _a then Pos=2;
47968     +       run;
47969     +       proc sort data=&output out=&output(drop=pos);
47970     +          by VARIABLE POS VALUE;
47971     +          where VALUE ne .;
47972     +       run;
47973     +   %end;
47974     +   proc datasets lib=work nolist mt=(DATA VIEW);
47975     +      delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
47976     +   run;
47977     +   quit;
47979     +   %doend:
47980     +%mend var_profile;
NOTE: %INCLUDE (level 1) ending.
47981      filename cdist;
MPRINT(EM_DIAGRAM):   filename cdist;
NOTE: Fileref CDIST has been deassigned.
47982      %var_profile(DATA=EMWS1.Trans_TRAIN, OUTPUT=EMWS1.Filter_VARDIST, METADATA=EMWS1.Filter_VariableSet, COMPUTESTAT=N, FREQ=, BIN=Y, NUMBARS= 16, minmax=Y);
*------------------------------------------------------------*
* Filter: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null;
MPRINT(VAR_PROFILE):   set EMWS1.Filter_VariableSet(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(VAR_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 15 observations read from the data set EMWS1.FILTER_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   length _VARS $80;
MPRINT(VAR_PROFILE):   retain _vars;
MPRINT(VAR_PROFILE):   if _n_ =1 then put '%macro _vars;';
MPRINT(VAR_PROFILE):   set EMWS1.Filter_VariableSet end=eof;
MPRINT(VAR_PROFILE):   where LEVEL = 'INTERVAL' or ROLE='FREQ';
MPRINT(VAR_PROFILE):   if ROLE='FREQ' then call symput('FREQ', trim(NAME));
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   if length(strip(_vars)) + length(strip(NAME)) + 1 <80 then _vars = strip(_vars)!! ' ' !!strip(NAME);
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   put _Vars;
MPRINT(VAR_PROFILE):   _vars = strip(NAME);
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   if eof then do;
MPRINT(VAR_PROFILE):   put _Vars;
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Wednesday, December 30, 2015 03:20:24 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:24 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 7 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 74.
NOTE: There were 15 observations read from the data set EMWS1.FILTER_VARIABLESET.
      WHERE (LEVEL='INTERVAL') or (ROLE='FREQ');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
47983     +%macro _vars;
47984     +ClaimsRate CustomerAge CustomerMonetaryValue FirstPolicyYear
47985     +IMP_FirstPolicyYear IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth
47986     +IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp
47987     +IMP_REP_CustomerAge IMP_REP_FirstPolicyYear LOYALTY PremiumsinLOBHousehold
47988     +TOTAL_PREMIUM
47989     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _BOUNDS;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._BOUNDS (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
*------------------------------------------------------------*
* computingmidpoints_note
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename fref catalog 'work.em.profileformat.source';
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data=EMWS1.Trans_TRAIN(obs=1000000) classout=_CLASSOUT maxlevel=17;
MPRINT(VAR_PROFILE):   class
MPRINT(_VARS):   ClaimsRate CustomerAge CustomerMonetaryValue FirstPolicyYear IMP_FirstPolicyYear IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge
IMP_REP_FirstPolicyYear LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM
MPRINT(VAR_PROFILE):   ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Variable IMP_FirstPolicyYear is uninitialized.
NOTE: Records processed = 10296   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      10296 at 128408:24
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: The data set WORK._CLASSOUT has 223 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.18 seconds
      cpu time            0.17 seconds
 
 
MPRINT(VAR_PROFILE):   proc freq data=_CLASSOUT ORDER=DATA noprint;
MPRINT(VAR_PROFILE):   table NAME / OUT = _COUNT(where=(COUNT<17));
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 223 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._COUNT has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_COUNT(keep=NAME COUNT rename=(COUNT=_NUMCLASSBINS_));
MPRINT(VAR_PROFILE):   by NAME;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 2 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_CLASSOUT;
MPRINT(VAR_PROFILE):   by NAME;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 223 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 223 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc transpose data=_CLASSOUT out=_DISCRETEMID(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
MPRINT(VAR_PROFILE):   var NRAW;
MPRINT(VAR_PROFILE):   by NAME;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 223 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._DISCRETEMID has 15 observations and 18 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VAR_PROFILE):   proc delete data=WORK._CLASSOUT;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   dsid = open('_DISCRETEMID');
MPRINT(VAR_PROFILE):   if dsid then do;
MPRINT(VAR_PROFILE):   call symput('NUMCLASSBARS', left(trim(put(attrn(dsid, 'NVARS')-1, best12.))));
MPRINT(VAR_PROFILE):   dsid = close(dsid);
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _DISCRETEMID;
MPRINT(VAR_PROFILE):   merge _DISCRETEMID _COUNT(in=_b rename=(NAME=VARIABLE));
MPRINT(VAR_PROFILE):   keep VARIABLE _MIDPOINT1--_MIDPOINT17 _NUMCLASSBINS_;
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   if _b then output;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 15 observations read from the data set WORK._DISCRETEMID.
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._DISCRETEMID has 2 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _EMVARDIST / view=_EMVARDIST;
MPRINT(VAR_PROFILE):   set EMWS1.Trans_TRAIN(keep
MPRINT(VAR_PROFILE):  =ClaimsRate CustomerAge CustomerMonetaryValue FirstPolicyYear IMP_FirstPolicyYear IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge
IMP_REP_FirstPolicyYear LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM obs=1000000);
MPRINT(VAR_PROFILE):   run;
 
NOTE: DATA STEP view saved on file WORK._EMVARDIST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
 
MPRINT(VAR_PROFILE):   proc stdize data=_EMVARDIST outstat=_PCTLSTAT out=_null_ pctlpts=(0 5 25 50 75 95 100);
MPRINT(VAR_PROFILE):   var
MPRINT(_VARS):   ClaimsRate CustomerAge CustomerMonetaryValue FirstPolicyYear IMP_FirstPolicyYear IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge
IMP_REP_FirstPolicyYear LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM
MPRINT(VAR_PROFILE):   ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Variable IMP_FirstPolicyYear is uninitialized.
WARNING: At least one of the scale and location estimators of variable IMP_FirstPolicyYear can not be computed. Variable IMP_FirstPolicyYear will not be standardized.
WARNING: At least one of the scale and location estimators of variable LOYALTY can not be computed. Variable LOYALTY will not be standardized.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      10296 at 128408:24
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View WORK._EMVARDIST.VIEW used (Total process time):
      real time           0.53 seconds
      cpu time            0.46 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set WORK._EMVARDIST.
NOTE: The data set WORK._PCTLSTAT has 15 observations and 16 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.55 seconds
      cpu time            0.48 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=WORK NOLIST;
MPRINT(VAR_PROFILE):   delete _EMVARDIST / mt=view;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Deleting WORK._EMVARDIST (memtype=VIEW).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc transpose data=_PCTLSTAT out=_MINMAXDATA(rename=(_NAME_=VARIABLE COL1=MIN COL2=MAX));
MPRINT(VAR_PROFILE):   where _type_ in('P0', 'P100');
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 2 observations read from the data set WORK._PCTLSTAT.
      WHERE _type_ in ('P0', 'P100');
NOTE: The data set WORK._MINMAXDATA has 15 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _MINMAXDATA(keep=Variable Value Pos);
MPRINT(VAR_PROFILE):   set _MINMAXDATA;
MPRINT(VAR_PROFILE):   label VARIABLE = "Variable";
MPRINT(VAR_PROFILE):   Value = min;
MPRINT(VAR_PROFILE):   Pos=1;
MPRINT(VAR_PROFILE):   output;
MPRINT(VAR_PROFILE):   Value = max;
MPRINT(VAR_PROFILE):   Pos=3;
MPRINT(VAR_PROFILE):   output;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 15 observations read from the data set WORK._MINMAXDATA.
NOTE: The data set WORK._MINMAXDATA has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc transpose data=_PCTLSTAT out=_BOUNDS(rename=(_NAME_=VARIABLE COL1=MIN COL2=P5 COL3=P95 COL4=MAX));
MPRINT(VAR_PROFILE):   where _type_ in('P0', 'P5', 'P95', 'P100');
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 4 observations read from the data set WORK._PCTLSTAT.
      WHERE _type_ in ('P0', 'P100', 'P5', 'P95');
NOTE: The data set WORK._BOUNDS has 15 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_BOUNDS;
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 15 observations read from the data set WORK._BOUNDS.
NOTE: The data set WORK._BOUNDS has 15 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   data _BOUNDS;
MPRINT(VAR_PROFILE):   set _BOUNDS;
MPRINT(VAR_PROFILE):   length Format $12;
MPRINT(VAR_PROFILE):   array _midpoint{28};
MPRINT(VAR_PROFILE):   array _bounds{28};
MPRINT(VAR_PROFILE):   if (max - min)>1e-10 then do;
MPRINT(VAR_PROFILE):   step = abs(P95-P5)/16;
MPRINT(VAR_PROFILE):   lstep = abs(p5- min)/5;
MPRINT(VAR_PROFILE):   ustep = abs(max-p95)/5;
MPRINT(VAR_PROFILE):   ;
MPRINT(VAR_PROFILE):   if lstep<=step and ustep<=step then do;
MPRINT(VAR_PROFILE):   step = abs(MIN-MAX)/16;
MPRINT(VAR_PROFILE):   START=MIN;
MPRINT(VAR_PROFILE):   do i=1 to 16;
MPRINT(VAR_PROFILE):   _bounds(i) = MIN + i*step;
MPRINT(VAR_PROFILE):   if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
MPRINT(VAR_PROFILE):   _midpoint(i) = MIN+ (i-0.5)*step;
MPRINT(VAR_PROFILE):   if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   if lstep<=step then do;
MPRINT(VAR_PROFILE):   step = abs(MIN-P95)/16;
MPRINT(VAR_PROFILE):   do i=1 to 16;
MPRINT(VAR_PROFILE):   _bounds(i) = MIN + i*step;
MPRINT(VAR_PROFILE):   if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
MPRINT(VAR_PROFILE):   _midpoint(i) = MIN+ (i-0.5)*step;
MPRINT(VAR_PROFILE):   if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   do i=1 to 5;
MPRINT(VAR_PROFILE):   numbars = 16 + i;
MPRINT(VAR_PROFILE):   _bounds(numbars) = P95 + i*ustep;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   do i=1 to 5;
MPRINT(VAR_PROFILE):   _bounds(i) = P5 - (5-i)*lstep;
MPRINT(VAR_PROFILE):   if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
MPRINT(VAR_PROFILE):   _midpoint(i) = P5 - (5 - i + 0.5)*lstep - abs(lstep-step)/2;
MPRINT(VAR_PROFILE):   if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   if ustep<= step then do;
MPRINT(VAR_PROFILE):   step = abs(P5-MAX)/16;
MPRINT(VAR_PROFILE):   do i=1 to 16;
MPRINT(VAR_PROFILE):   numbars = i+5;
MPRINT(VAR_PROFILE):   _bounds(numbars) = P5 + i*step;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   _midpoint(numbars) = P5 + (i-0.5)*step;
MPRINT(VAR_PROFILE):   if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   do i=1 to 16;
MPRINT(VAR_PROFILE):   numbars = i+5;
MPRINT(VAR_PROFILE):   _bounds(numbars) = P5 + i*step;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   _midpoint(numbars) = P5 + (i-0.5)*step;
MPRINT(VAR_PROFILE):   if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   do i=1 to 5;
MPRINT(VAR_PROFILE):   numbars = 16+5+i;
MPRINT(VAR_PROFILE):   _bounds(numbars) = P95 + i*ustep;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;
MPRINT(VAR_PROFILE):  if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   _bounds(1) = MIN;
MPRINT(VAR_PROFILE):   _midpoint(1) = MIN;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   Format = 'F'!!trim(left(put(_n_,6.)))!!'_';
MPRINT(VAR_PROFILE):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      2 at 348:9
NOTE: There were 15 observations read from the data set WORK._BOUNDS.
NOTE: The data set WORK._BOUNDS has 15 observations and 69 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _BOUNDS;
MPRINT(VAR_PROFILE):   merge _BOUNDS _DISCRETEMID(in = _b);
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   if _b then _DISCRETE=1;
MPRINT(VAR_PROFILE):   else _DISCRETE=0;
MPRINT(VAR_PROFILE):   run;
 
WARNING: Multiple lengths were specified for the BY variable VARIABLE by input data sets. This may cause unexpected results.
NOTE: There were 15 observations read from the data set WORK._BOUNDS.
NOTE: There were 2 observations read from the data set WORK._DISCRETEMID.
NOTE: The data set WORK._BOUNDS has 15 observations and 71 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file fref;
MPRINT(VAR_PROFILE):   set _BOUNDS end=eof;
MPRINT(VAR_PROFILE):   array _bounds{26};
MPRINT(VAR_PROFILE):   array _midpoint{26};
MPRINT(VAR_PROFILE):   if _n_=1 then put 'proc format;';
MPRINT(VAR_PROFILE):   put 'value ' Format;
MPRINT(VAR_PROFILE):   if _DISCRETE then do;
MPRINT(VAR_PROFILE):   do i=1 to 16;
MPRINT(VAR_PROFILE):   _MID = _midpoint{i};
MPRINT(VAR_PROFILE):   if _MID ne . and i<= _NUMCLASSBINS_ then put _MID '="' _MID '"';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   put ';';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   if min eq max then do;
MPRINT(VAR_PROFILE):   put 'low - high ="' MIN '";';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   _LB = MIN;
MPRINT(VAR_PROFILE):   _MID = _midpoint{1};
MPRINT(VAR_PROFILE):   _UB = _bounds{1};
MPRINT(VAR_PROFILE):   put 'LOW -' _UB '="' _MID '"';
MPRINT(VAR_PROFILE):   do i=1 to 26-1;
MPRINT(VAR_PROFILE):   _LB = _bounds{i};
MPRINT(VAR_PROFILE):   j=i+1;
MPRINT(VAR_PROFILE):   _MID = _midpoint{j};
MPRINT(VAR_PROFILE):   _UB = _bounds{j};
MPRINT(VAR_PROFILE):   if (_UB ne .) and (_LB ne _UB) then do;
MPRINT(VAR_PROFILE):   if _UB>=MAX then put _LB '-HIGH="' _MID '"';
MPRINT(VAR_PROFILE):   else put _LB '-' _UB '="' _MID '"';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   put ';';
MPRINT(VAR_PROFILE):   if eof then put 'run;';
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file FREF is:
      Catalog Name=WORK.EM.PROFILEFORMAT.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Wednesday, December 30, 2015 03:20:26 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:26 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\em.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 307 records were written to the file FREF.
      The minimum record length was 1.
      The maximum record length was 43.
NOTE: There were 15 observations read from the data set WORK._BOUNDS.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file FREF is file WORK.EM.PROFILEFORMAT.SOURCE.
47990     +proc format;
MPRINT(VAR_PROFILE):   proc format;
47991     +value F1_
47992     +LOW -0.0686759618 ="0.0343379809 "
47993     +0.0686759618 -0.1373519235 ="0.1030139426 "
47994     +0.1373519235 -0.2060278853 ="0.1716899044 "
47995     +0.2060278853 -0.2747038471 ="0.2403658662 "
47996     +0.2747038471 -0.3433798088 ="0.3090418279 "
47997     +0.3433798088 -0.4120557706 ="0.3777177897 "
47998     +0.4120557706 -0.4807317323 ="0.4463937515 "
47999     +0.4807317323 -0.5494076941 ="0.5150697132 "
48000     +0.5494076941 -0.6180836559 ="0.583745675 "
48001     +0.6180836559 -0.6867596176 ="0.6524216368 "
48002     +0.6867596176 -0.7554355794 ="0.7210975985 "
48003     +0.7554355794 -0.8241115412 ="0.7897735603 "
48004     +0.8241115412 -0.8927875029 ="0.8584495221 "
48005     +0.8927875029 -0.9614634647 ="0.9271254838 "
48006     +0.9614634647 -1.0301394265 ="0.9958014456 "
48007     +1.0301394265 -1.0988153882 ="1.0644774073 "
48008     +1.0988153882 -52.119052311 ="52.08471433 "
48009     +52.119052311 -103.13928923 ="103.10495125 "
48010     +103.13928923 -154.15952616 ="154.12518817 "
48011     +154.15952616 -205.17976308 ="205.1454251 "
48012     +205.17976308 -HIGH="256.16566202 "
48013     +;
MPRINT(VAR_PROFILE):   value F1_ LOW -0.0686759618 ="0.0343379809 " 0.0686759618 -0.1373519235 ="0.1030139426 " 0.1373519235 -0.2060278853 ="0.1716899044 " 0.2060278853 -0.2747038471 ="0.2403658662 " 0.2747038471 -0.3433798088 ="0.3090418279 "
0.3433798088 -0.4120557706 ="0.3777177897 " 0.4120557706 -0.4807317323 ="0.4463937515 " 0.4807317323 -0.5494076941 ="0.5150697132 " 0.5494076941 -0.6180836559 ="0.583745675 " 0.6180836559 -0.6867596176 ="0.6524216368 " 0.6867596176 -0.7554355794
="0.7210975985 " 0.7554355794 -0.8241115412 ="0.7897735603 " 0.8241115412 -0.8927875029 ="0.8584495221 " 0.8927875029 -0.9614634647 ="0.9271254838 " 0.9614634647 -1.0301394265 ="0.9958014456 " 1.0301394265 -1.0988153882 ="1.0644774073 " 1.0988153882
-52.119052311 ="52.08471433 " 52.119052311 -103.13928923 ="103.10495125 " 103.13928923 -154.15952616 ="154.12518817 " 154.15952616 -205.17976308 ="205.1454251 " 205.17976308 -HIGH="256.16566202 " ;
NOTE: Format F1_ has been output.
48014     +value F2_
48015     +LOW -18.75 ="16.875 "
48016     +18.75 -22.5 ="20.625 "
48017     +22.5 -26.25 ="24.375 "
48018     +26.25 -30 ="28.125 "
48019     +30 -33.75 ="31.875 "
48020     +33.75 -37.5 ="35.625 "
48021     +37.5 -41.25 ="39.375 "
48022     +41.25 -45 ="43.125 "
48023     +45 -48.75 ="46.875 "
48024     +48.75 -52.5 ="50.625 "
48025     +52.5 -56.25 ="54.375 "
48026     +56.25 -60 ="58.125 "
48027     +60 -63.75 ="61.875 "
48028     +63.75 -67.5 ="65.625 "
48029     +67.5 -71.25 ="69.375 "
48030     +71.25 -75 ="73.125 "
48031     +75 -257.6 ="255.725 "
48032     +257.6 -440.2 ="438.325 "
48033     +440.2 -622.8 ="620.925 "
48034     +622.8 -805.4 ="803.525 "
48035     +805.4 -HIGH="986.125 "
48036     +;
MPRINT(VAR_PROFILE):   value F2_ LOW -18.75 ="16.875 " 18.75 -22.5 ="20.625 " 22.5 -26.25 ="24.375 " 26.25 -30 ="28.125 " 30 -33.75 ="31.875 " 33.75 -37.5 ="35.625 " 37.5 -41.25 ="39.375 " 41.25 -45 ="43.125 " 45 -48.75 ="46.875 " 48.75 -52.5 ="50.625 "
52.5 -56.25 ="54.375 " 56.25 -60 ="58.125 " 60 -63.75 ="61.875 " 63.75 -67.5 ="65.625 " 67.5 -71.25 ="69.375 " 71.25 -75 ="73.125 " 75 -257.6 ="255.725 " 257.6 -440.2 ="438.325 " 440.2 -622.8 ="620.925 " 622.8 -805.4 ="803.525 " 805.4 -HIGH="986.125 " ;
NOTE: Format F2_ has been output.
48037     +value F3_
48038     +LOW --132563.0532 ="-165657.3124 "
48039     +-132563.0532 --99445.6824 ="-132539.9416 "
48040     +-99445.6824 --66328.3116 ="-99422.57084 "
48041     +-66328.3116 --33210.9408 ="-66305.20004 "
48042     +-33210.9408 --93.57 ="-33187.82924 "
48043     +-93.57 --47.346875 ="-70.4584375 "
48044     +-47.346875 --1.12375 ="-24.2353125 "
48045     +-1.12375 -45.099375 ="21.9878125 "
48046     +45.099375 -91.3225 ="68.2109375 "
48047     +91.3225 -137.545625 ="114.4340625 "
48048     +137.545625 -183.76875 ="160.6571875 "
48049     +183.76875 -229.991875 ="206.8803125 "
48050     +229.991875 -276.215 ="253.1034375 "
48051     +276.215 -322.438125 ="299.3265625 "
48052     +322.438125 -368.66125 ="345.5496875 "
48053     +368.66125 -414.884375 ="391.7728125 "
48054     +414.884375 -461.1075 ="437.9959375 "
48055     +461.1075 -507.330625 ="484.2190625 "
48056     +507.330625 -553.55375 ="530.4421875 "
48057     +553.55375 -599.776875 ="576.6653125 "
48058     +599.776875 -646 ="622.8884375 "
48059     +646 -2891.978 ="2868.8664375 "
48060     +2891.978 -5137.956 ="5114.8444375 "
48061     +5137.956 -7383.934 ="7360.8224375 "
48062     +7383.934 -9629.912 ="9606.8004375 "
48063     +9629.912 -HIGH="11852.778438 "
48064     +;
MPRINT(VAR_PROFILE):   value F3_ LOW --132563.0532 ="-165657.3124 " -132563.0532 --99445.6824 ="-132539.9416 " -99445.6824 --66328.3116 ="-99422.57084 " -66328.3116 --33210.9408 ="-66305.20004 " -33210.9408 --93.57 ="-33187.82924 " -93.57 --47.346875
="-70.4584375 " -47.346875 --1.12375 ="-24.2353125 " -1.12375 -45.099375 ="21.9878125 " 45.099375 -91.3225 ="68.2109375 " 91.3225 -137.545625 ="114.4340625 " 137.545625 -183.76875 ="160.6571875 " 183.76875 -229.991875 ="206.8803125 " 229.991875 -276.215
="253.1034375 " 276.215 -322.438125 ="299.3265625 " 322.438125 -368.66125 ="345.5496875 " 368.66125 -414.884375 ="391.7728125 " 414.884375 -461.1075 ="437.9959375 " 461.1075 -507.330625 ="484.2190625 " 507.330625 -553.55375 ="530.4421875 " 553.55375
-599.776875 ="576.6653125 " 599.776875 -646 ="622.8884375 " 646 -2891.978 ="2868.8664375 " 2891.978 -5137.956 ="5114.8444375 " 5137.956 -7383.934 ="7360.8224375 " 7383.934 -9629.912 ="9606.8004375 " 9629.912 -HIGH="11852.778438 " ;
NOTE: Format F3_ has been output.
48065     +value F4_
48066     +LOW -1975.375 ="1974.6875 "
48067     +1975.375 -1976.75 ="1976.0625 "
48068     +1976.75 -1978.125 ="1977.4375 "
48069     +1978.125 -1979.5 ="1978.8125 "
48070     +1979.5 -1980.875 ="1980.1875 "
48071     +1980.875 -1982.25 ="1981.5625 "
48072     +1982.25 -1983.625 ="1982.9375 "
48073     +1983.625 -1985 ="1984.3125 "
48074     +1985 -1986.375 ="1985.6875 "
48075     +1986.375 -1987.75 ="1987.0625 "
48076     +1987.75 -1989.125 ="1988.4375 "
48077     +1989.125 -1990.5 ="1989.8125 "
48078     +1990.5 -1991.875 ="1991.1875 "
48079     +1991.875 -1993.25 ="1992.5625 "
48080     +1993.25 -1994.625 ="1993.9375 "
48081     +1994.625 -1996 ="1995.3125 "
48082     +1996 -12353.6 ="12352.9125 "
48083     +12353.6 -22711.2 ="22710.5125 "
48084     +22711.2 -33068.8 ="33068.1125 "
48085     +33068.8 -43426.4 ="43425.7125 "
48086     +43426.4 -HIGH="53783.3125 "
48087     +;
MPRINT(VAR_PROFILE):   value F4_ LOW -1975.375 ="1974.6875 " 1975.375 -1976.75 ="1976.0625 " 1976.75 -1978.125 ="1977.4375 " 1978.125 -1979.5 ="1978.8125 " 1979.5 -1980.875 ="1980.1875 " 1980.875 -1982.25 ="1981.5625 " 1982.25 -1983.625 ="1982.9375 "
1983.625 -1985 ="1984.3125 " 1985 -1986.375 ="1985.6875 " 1986.375 -1987.75 ="1987.0625 " 1987.75 -1989.125 ="1988.4375 " 1989.125 -1990.5 ="1989.8125 " 1990.5 -1991.875 ="1991.1875 " 1991.875 -1993.25 ="1992.5625 " 1993.25 -1994.625 ="1993.9375 "
1994.625 -1996 ="1995.3125 " 1996 -12353.6 ="12352.9125 " 12353.6 -22711.2 ="22710.5125 " 22711.2 -33068.8 ="33068.1125 " 33068.8 -43426.4 ="43425.7125 " 43426.4 -HIGH="53783.3125 " ;
NOTE: Format F4_ has been output.
48088     +value F5_
48089     +;
MPRINT(VAR_PROFILE):   value F5_ ;
NOTE: Format F5_ has been output.
MPRINT(VAR_PROFILE):   ;
48090     +;
48091     +value F6_
48092     +LOW -1129.125 ="897.0625 "
48093     +1129.125 -1593.25 ="1361.1875 "
48094     +1593.25 -2057.375 ="1825.3125 "
48095     +2057.375 -2521.5 ="2289.4375 "
48096     +2521.5 -2985.625 ="2753.5625 "
48097     +2985.625 -3449.75 ="3217.6875 "
48098     +3449.75 -3913.875 ="3681.8125 "
48099     +3913.875 -4378 ="4145.9375 "
48100     +4378 -4842.125 ="4610.0625 "
48101     +4842.125 -5306.25 ="5074.1875 "
48102     +5306.25 -5770.375 ="5538.3125 "
48103     +5770.375 -6234.5 ="6002.4375 "
48104     +6234.5 -6698.625 ="6466.5625 "
48105     +6698.625 -7162.75 ="6930.6875 "
48106     +7162.75 -7626.875 ="7394.8125 "
48107     +7626.875 -8091 ="7858.9375 "
48108     +8091 -28558.752 ="28326.6895 "
48109     +28558.752 -49026.504 ="48794.4415 "
48110     +49026.504 -69494.256 ="69262.1935 "
48111     +69494.256 -89962.008 ="89729.9455 "
48112     +89962.008 -HIGH="110197.6975 "
48113     +;
MPRINT(VAR_PROFILE):   value F6_ LOW -1129.125 ="897.0625 " 1129.125 -1593.25 ="1361.1875 " 1593.25 -2057.375 ="1825.3125 " 2057.375 -2521.5 ="2289.4375 " 2521.5 -2985.625 ="2753.5625 " 2985.625 -3449.75 ="3217.6875 " 3449.75 -3913.875 ="3681.8125 "
3913.875 -4378 ="4145.9375 " 4378 -4842.125 ="4610.0625 " 4842.125 -5306.25 ="5074.1875 " 5306.25 -5770.375 ="5538.3125 " 5770.375 -6234.5 ="6002.4375 " 6234.5 -6698.625 ="6466.5625 " 6698.625 -7162.75 ="6930.6875 " 7162.75 -7626.875 ="7394.8125 "
7626.875 -8091 ="7858.9375 " 8091 -28558.752 ="28326.6895 " 28558.752 -49026.504 ="48794.4415 " 49026.504 -69494.256 ="69262.1935 " 69494.256 -89962.008 ="89729.9455 " 89962.008 -HIGH="110197.6975 " ;
NOTE: Format F6_ has been output.
48114     +value F7_
48115     +LOW -16.60875 ="7.249375 "
48116     +16.60875 -35.3275 ="25.968125 "
48117     +35.3275 -54.04625 ="44.686875 "
48118     +54.04625 -72.765 ="63.405625 "
48119     +72.765 -91.48375 ="82.124375 "
48120     +91.48375 -110.2025 ="100.843125 "
48121     +110.2025 -128.92125 ="119.561875 "
48122     +128.92125 -147.64 ="138.280625 "
48123     +147.64 -166.35875 ="156.999375 "
48124     +166.35875 -185.0775 ="175.718125 "
48125     +185.0775 -203.79625 ="194.436875 "
48126     +203.79625 -222.515 ="213.155625 "
48127     +222.515 -241.23375 ="231.874375 "
48128     +241.23375 -259.9525 ="250.593125 "
48129     +259.9525 -278.67125 ="269.311875 "
48130     +278.67125 -297.39 ="288.030625 "
48131     +297.39 -5892.312 ="5882.952625 "
48132     +5892.312 -11487.234 ="11477.874625 "
48133     +11487.234 -17082.156 ="17072.796625 "
48134     +17082.156 -22677.078 ="22667.718625 "
48135     +22677.078 -HIGH="28262.640625 "
48136     +;
MPRINT(VAR_PROFILE):   value F7_ LOW -16.60875 ="7.249375 " 16.60875 -35.3275 ="25.968125 " 35.3275 -54.04625 ="44.686875 " 54.04625 -72.765 ="63.405625 " 72.765 -91.48375 ="82.124375 " 91.48375 -110.2025 ="100.843125 " 110.2025 -128.92125 ="119.561875 "
128.92125 -147.64 ="138.280625 " 147.64 -166.35875 ="156.999375 " 166.35875 -185.0775 ="175.718125 " 185.0775 -203.79625 ="194.436875 " 203.79625 -222.515 ="213.155625 " 222.515 -241.23375 ="231.874375 " 241.23375 -259.9525 ="250.593125 " 259.9525
-278.67125 ="269.311875 " 278.67125 -297.39 ="288.030625 " 297.39 -5892.312 ="5882.952625 " 5892.312 -11487.234 ="11477.874625 " 11487.234 -17082.156 ="17072.796625 " 17082.156 -22677.078 ="22667.718625 " 22677.078 -HIGH="28262.640625 " ;
NOTE: Format F7_ has been output.
48137     +value F8_
48138     +LOW -2.154375 ="-2.4228125 "
48139     +2.154375 -11.30875 ="6.7315625 "
48140     +11.30875 -20.463125 ="15.8859375 "
48141     +20.463125 -29.6175 ="25.0403125 "
48142     +29.6175 -38.771875 ="34.1946875 "
48143     +38.771875 -47.92625 ="43.3490625 "
48144     +47.92625 -57.080625 ="52.5034375 "
48145     +57.080625 -66.235 ="61.6578125 "
48146     +66.235 -75.389375 ="70.8121875 "
48147     +75.389375 -84.54375 ="79.9665625 "
48148     +84.54375 -93.698125 ="89.1209375 "
48149     +93.698125 -102.8525 ="98.2753125 "
48150     +102.8525 -112.006875 ="107.4296875 "
48151     +112.006875 -121.16125 ="116.5840625 "
48152     +121.16125 -130.315625 ="125.7384375 "
48153     +130.315625 -139.47 ="134.8928125 "
48154     +139.47 -191.236 ="186.6588125 "
48155     +191.236 -243.002 ="238.4248125 "
48156     +243.002 -294.768 ="290.1908125 "
48157     +294.768 -346.534 ="341.9568125 "
48158     +346.534 -HIGH="393.7228125 "
48159     +;
MPRINT(VAR_PROFILE):   value F8_ LOW -2.154375 ="-2.4228125 " 2.154375 -11.30875 ="6.7315625 " 11.30875 -20.463125 ="15.8859375 " 20.463125 -29.6175 ="25.0403125 " 29.6175 -38.771875 ="34.1946875 " 38.771875 -47.92625 ="43.3490625 " 47.92625 -57.080625
="52.5034375 " 57.080625 -66.235 ="61.6578125 " 66.235 -75.389375 ="70.8121875 " 75.389375 -84.54375 ="79.9665625 " 84.54375 -93.698125 ="89.1209375 " 93.698125 -102.8525 ="98.2753125 " 102.8525 -112.006875 ="107.4296875 " 112.006875 -121.16125
="116.5840625 " 121.16125 -130.315625 ="125.7384375 " 130.315625 -139.47 ="134.8928125 " 139.47 -191.236 ="186.6588125 " 191.236 -243.002 ="238.4248125 " 243.002 -294.768 ="290.1908125 " 294.768 -346.534 ="341.9568125 " 346.534 -HIGH="393.7228125 " ;
NOTE: Format F8_ has been output.
48160     +value F9_
48161     +LOW -28.354375 ="12.1221875 "
48162     +28.354375 -60.81875 ="44.5865625 "
48163     +60.81875 -93.283125 ="77.0509375 "
48164     +93.283125 -125.7475 ="109.5153125 "
48165     +125.7475 -158.211875 ="141.9796875 "
48166     +158.211875 -190.67625 ="174.4440625 "
48167     +190.67625 -223.140625 ="206.9084375 "
48168     +223.140625 -255.605 ="239.3728125 "
48169     +255.605 -288.069375 ="271.8371875 "
48170     +288.069375 -320.53375 ="304.3015625 "
48171     +320.53375 -352.998125 ="336.7659375 "
48172     +352.998125 -385.4625 ="369.2303125 "
48173     +385.4625 -417.926875 ="401.6946875 "
48174     +417.926875 -450.39125 ="434.1590625 "
48175     +450.39125 -482.855625 ="466.6234375 "
48176     +482.855625 -515.32 ="499.0878125 "
48177     +515.32 -2733.14 ="2716.9078125 "
48178     +2733.14 -4950.96 ="4934.7278125 "
48179     +4950.96 -7168.78 ="7152.5478125 "
48180     +7168.78 -9386.6 ="9370.3678125 "
48181     +9386.6 -HIGH="11588.187813 "
48182     +;
MPRINT(VAR_PROFILE):   value F9_ LOW -28.354375 ="12.1221875 " 28.354375 -60.81875 ="44.5865625 " 60.81875 -93.283125 ="77.0509375 " 93.283125 -125.7475 ="109.5153125 " 125.7475 -158.211875 ="141.9796875 " 158.211875 -190.67625 ="174.4440625 " 190.67625
-223.140625 ="206.9084375 " 223.140625 -255.605 ="239.3728125 " 255.605 -288.069375 ="271.8371875 " 288.069375 -320.53375 ="304.3015625 " 320.53375 -352.998125 ="336.7659375 " 352.998125 -385.4625 ="369.2303125 " 385.4625 -417.926875 ="401.6946875 "
417.926875 -450.39125 ="434.1590625 " 450.39125 -482.855625 ="466.6234375 " 482.855625 -515.32 ="499.0878125 " 515.32 -2733.14 ="2716.9078125 " 2733.14 -4950.96 ="4934.7278125 " 4950.96 -7168.78 ="7152.5478125 " 7168.78 -9386.6 ="9370.3678125 " 9386.6
-HIGH="11588.187813 " ;
NOTE: Format F9_ has been output.
48183     +value F10_
48184     +LOW --2.71375 ="-7.356875 "
48185     +-2.71375 -6.5725 ="1.929375 "
48186     +6.5725 -15.85875 ="11.215625 "
48187     +15.85875 -25.145 ="20.501875 "
48188     +25.145 -34.43125 ="29.788125 "
48189     +34.43125 -43.7175 ="39.074375 "
48190     +43.7175 -53.00375 ="48.360625 "
48191     +53.00375 -62.29 ="57.646875 "
48192     +62.29 -71.57625 ="66.933125 "
48193     +71.57625 -80.8625 ="76.219375 "
48194     +80.8625 -90.14875 ="85.505625 "
48195     +90.14875 -99.435 ="94.791875 "
48196     +99.435 -108.72125 ="104.078125 "
48197     +108.72125 -118.0075 ="113.364375 "
48198     +118.0075 -127.29375 ="122.650625 "
48199     +127.29375 -136.58 ="131.936875 "
48200     +136.58 -507.004 ="502.360875 "
48201     +507.004 -877.428 ="872.784875 "
48202     +877.428 -1247.852 ="1243.208875 "
48203     +1247.852 -1618.276 ="1613.632875 "
48204     +1618.276 -HIGH="1984.056875 "
48205     +;
MPRINT(VAR_PROFILE):   value F10_ LOW --2.71375 ="-7.356875 " -2.71375 -6.5725 ="1.929375 " 6.5725 -15.85875 ="11.215625 " 15.85875 -25.145 ="20.501875 " 25.145 -34.43125 ="29.788125 " 34.43125 -43.7175 ="39.074375 " 43.7175 -53.00375 ="48.360625 "
53.00375 -62.29 ="57.646875 " 62.29 -71.57625 ="66.933125 " 71.57625 -80.8625 ="76.219375 " 80.8625 -90.14875 ="85.505625 " 90.14875 -99.435 ="94.791875 " 99.435 -108.72125 ="104.078125 " 108.72125 -118.0075 ="113.364375 " 118.0075 -127.29375 ="122.650625
" 127.29375 -136.58 ="131.936875 " 136.58 -507.004 ="502.360875 " 507.004 -877.428 ="872.784875 " 877.428 -1247.852 ="1243.208875 " 1247.852 -1618.276 ="1613.632875 " 1618.276 -HIGH="1984.056875 " ;
NOTE: Format F10_ has been output.
48206     +value F11_
48207     +LOW -19.125 ="17.0625 "
48208     +19.125 -23.25 ="21.1875 "
48209     +23.25 -27.375 ="25.3125 "
48210     +27.375 -31.5 ="29.4375 "
48211     +31.5 -35.625 ="33.5625 "
48212     +35.625 -39.75 ="37.6875 "
48213     +39.75 -43.875 ="41.8125 "
48214     +43.875 -48 ="45.9375 "
48215     +48 -52.125 ="50.0625 "
48216     +52.125 -56.25 ="54.1875 "
48217     +56.25 -60.375 ="58.3125 "
48218     +60.375 -64.5 ="62.4375 "
48219     +64.5 -68.625 ="66.5625 "
48220     +68.625 -72.75 ="70.6875 "
48221     +72.75 -76.875 ="74.8125 "
48222     +76.875 -HIGH="78.9375 "
48223     +;
MPRINT(VAR_PROFILE):   value F11_ LOW -19.125 ="17.0625 " 19.125 -23.25 ="21.1875 " 23.25 -27.375 ="25.3125 " 27.375 -31.5 ="29.4375 " 31.5 -35.625 ="33.5625 " 35.625 -39.75 ="37.6875 " 39.75 -43.875 ="41.8125 " 43.875 -48 ="45.9375 " 48 -52.125 ="50.0625
" 52.125 -56.25 ="54.1875 " 56.25 -60.375 ="58.3125 " 60.375 -64.5 ="62.4375 " 64.5 -68.625 ="66.5625 " 68.625 -72.75 ="70.6875 " 72.75 -76.875 ="74.8125 " 76.875 -HIGH="78.9375 " ;
NOTE: Format F11_ has been output.
48224     +value F12_
48225     +LOW -1975.5 ="1974.75 "
48226     +1975.5 -1977 ="1976.25 "
48227     +1977 -1978.5 ="1977.75 "
48228     +1978.5 -1980 ="1979.25 "
48229     +1980 -1981.5 ="1980.75 "
48230     +1981.5 -1983 ="1982.25 "
48231     +1983 -1984.5 ="1983.75 "
48232     +1984.5 -1986 ="1985.25 "
48233     +1986 -1987.5 ="1986.75 "
48234     +1987.5 -1989 ="1988.25 "
48235     +1989 -1990.5 ="1989.75 "
48236     +1990.5 -1992 ="1991.25 "
48237     +1992 -1993.5 ="1992.75 "
48238     +1993.5 -1995 ="1994.25 "
48239     +1995 -1996.5 ="1995.75 "
48240     +1996.5 -HIGH="1997.25 "
48241     +;
MPRINT(VAR_PROFILE):   value F12_ LOW -1975.5 ="1974.75 " 1975.5 -1977 ="1976.25 " 1977 -1978.5 ="1977.75 " 1978.5 -1980 ="1979.25 " 1980 -1981.5 ="1980.75 " 1981.5 -1983 ="1982.25 " 1983 -1984.5 ="1983.75 " 1984.5 -1986 ="1985.25 " 1986 -1987.5 ="1986.75
" 1987.5 -1989 ="1988.25 " 1989 -1990.5 ="1989.75 " 1990.5 -1992 ="1991.25 " 1992 -1993.5 ="1992.75 " 1993.5 -1995 ="1994.25 " 1995 -1996.5 ="1995.75 " 1996.5 -HIGH="1997.25 " ;
NOTE: Format F12_ has been output.
48242     +value F13_
48243     +;
MPRINT(VAR_PROFILE):   value F13_ ;
NOTE: Format F13_ has been output.
MPRINT(VAR_PROFILE):   ;
48244     +;
48245     +value F14_
48246     +LOW --26.83125 ="-50.915625 "
48247     +-26.83125 -21.3375 ="-2.746875 "
48248     +21.3375 -69.50625 ="45.421875 "
48249     +69.50625 -117.675 ="93.590625 "
48250     +117.675 -165.84375 ="141.759375 "
48251     +165.84375 -214.0125 ="189.928125 "
48252     +214.0125 -262.18125 ="238.096875 "
48253     +262.18125 -310.35 ="286.265625 "
48254     +310.35 -358.51875 ="334.434375 "
48255     +358.51875 -406.6875 ="382.603125 "
48256     +406.6875 -454.85625 ="430.771875 "
48257     +454.85625 -503.025 ="478.940625 "
48258     +503.025 -551.19375 ="527.109375 "
48259     +551.19375 -599.3625 ="575.278125 "
48260     +599.3625 -647.53125 ="623.446875 "
48261     +647.53125 -695.7 ="671.615625 "
48262     +695.7 -5566.32 ="5542.235625 "
48263     +5566.32 -10436.94 ="10412.855625 "
48264     +10436.94 -15307.56 ="15283.475625 "
48265     +15307.56 -20178.18 ="20154.095625 "
48266     +20178.18 -HIGH="25024.715625 "
48267     +;
MPRINT(VAR_PROFILE):   value F14_ LOW --26.83125 ="-50.915625 " -26.83125 -21.3375 ="-2.746875 " 21.3375 -69.50625 ="45.421875 " 69.50625 -117.675 ="93.590625 " 117.675 -165.84375 ="141.759375 " 165.84375 -214.0125 ="189.928125 " 214.0125 -262.18125
="238.096875 " 262.18125 -310.35 ="286.265625 " 310.35 -358.51875 ="334.434375 " 358.51875 -406.6875 ="382.603125 " 406.6875 -454.85625 ="430.771875 " 454.85625 -503.025 ="478.940625 " 503.025 -551.19375 ="527.109375 " 551.19375 -599.3625 ="575.278125 "
599.3625 -647.53125 ="623.446875 " 647.53125 -695.7 ="671.615625 " 695.7 -5566.32 ="5542.235625 " 5566.32 -10436.94 ="10412.855625 " 10436.94 -15307.56 ="15283.475625 " 15307.56 -20178.18 ="20154.095625 " 20178.18 -HIGH="25024.715625 " ;
NOTE: Format F14_ has been output.
48268     +value F15_
48269     +LOW -395.74420191 ="374.63400239 "
48270     +395.74420191 -435.44815143 ="414.33795191 "
48271     +435.44815143 -475.15210096 ="454.04190143 "
48272     +475.15210096 -514.85605048 ="493.74585096 "
48273     +514.85605048 -554.56 ="533.44980048 "
48274     +554.56 -591.7475 ="573.15375 "
48275     +591.7475 -628.935 ="610.34125 "
48276     +628.935 -666.1225 ="647.52875 "
48277     +666.1225 -703.31 ="684.71625 "
48278     +703.31 -740.4975 ="721.90375 "
48279     +740.4975 -777.685 ="759.09125 "
48280     +777.685 -814.8725 ="796.27875 "
48281     +814.8725 -852.06 ="833.46625 "
48282     +852.06 -889.2475 ="870.65375 "
48283     +889.2475 -926.435 ="907.84125 "
48284     +926.435 -963.6225 ="945.02875 "
48285     +963.6225 -1000.81 ="982.21625 "
48286     +1000.81 -1037.9975 ="1019.40375 "
48287     +1037.9975 -1075.185 ="1056.59125 "
48288     +1075.185 -1112.3725 ="1093.77875 "
48289     +1112.3725 -1149.56 ="1130.96625 "
48290     +1149.56 -6785.912 ="6767.31825 "
48291     +6785.912 -12422.264 ="12403.67025 "
48292     +12422.264 -18058.616 ="18040.02225 "
48293     +18058.616 -23694.968 ="23676.37425 "
48294     +23694.968 -HIGH="29312.72625 "
48295     +;
MPRINT(VAR_PROFILE):   value F15_ LOW -395.74420191 ="374.63400239 " 395.74420191 -435.44815143 ="414.33795191 " 435.44815143 -475.15210096 ="454.04190143 " 475.15210096 -514.85605048 ="493.74585096 " 514.85605048 -554.56 ="533.44980048 " 554.56 -591.7475
="573.15375 " 591.7475 -628.935 ="610.34125 " 628.935 -666.1225 ="647.52875 " 666.1225 -703.31 ="684.71625 " 703.31 -740.4975 ="721.90375 " 740.4975 -777.685 ="759.09125 " 777.685 -814.8725 ="796.27875 " 814.8725 -852.06 ="833.46625 " 852.06 -889.2475
="870.65375 " 889.2475 -926.435 ="907.84125 " 926.435 -963.6225 ="945.02875 " 963.6225 -1000.81 ="982.21625 " 1000.81 -1037.9975 ="1019.40375 " 1037.9975 -1075.185 ="1056.59125 " 1075.185 -1112.3725 ="1093.77875 " 1112.3725 -1149.56 ="1130.96625 " 1149.56
-6785.912 ="6767.31825 " 6785.912 -12422.264 ="12403.67025 " 12422.264 -18058.616 ="18040.02225 " 18058.616 -23694.968 ="23676.37425 " 23694.968 -HIGH="29312.72625 " ;
NOTE: Format F15_ has been output.
MPRINT(VAR_PROFILE):   run;
48296     +run;
 
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename fref;
NOTE: Fileref FREF has been deassigned.
MPRINT(VAR_PROFILE):   data _binneddata / view=_binneddata;
MPRINT(VAR_PROFILE):   set EMWS1.Trans_TRAIN(obs=1000000);
MPRINT(VAR_PROFILE):   format ClaimsRate F1_. CustomerAge F2_. CustomerMonetaryValue F3_. FirstPolicyYear F4_. IMP_FirstPolicyYear F5_. IMP_GrossMonthlySalary F6_. IMP_PremiumsinLOBHealth F7_. IMP_PremiumsinLOBLife F8_. IMP_PremiumsinLOBMotor F9_.
IMP_PremiumsinLOBWorkComp F10_. IMP_REP_CustomerAge F11_. IMP_REP_FirstPolicyYear F12_. LOYALTY F13_. PremiumsinLOBHousehold F14_. TOTAL_PREMIUM F15_. ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: DATA STEP view saved on file WORK._BINNEDDATA.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.11 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data=_binneddata(obs=1000000) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(VAR_PROFILE):   class
MPRINT(_VARS):   ClaimsRate CustomerAge CustomerMonetaryValue FirstPolicyYear IMP_FirstPolicyYear IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBLife IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp IMP_REP_CustomerAge
IMP_REP_FirstPolicyYear LOYALTY PremiumsinLOBHousehold TOTAL_PREMIUM
MPRINT(VAR_PROFILE):   ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Variable IMP_FirstPolicyYear is uninitialized.
NOTE: Records processed = 10296   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      10296 at 128408:24
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View WORK._BINNEDDATA.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.18 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set WORK._BINNEDDATA.
NOTE: The data set WORK._TEMPTAB has 257 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
 
 
MPRINT(VAR_PROFILE):   data EMWS1.Filter_VARDIST;
MPRINT(VAR_PROFILE):   label VALUE = "Value";
MPRINT(VAR_PROFILE):   label VARIABLE = "Variable";
MPRINT(VAR_PROFILE):   label COUNT = "Frequency Count";
MPRINT(VAR_PROFILE):   label PERCENT = "Percent";
MPRINT(VAR_PROFILE):   set _temptab;
MPRINT(VAR_PROFILE):   format VALUE 12.3 count;
MPRINT(VAR_PROFILE):   value = inputn(level, 'best12.');
MPRINT(VAR_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 257 observations read from the data set WORK._TEMPTAB.
NOTE: The data set EMWS1.FILTER_VARDIST has 257 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   data EMWS1.Filter_VARDIST;
MPRINT(VAR_PROFILE):   set EMWS1.Filter_VARDIST(in=_a) _MINMAXDATA;
MPRINT(VAR_PROFILE):   if _a then Pos=2;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 257 observations read from the data set EMWS1.FILTER_VARDIST.
NOTE: There were 30 observations read from the data set WORK._MINMAXDATA.
NOTE: The data set EMWS1.FILTER_VARDIST has 287 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=EMWS1.Filter_VARDIST out=EMWS1.Filter_VARDIST(drop=pos);
MPRINT(VAR_PROFILE):   by VARIABLE POS VALUE;
MPRINT(VAR_PROFILE):   where VALUE ne .;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 279 observations read from the data set EMWS1.FILTER_VARDIST.
      WHERE VALUE not = .;
NOTE: The data set EMWS1.FILTER_VARDIST has 279 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Deleting WORK._TEMPTAB (memtype=DATA).
NOTE: Deleting WORK._BINNEDDATA (memtype=VIEW).
NOTE: Deleting WORK._MINMAXDATA (memtype=DATA).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
MPRINT(EM_DIAGRAM):    data WORK.M0JJLGYS;
MPRINT(EM_DIAGRAM):   retain _MAXLEVEL 25;
MPRINT(EM_DIAGRAM):   set WORK.M0JJLGYS end=eof;
MPRINT(EM_DIAGRAM):   if ROLE ^in('TARGET', 'INPUT', 'FREQ') and CALCMETHOD ne 'NONE' then ROLE ='INPUT';
MPRINT(EM_DIAGRAM):   drop _MAXLEVEL;
MPRINT(EM_DIAGRAM):   if MAXVALUES = . then MAXVALUES =25;
MPRINT(EM_DIAGRAM):   if MAXVALUES>_MAXLEVEL then _MAXLEVEL=MAXVALUES;
MPRINT(EM_DIAGRAM):   if eof then call symput('_MAXLEVEL', strip(put(_MAXLEVEL, best.)));
MPRINT(EM_DIAGRAM):   run;
48307      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
48308      * Filter: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * Filter: DMDBClass Macro ;
48309      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
48310      %macro DMDBClass;
48311
48312      %mend DMDBClass;
48313      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
48314      * Filter: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Filter: DMDBVar Macro ;
48315      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
48316      %macro DMDBVar;
48317          ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary
48318         IMP_PremiumsinLOBHealth IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp
48319         PremiumsinLOBHousehold TOTAL_PREMIUM
48320      %mend DMDBVar;
48321      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48322      * Filter: Create DMDB;
MPRINT(EM_DIAGRAM):   * Filter: Create DMDB;
48323      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48324      proc dmdb batch data=EMWS1.Trans_TRAIN
48325      varout=WORK._EMFILTERVAR
48326      maxlevel = 26
48327      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Trans_TRAIN varout=WORK._EMFILTERVAR maxlevel = 26 ;
MPRINT(EM_DIAGRAM):   var
48328      var %DMDBVar;
MPRINT(DMDBVAR):   ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp PremiumsinLOBHousehold TOTAL_PREMIUM
MPRINT(EM_DIAGRAM):  ;
48329      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable IMP_FirstPolicyYear is uninitialized.
NOTE: Records processed = 10296   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      10296 at 128408:24
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.11 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: The data set WORK._EMFILTERVAR has 8 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.16 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
48330      quit;
48331      *--- end code ---*;
 
48332      data WORK.M0JJLGYS;
MPRINT(EM_DIAGRAM):    data WORK.M0JJLGYS;
48333      set WORK.M0JJLGYS;
MPRINT(EM_DIAGRAM):   set WORK.M0JJLGYS;
48334      if ROLE ^in('TARGET', 'INPUT', 'FREQ') and CALCMETHOD ne 'NONE' then ROLE ='INPUT';
MPRINT(EM_DIAGRAM):   if ROLE ^in('TARGET', 'INPUT', 'FREQ') and CALCMETHOD ne 'NONE' then ROLE ='INPUT';
48335      if LEVEL ne 'INTERVAL' and KEEPMISSING='N';
MPRINT(EM_DIAGRAM):   if LEVEL ne 'INTERVAL' and KEEPMISSING='N';
48336      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.M0JJLGYS.
NOTE: The data set WORK.M0JJLGYS has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
48337      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
48338      * Filter: Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Filter: Input Variables Macro ;
48339      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
48340      %macro EM_FILTERPCT;
48341          ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary
48342         IMP_PremiumsinLOBHealth IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp
48343         PremiumsinLOBHousehold TOTAL_PREMIUM
48344      %mend EM_FILTERPCT;
48345      data EM_Filter_PCT / view=EM_Filter_PCT;
MPRINT(EM_DIAGRAM):   data EM_Filter_PCT / view=EM_Filter_PCT;
48346      set
48346    ! EMWS1.Trans_TRAIN(keep=%EM_FILTERPCT );
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN(keep
MPRINT(EM_DIAGRAM):  =ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp PremiumsinLOBHousehold TOTAL_PREMIUM );
48347      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_FILTER_PCT.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Filter: Method PERCENTS;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48348      *------------------------------------------------------------*;
48349      * Filter: Method PERCENTS;
48350      *------------------------------------------------------------*;
48351      proc stdize data=EM_Filter_PCT outstat=WORK.FilterOUTSTAT out=_null_ pctlpts= 0.5 99.5;
MPRINT(EM_DIAGRAM):   proc stdize data=EM_Filter_PCT outstat=WORK.FilterOUTSTAT out=_null_ pctlpts= 0.5 99.5;
MPRINT(EM_DIAGRAM):   var
48352      var %EM_FILTERPCT;
MPRINT(EM_FILTERPCT):   ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp PremiumsinLOBHousehold TOTAL_PREMIUM
MPRINT(EM_DIAGRAM):  ;
48353      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable IMP_FirstPolicyYear is uninitialized.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      10296 at 128408:24
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View WORK.EM_FILTER_PCT.VIEW used (Total process time):
      real time           0.46 seconds
      cpu time            0.43 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10296 observations read from the data set WORK.EM_FILTER_PCT.
NOTE: The data set WORK.FILTEROUTSTAT has 10 observations and 9 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.48 seconds
      cpu time            0.45 seconds
 
 
48354      %let _FilterIntervalNum= 0;
48355      proc sort data=EMWS1.Filter_INTERVAL;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Filter_INTERVAL;
48356      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
48357      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.FILTER_INTERVAL.
NOTE: The data set EMWS1.FILTER_INTERVAL has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
48358      filename _X "C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\INTERVALFILTERCODE.txt";
MPRINT(EM_DIAGRAM):   filename _X "C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\INTERVALFILTERCODE.txt";
48359      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
48360      length string $200;
MPRINT(EM_DIAGRAM):   length string $200;
48361      set EMWS1.Filter_INTERVAL end=eof;
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_INTERVAL end=eof;
48362      file _X;
MPRINT(EM_DIAGRAM):   file _X;
48363      where (INTERVALMIN ne . or INTERVALMAX ne . or KEEPMISSING eq 'N')
48364      ;
MPRINT(EM_DIAGRAM):   where (INTERVALMIN ne . or INTERVALMAX ne . or KEEPMISSING eq 'N') ;
48365      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
48366      if _N_ = 1 then do;
MPRINT(EM_DIAGRAM):   if _N_ = 1 then do;
48367      string = ' (';
MPRINT(EM_DIAGRAM):   string = ' (';
48368      end;
MPRINT(EM_DIAGRAM):   end;
48369      else do;
MPRINT(EM_DIAGRAM):   else do;
48370      string = ' and (';
MPRINT(EM_DIAGRAM):   string = ' and (';
48371      end;
MPRINT(EM_DIAGRAM):   end;
48372      if INTERVALMIN ne . or INTERVALMAX ne . then do;
MPRINT(EM_DIAGRAM):   if INTERVALMIN ne . or INTERVALMAX ne . then do;
48373      if KEEPMISSING = 'N' then string = trim(string)!!' '!!strip(NAME)!!' ne . and ';
MPRINT(EM_DIAGRAM):   if KEEPMISSING = 'N' then string = trim(string)!!' '!!strip(NAME)!!' ne . and ';
48374      else string = trim(string)!!' '!!strip(NAME)!!' eq . or ';
MPRINT(EM_DIAGRAM):   else string = trim(string)!!' '!!strip(NAME)!!' eq . or ';
48375      if INTERVALMIN ne . and INTERVALMAX ne . then do;
MPRINT(EM_DIAGRAM):   if INTERVALMIN ne . and INTERVALMAX ne . then do;
48376      string = trim(string)!!' ('!!strip(put(INTERVALMIN, best12.))!!'<='!!strip(NAME)!!') and ('!!strip(NAME)!!'<='!!strip(put(INTERVALMAX, best12.))!!')';
MPRINT(EM_DIAGRAM):   string = trim(string)!!' ('!!strip(put(INTERVALMIN, best12.))!!'<='!!strip(NAME)!!') and ('!!strip(NAME)!!'<='!!strip(put(INTERVALMAX, best12.))!!')';
48377      end;
MPRINT(EM_DIAGRAM):   end;
48378      else if INTERVALMIN eq . and INTERVALMAX ne . then do;
MPRINT(EM_DIAGRAM):   else if INTERVALMIN eq . and INTERVALMAX ne . then do;
48379      string = trim(string)!!' ('!!strip(NAME)!!'<='!!strip(put(INTERVALMAX, best12.))!!')';
MPRINT(EM_DIAGRAM):   string = trim(string)!!' ('!!strip(NAME)!!'<='!!strip(put(INTERVALMAX, best12.))!!')';
48380      end;
MPRINT(EM_DIAGRAM):   end;
48381      else if INTERVALMIN ne . and INTERVALMAX eq . then do;
MPRINT(EM_DIAGRAM):   else if INTERVALMIN ne . and INTERVALMAX eq . then do;
48382      string = trim(string)!!' ('!!strip(put(INTERVALMIN, best12.)) || '<=' || NAME||')';
MPRINT(EM_DIAGRAM):   string = trim(string)!!' ('!!strip(put(INTERVALMIN, best12.)) || '<=' || NAME||')';
48383      end;
MPRINT(EM_DIAGRAM):   end;
48384      end;
MPRINT(EM_DIAGRAM):   end;
48385      else do;
MPRINT(EM_DIAGRAM):   else do;
48386      string = trim(string)!!' '!!strip(name)!!' ne .';
MPRINT(EM_DIAGRAM):   string = trim(string)!!' '!!strip(name)!!' ne .';
48387      end;
MPRINT(EM_DIAGRAM):   end;
48388      string = trim(string)!!')';
MPRINT(EM_DIAGRAM):   string = trim(string)!!')';
48389      put string;
MPRINT(EM_DIAGRAM):   put string;
48390      if eof then call symput('_FilterIntervalNum', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   if eof then call symput('_FilterIntervalNum', strip(put(_N_, best.)));
48391      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file _X is:
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\INTERVALFILTERCODE.txt,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=30Dec2015:15:20:28,
      Create Time=30Dec2015:15:20:28
 
NOTE: 8 records were written to the file _X.
      The minimum record length was 68.
      The maximum record length was 113.
NOTE: There were 8 observations read from the data set EMWS1.FILTER_INTERVAL.
      WHERE (INTERVALMIN not = .) or (INTERVALMAX not = .) or (KEEPMISSING='N');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48392      %let _FilterIntervalNum= 0;
48393      proc sort data=EMWS1.Filter_INTERVAL;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Filter_INTERVAL;
48394      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
48395      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48396      filename _X "C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\INTERVALPUBLISHFILTERCODE.txt";
MPRINT(EM_DIAGRAM):   filename _X "C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\INTERVALPUBLISHFILTERCODE.txt";
48397      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
48398      length string $200;
MPRINT(EM_DIAGRAM):   length string $200;
48399      set EMWS1.Filter_INTERVAL end=eof;
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_INTERVAL end=eof;
48400      file _X;
MPRINT(EM_DIAGRAM):   file _X;
48401      where (INTERVALMIN ne . or INTERVALMAX ne . or KEEPMISSING eq 'N')
48402      and ROLE ne 'TARGET';
MPRINT(EM_DIAGRAM):   where (INTERVALMIN ne . or INTERVALMAX ne . or KEEPMISSING eq 'N') and ROLE ne 'TARGET';
48403      ;
MPRINT(EM_DIAGRAM):   ;
48404      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
48405      if _N_ = 1 then do;
MPRINT(EM_DIAGRAM):   if _N_ = 1 then do;
48406      string = ' (';
MPRINT(EM_DIAGRAM):   string = ' (';
48407      end;
MPRINT(EM_DIAGRAM):   end;
48408      else do;
MPRINT(EM_DIAGRAM):   else do;
48409      string = ' and (';
MPRINT(EM_DIAGRAM):   string = ' and (';
48410      end;
MPRINT(EM_DIAGRAM):   end;
48411      if INTERVALMIN ne . or INTERVALMAX ne . then do;
MPRINT(EM_DIAGRAM):   if INTERVALMIN ne . or INTERVALMAX ne . then do;
48412      if KEEPMISSING = 'N' then string = trim(string)!!' '!!strip(NAME)!!' ne . and ';
MPRINT(EM_DIAGRAM):   if KEEPMISSING = 'N' then string = trim(string)!!' '!!strip(NAME)!!' ne . and ';
48413      else string = trim(string)!!' '!!strip(NAME)!!' eq . or ';
MPRINT(EM_DIAGRAM):   else string = trim(string)!!' '!!strip(NAME)!!' eq . or ';
48414      if INTERVALMIN ne . and INTERVALMAX ne . then do;
MPRINT(EM_DIAGRAM):   if INTERVALMIN ne . and INTERVALMAX ne . then do;
48415      string = trim(string)!!' ('!!strip(put(INTERVALMIN, best12.))!!'<='!!strip(NAME)!!') and ('!!strip(NAME)!!'<='!!strip(put(INTERVALMAX, best12.))!!')';
MPRINT(EM_DIAGRAM):   string = trim(string)!!' ('!!strip(put(INTERVALMIN, best12.))!!'<='!!strip(NAME)!!') and ('!!strip(NAME)!!'<='!!strip(put(INTERVALMAX, best12.))!!')';
48416      end;
MPRINT(EM_DIAGRAM):   end;
48417      else if INTERVALMIN eq . and INTERVALMAX ne . then do;
MPRINT(EM_DIAGRAM):   else if INTERVALMIN eq . and INTERVALMAX ne . then do;
48418      string = trim(string)!!' ('!!strip(NAME)!!'<='!!strip(put(INTERVALMAX, best12.))!!')';
MPRINT(EM_DIAGRAM):   string = trim(string)!!' ('!!strip(NAME)!!'<='!!strip(put(INTERVALMAX, best12.))!!')';
48419      end;
MPRINT(EM_DIAGRAM):   end;
48420      else if INTERVALMIN ne . and INTERVALMAX eq . then do;
MPRINT(EM_DIAGRAM):   else if INTERVALMIN ne . and INTERVALMAX eq . then do;
48421      string = trim(string)!!' ('!!strip(put(INTERVALMIN, best12.)) || '<=' || NAME||')';
MPRINT(EM_DIAGRAM):   string = trim(string)!!' ('!!strip(put(INTERVALMIN, best12.)) || '<=' || NAME||')';
48422      end;
MPRINT(EM_DIAGRAM):   end;
48423      end;
MPRINT(EM_DIAGRAM):   end;
48424      else do;
MPRINT(EM_DIAGRAM):   else do;
48425      string = trim(string)!!' '!!strip(name)!!' ne .';
MPRINT(EM_DIAGRAM):   string = trim(string)!!' '!!strip(name)!!' ne .';
48426      end;
MPRINT(EM_DIAGRAM):   end;
48427      string = trim(string)!!')';
MPRINT(EM_DIAGRAM):   string = trim(string)!!')';
48428      put string;
MPRINT(EM_DIAGRAM):   put string;
48429      if eof then call symput('_FilterIntervalNum', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   if eof then call symput('_FilterIntervalNum', strip(put(_N_, best.)));
48430      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file _X is:
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\INTERVALPUBLISHFILTERCODE.txt,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=30Dec2015:15:20:28,
      Create Time=30Dec2015:15:20:28
 
NOTE: 8 records were written to the file _X.
      The minimum record length was 68.
      The maximum record length was 113.
NOTE: There were 8 observations read from the data set EMWS1.FILTER_INTERVAL.
      WHERE ((INTERVALMIN not = .) or (INTERVALMAX not = .) or (KEEPMISSING='N')) and (ROLE not = 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
48431      data EMWS1.Filter_TRAIN / view=EMWS1.Filter_TRAIN;
MPRINT(EM_DIAGRAM):    data EMWS1.Filter_TRAIN / view=EMWS1.Filter_TRAIN;
48432      set EMWS1.Trans_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN;
48433      if
48434      ( ClaimsRate eq . or (0<=ClaimsRate) and (ClaimsRate<=1.3039270713))
48435      and ( CustomerMonetaryValue eq . or (-250.93<=CustomerMonetaryValue) and (CustomerMonetaryValue<=1143.11))
48436      and ( IMP_GrossMonthlySalary eq . or (853<=IMP_GrossMonthlySalary) and (IMP_GrossMonthlySalary<=9085))
48437      and ( IMP_PremiumsinLOBHealth eq . or (24.45<=IMP_PremiumsinLOBHealth) and (IMP_PremiumsinLOBHealth<=365.07))
48438      and ( IMP_PremiumsinLOBMotor eq . or (18.78<=IMP_PremiumsinLOBMotor) and (IMP_PremiumsinLOBMotor<=559.44))
48439      and ( IMP_PremiumsinLOBWorkComp eq . or (-11<=IMP_PremiumsinLOBWorkComp) and (IMP_PremiumsinLOBWorkComp<=254.38))
48440      and ( PremiumsinLOBHousehold eq . or (-70<=PremiumsinLOBHousehold) and (PremiumsinLOBHousehold<=1194.1))
48441      and ( TOTAL_PREMIUM eq . or (514.67<=TOTAL_PREMIUM) and (TOTAL_PREMIUM<=1568.31))
48442      ;
MPRINT(EM_DIAGRAM):   if ( ClaimsRate eq . or (0<=ClaimsRate) and (ClaimsRate<=1.3039270713)) and ( CustomerMonetaryValue eq . or (-250.93<=CustomerMonetaryValue) and (CustomerMonetaryValue<=1143.11)) and ( IMP_GrossMonthlySalary eq . or
(853<=IMP_GrossMonthlySalary) and (IMP_GrossMonthlySalary<=9085)) and ( IMP_PremiumsinLOBHealth eq . or (24.45<=IMP_PremiumsinLOBHealth) and (IMP_PremiumsinLOBHealth<=365.07)) and ( IMP_PremiumsinLOBMotor eq . or (18.78<=IMP_PremiumsinLOBMotor) and
(IMP_PremiumsinLOBMotor<=559.44)) and ( IMP_PremiumsinLOBWorkComp eq . or (-11<=IMP_PremiumsinLOBWorkComp) and (IMP_PremiumsinLOBWorkComp<=254.38)) and ( PremiumsinLOBHousehold eq . or (-70<=PremiumsinLOBHousehold) and (PremiumsinLOBHousehold<=1194.1))
and ( TOTAL_PREMIUM eq . or (514.67<=TOTAL_PREMIUM) and (TOTAL_PREMIUM<=1568.31)) ;
48443      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.FILTER_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
 
48444      data WORK.FilterFILTERVAR;
MPRINT(EM_DIAGRAM):    data WORK.FilterFILTERVAR;
48445      set
48446      EMWS1.Filter_INTERVAL(where=(INTERVALMIN ne . or INTERVALMAX ne . or KEEPMISSING='N'))
48447      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_INTERVAL(where=(INTERVALMIN ne . or INTERVALMAX ne . or KEEPMISSING='N')) ;
48448      keep NAME;
MPRINT(EM_DIAGRAM):   keep NAME;
48449      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.FILTER_INTERVAL.
      WHERE (INTERVALMIN not = .) or (INTERVALMAX not = .) or (KEEPMISSING='N');
NOTE: The data set WORK.FILTERFILTERVAR has 8 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48450      proc sort data= WORK.FilterFILTERVAR nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data= WORK.FilterFILTERVAR nodupkey;
48451      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
48452      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.FILTERFILTERVAR.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.FILTERFILTERVAR has 8 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48453      proc sort data=WORK.M0NZ48RE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M0NZ48RE;
48454      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
48455      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK.M0NZ48RE.
NOTE: The data set WORK.M0NZ48RE has 18 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48456      data WORK.FilterDMDBC;
MPRINT(EM_DIAGRAM):   data WORK.FilterDMDBC;
48457      merge WORK.M0NZ48RE WORK.FilterFILTERVAR(in=_b);
MPRINT(EM_DIAGRAM):   merge WORK.M0NZ48RE WORK.FilterFILTERVAR(in=_b);
48458      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
48459      if (REPORT = 'Y' or ROLE in('FREQ','TARGET') or _b) then output;
MPRINT(EM_DIAGRAM):   if (REPORT = 'Y' or ROLE in('FREQ','TARGET') or _b) then output;
48460      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK.M0NZ48RE.
NOTE: There were 8 observations read from the data set WORK.FILTERFILTERVAR.
NOTE: The data set WORK.FILTERDMDBC has 8 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
48461      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
48462      * Filter: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * Filter: DMDBClass Macro ;
48463      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
48464      %macro DMDBClass;
48465
48466      %mend DMDBClass;
48467      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
48468      * Filter: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Filter: DMDBVar Macro ;
48469      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
48470      %macro DMDBVar;
48471          ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary
48472         IMP_PremiumsinLOBHealth IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp
48473         PremiumsinLOBHousehold TOTAL_PREMIUM
48474      %mend DMDBVar;
48475      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48476      * Filter: Create DMDB;
MPRINT(EM_DIAGRAM):   * Filter: Create DMDB;
48477      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48478      proc dmdb batch data=EMWS1.Trans_TRAIN
48479      dmdbcat=WORK.Filter_DMDB
48480      varout=WORK.FILTER_VARSTATS
48481      maxlevel = 513
48482      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Trans_TRAIN dmdbcat=WORK.Filter_DMDB varout=WORK.FILTER_VARSTATS maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   var
48483      var %DMDBVar;
MPRINT(DMDBVAR):   ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp PremiumsinLOBHousehold TOTAL_PREMIUM
MPRINT(EM_DIAGRAM):  ;
48484      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable IMP_FirstPolicyYear is uninitialized.
NOTE: Records processed = 10296   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      10296 at 128408:24
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: The data set WORK.FILTER_VARSTATS has 8 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.16 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
48485      quit;
48486      *--- end code ---*;
 
48487      data WORK.FILTER_VARSTATS;
MPRINT(EM_DIAGRAM):    data WORK.FILTER_VARSTATS;
48488      length DATAROLE $10 TYPE $8 NAME $32;
MPRINT(EM_DIAGRAM):   length DATAROLE $10 TYPE $8 NAME $32;
48489      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
48490      label N = "%sysfunc(sasmsg(sashelp.dmine, rpt_nonMiss_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label N = "Non Missing";
48491      label NMISS = "%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NMISS = "Missing";
48492      label MIN = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label MIN = "Minimum";
48493      label MAX = "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label MAX = "Maximum";
48494      label MEAN = "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label MEAN = "Mean";
48495      label STD = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label STD = "Standard Deviation";
48496      label SKEWNESS = "%sysfunc(sasmsg(sashelp.dmine, rpt_skewness_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label SKEWNESS = "Skewness";
48497      label KURTOSIS = "%sysfunc(sasmsg(sashelp.dmine, rpt_kurtosis_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label KURTOSIS = "Kurtosis";
48498      label NUMCAT = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NUMCAT = "Number of Levels";
48499      retain DATAROLE "TRAIN" type "ORIGINAL";
MPRINT(EM_DIAGRAM):   retain DATAROLE "TRAIN" type "ORIGINAL";
48500      set WORK.FILTER_VARSTATS;
MPRINT(EM_DIAGRAM):   set WORK.FILTER_VARSTATS;
48501      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable NUMCAT is uninitialized.
NOTE: There were 8 observations read from the data set WORK.FILTER_VARSTATS.
NOTE: The data set WORK.FILTER_VARSTATS has 8 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
48502      proc append base=EMWS1.Filter_STATS data=WORK.FILTER_VARSTATS;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Filter_STATS data=WORK.FILTER_VARSTATS;
48503      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.FILTER_VARSTATS to EMWS1.FILTER_STATS.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 8 observations read from the data set WORK.FILTER_VARSTATS.
NOTE: The data set EMWS1.FILTER_STATS has 8 observations and 11 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 30, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:20:29" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                December 30, 2015
Time:                15:20:29
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1HSZLTM "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1HSZLTM new;
MPRINT(EM_DIAGRAM):   run;
48605      proc sort data=EMWS1.Filter_INTERVAL;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Filter_INTERVAL;
48606      by name;
MPRINT(EM_DIAGRAM):   by name;
48607      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48608      proc print data=EMWS1.Filter_INTERVAL(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Filter_INTERVAL(obs=500) noobs label;
48609      where (INTERVALMIN ne . or INTERVALMAX ne . or KEEPMISSING='N');
MPRINT(EM_DIAGRAM):   where (INTERVALMIN ne . or INTERVALMAX ne . or KEEPMISSING='N');
48610      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_filterintervallimits_title,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Filter Limits for Interval Variables";
48611      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   run;
48612      run;
 
NOTE: There were 8 observations read from the data set EMWS1.FILTER_INTERVAL.
      WHERE (INTERVALMIN not = .) or (INTERVALMAX not = .) or (KEEPMISSING='N');
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48613      title9;
MPRINT(EM_DIAGRAM):   title9;
48614      title10;
MPRINT(EM_DIAGRAM):   title10;
48615      data WORK.DATA_FILTERED / view=WORK.DATA_FILTERED;
MPRINT(EM_DIAGRAM):    data WORK.DATA_FILTERED / view=WORK.DATA_FILTERED;
48616      set EMWS1.Trans_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN;
48617      if
48618      ( ClaimsRate eq . or (0<=ClaimsRate) and (ClaimsRate<=1.3039270713))
48619      and ( CustomerMonetaryValue eq . or (-250.93<=CustomerMonetaryValue) and (CustomerMonetaryValue<=1143.11))
48620      and ( IMP_GrossMonthlySalary eq . or (853<=IMP_GrossMonthlySalary) and (IMP_GrossMonthlySalary<=9085))
48621      and ( IMP_PremiumsinLOBHealth eq . or (24.45<=IMP_PremiumsinLOBHealth) and (IMP_PremiumsinLOBHealth<=365.07))
48622      and ( IMP_PremiumsinLOBMotor eq . or (18.78<=IMP_PremiumsinLOBMotor) and (IMP_PremiumsinLOBMotor<=559.44))
48623      and ( IMP_PremiumsinLOBWorkComp eq . or (-11<=IMP_PremiumsinLOBWorkComp) and (IMP_PremiumsinLOBWorkComp<=254.38))
48624      and ( PremiumsinLOBHousehold eq . or (-70<=PremiumsinLOBHousehold) and (PremiumsinLOBHousehold<=1194.1))
48625      and ( TOTAL_PREMIUM eq . or (514.67<=TOTAL_PREMIUM) and (TOTAL_PREMIUM<=1568.31))
48626      then do;
MPRINT(EM_DIAGRAM):   if ( ClaimsRate eq . or (0<=ClaimsRate) and (ClaimsRate<=1.3039270713)) and ( CustomerMonetaryValue eq . or (-250.93<=CustomerMonetaryValue) and (CustomerMonetaryValue<=1143.11)) and ( IMP_GrossMonthlySalary eq . or
(853<=IMP_GrossMonthlySalary) and (IMP_GrossMonthlySalary<=9085)) and ( IMP_PremiumsinLOBHealth eq . or (24.45<=IMP_PremiumsinLOBHealth) and (IMP_PremiumsinLOBHealth<=365.07)) and ( IMP_PremiumsinLOBMotor eq . or (18.78<=IMP_PremiumsinLOBMotor) and
(IMP_PremiumsinLOBMotor<=559.44)) and ( IMP_PremiumsinLOBWorkComp eq . or (-11<=IMP_PremiumsinLOBWorkComp) and (IMP_PremiumsinLOBWorkComp<=254.38)) and ( PremiumsinLOBHousehold eq . or (-70<=PremiumsinLOBHousehold) and (PremiumsinLOBHousehold<=1194.1))
and ( TOTAL_PREMIUM eq . or (514.67<=TOTAL_PREMIUM) and (TOTAL_PREMIUM<=1568.31)) then do;
48627      if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
48628      else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
48629      end;
MPRINT(EM_DIAGRAM):   end;
48630      else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
48631      label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
48632      if M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER = 0;
48633      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.DATA_FILTERED.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.14 seconds
 
 
48634      data WORK.DATA_EXCLUDED / view=WORK.DATA_EXCLUDED;
MPRINT(EM_DIAGRAM):   data WORK.DATA_EXCLUDED / view=WORK.DATA_EXCLUDED;
48635      set EMWS1.Trans_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN;
48636      if
48637      ( ClaimsRate eq . or (0<=ClaimsRate) and (ClaimsRate<=1.3039270713))
48638      and ( CustomerMonetaryValue eq . or (-250.93<=CustomerMonetaryValue) and (CustomerMonetaryValue<=1143.11))
48639      and ( IMP_GrossMonthlySalary eq . or (853<=IMP_GrossMonthlySalary) and (IMP_GrossMonthlySalary<=9085))
48640      and ( IMP_PremiumsinLOBHealth eq . or (24.45<=IMP_PremiumsinLOBHealth) and (IMP_PremiumsinLOBHealth<=365.07))
48641      and ( IMP_PremiumsinLOBMotor eq . or (18.78<=IMP_PremiumsinLOBMotor) and (IMP_PremiumsinLOBMotor<=559.44))
48642      and ( IMP_PremiumsinLOBWorkComp eq . or (-11<=IMP_PremiumsinLOBWorkComp) and (IMP_PremiumsinLOBWorkComp<=254.38))
48643      and ( PremiumsinLOBHousehold eq . or (-70<=PremiumsinLOBHousehold) and (PremiumsinLOBHousehold<=1194.1))
48644      and ( TOTAL_PREMIUM eq . or (514.67<=TOTAL_PREMIUM) and (TOTAL_PREMIUM<=1568.31))
48645      then do;
MPRINT(EM_DIAGRAM):   if ( ClaimsRate eq . or (0<=ClaimsRate) and (ClaimsRate<=1.3039270713)) and ( CustomerMonetaryValue eq . or (-250.93<=CustomerMonetaryValue) and (CustomerMonetaryValue<=1143.11)) and ( IMP_GrossMonthlySalary eq . or
(853<=IMP_GrossMonthlySalary) and (IMP_GrossMonthlySalary<=9085)) and ( IMP_PremiumsinLOBHealth eq . or (24.45<=IMP_PremiumsinLOBHealth) and (IMP_PremiumsinLOBHealth<=365.07)) and ( IMP_PremiumsinLOBMotor eq . or (18.78<=IMP_PremiumsinLOBMotor) and
(IMP_PremiumsinLOBMotor<=559.44)) and ( IMP_PremiumsinLOBWorkComp eq . or (-11<=IMP_PremiumsinLOBWorkComp) and (IMP_PremiumsinLOBWorkComp<=254.38)) and ( PremiumsinLOBHousehold eq . or (-70<=PremiumsinLOBHousehold) and (PremiumsinLOBHousehold<=1194.1))
and ( TOTAL_PREMIUM eq . or (514.67<=TOTAL_PREMIUM) and (TOTAL_PREMIUM<=1568.31)) then do;
48646      if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
48647      else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
48648      end;
MPRINT(EM_DIAGRAM):   end;
48649      else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
48650      label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
48651      if M_FILTER = 1;
MPRINT(EM_DIAGRAM):   if M_FILTER = 1;
48652      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.DATA_EXCLUDED.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.10 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * createcountreport;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpnobs from EMWS1.Trans_TRAIN;
NOTE: Variable IMP_FirstPolicyYear is uninitialized.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      10296 at 128408:24
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.14 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpnobs from WORK.DATA_FILTERED;
NOTE: Variable IMP_FirstPolicyYear is uninitialized.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      10296 at 128408:24
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View WORK.DATA_FILTERED.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.18 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
MPRINT(EM_DIAGRAM):   quit;
48653      data WORK.FilterCOUNT;
MPRINT(EM_DIAGRAM):    data WORK.FilterCOUNT;
48654      length DATAROLE $16;
MPRINT(EM_DIAGRAM):   length DATAROLE $16;
48655      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel, NOQUOTE))" FILTERED = "%sysfunc(sasmsg(sashelp.dmine, rpt_filtered_vlabel, NOQUOTE))" EXCLUDED = "%sysfunc(sasmsg(sashelp.dmine, rpt_excluded_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" FILTERED = "Filtered" EXCLUDED = "Excluded";
48656      DATAROLE = 'TRAIN';
MPRINT(EM_DIAGRAM):   DATAROLE = 'TRAIN';
48657      DATA = 10296;
MPRINT(EM_DIAGRAM):   DATA = 10296;
48658      FILTERED = 9787;
MPRINT(EM_DIAGRAM):   FILTERED = 9787;
48659      EXCLUDED = 509;
MPRINT(EM_DIAGRAM):   EXCLUDED = 509;
48660      output;
MPRINT(EM_DIAGRAM):   output;
48661      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.FILTERCOUNT has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48662      proc print data=WORK.FilterCOUNT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.FilterCOUNT noobs label;
48663      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
48664      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_numberobs_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Number Of Observations";
MPRINT(EM_DIAGRAM):   run;
48665      run;
 
NOTE: There were 1 observations read from the data set WORK.FILTERCOUNT.
NOTE: The PROCEDURE PRINT printed page 14.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48666      title9;
MPRINT(EM_DIAGRAM):   title9;
48667      title10;
MPRINT(EM_DIAGRAM):   title10;
48668      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
48669      * createstattable;
MPRINT(EM_DIAGRAM):   * createstattable;
48670      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48671      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
48672      * Filter: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * Filter: DMDBClass Macro ;
48673      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
48674      %macro DMDBClass;
48675
48676      %mend DMDBClass;
48677      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
48678      * Filter: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Filter: DMDBVar Macro ;
48679      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
48680      %macro DMDBVar;
48681          ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary
48682         IMP_PremiumsinLOBHealth IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp
48683         PremiumsinLOBHousehold TOTAL_PREMIUM
48684      %mend DMDBVar;
48685      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48686      * Filter: Create DMDB;
MPRINT(EM_DIAGRAM):   * Filter: Create DMDB;
48687      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48688      proc dmdb batch data=WORK.DATA_FILTERED
48689      dmdbcat=WORK.Filter_DMDB
48690      varout=WORK.FILTER_VARSTATS
48691      maxlevel = 513
48692      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.DATA_FILTERED dmdbcat=WORK.Filter_DMDB varout=WORK.FILTER_VARSTATS maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   var
48693      var %DMDBVar;
MPRINT(DMDBVAR):   ClaimsRate CustomerMonetaryValue IMP_GrossMonthlySalary IMP_PremiumsinLOBHealth IMP_PremiumsinLOBMotor IMP_PremiumsinLOBWorkComp PremiumsinLOBHousehold TOTAL_PREMIUM
MPRINT(EM_DIAGRAM):  ;
48694      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable IMP_FirstPolicyYear is uninitialized.
NOTE: Records processed = 9787   Memory used = 511K.
NOTE: There were 10296 observations read from the data set INSPROJF.A2ZINSURANCE.
NOTE: There were 10296 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 10296 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      10296 at 128408:24
NOTE: There were 10296 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View WORK.DATA_FILTERED.VIEW used (Total process time):
      real time           0.19 seconds
      cpu time            0.17 seconds
 
NOTE: There were 10296 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 9787 observations read from the data set WORK.DATA_FILTERED.
NOTE: The data set WORK.FILTER_VARSTATS has 8 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.21 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
48695      quit;
48696      *--- end code ---*;
 
48697      data WORK.FILTER_VARSTATS;
MPRINT(EM_DIAGRAM):    data WORK.FILTER_VARSTATS;
48698      length DATAROLE $10 TYPE $8 NAME $32;
MPRINT(EM_DIAGRAM):   length DATAROLE $10 TYPE $8 NAME $32;
48699      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
48700      label N = "%sysfunc(sasmsg(sashelp.dmine, rpt_nonMiss_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label N = "Non Missing";
48701      label NMISS = "%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NMISS = "Missing";
48702      label MIN = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label MIN = "Minimum";
48703      label MAX = "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label MAX = "Maximum";
48704      label MEAN = "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label MEAN = "Mean";
48705      label STD = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label STD = "Standard Deviation";
48706      label SKEWNESS = "%sysfunc(sasmsg(sashelp.dmine, rpt_skewness_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label SKEWNESS = "Skewness";
48707      label KURTOSIS = "%sysfunc(sasmsg(sashelp.dmine, rpt_kurtosis_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label KURTOSIS = "Kurtosis";
48708      label NUMCAT = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NUMCAT = "Number of Levels";
48709      retain DATAROLE "TRAIN" type "FILTERED";
MPRINT(EM_DIAGRAM):   retain DATAROLE "TRAIN" type "FILTERED";
48710      set WORK.FILTER_VARSTATS;
MPRINT(EM_DIAGRAM):   set WORK.FILTER_VARSTATS;
48711      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable NUMCAT is uninitialized.
NOTE: There were 8 observations read from the data set WORK.FILTER_VARSTATS.
NOTE: The data set WORK.FILTER_VARSTATS has 8 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
48712      proc append base=EMWS1.Filter_STATS data=WORK.FILTER_VARSTATS;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Filter_STATS data=WORK.FILTER_VARSTATS;
48713      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.FILTER_VARSTATS to EMWS1.FILTER_STATS.
NOTE: There were 8 observations read from the data set WORK.FILTER_VARSTATS.
NOTE: 8 observations added.
NOTE: The data set EMWS1.FILTER_STATS has 16 observations and 11 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48714      proc sort data=EMWS1.Filter_STATS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Filter_STATS;
48715      by DATAROLE NAME;
MPRINT(EM_DIAGRAM):   by DATAROLE NAME;
48716      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS1.FILTER_STATS.
NOTE: The data set EMWS1.FILTER_STATS has 16 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
48717      proc transpose data=EMWS1.Filter_STATS out=EMWS1.Filter_STATS(rename=(NAME=VARIABLE _LABEL_=STATISTIC));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Filter_STATS out=EMWS1.Filter_STATS(rename=(NAME=VARIABLE _LABEL_=STATISTIC));
48718      by DATAROLE NAME;
MPRINT(EM_DIAGRAM):   by DATAROLE NAME;
48719      id TYPE;
MPRINT(EM_DIAGRAM):   id TYPE;
48720      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS1.FILTER_STATS.
NOTE: The data set EMWS1.FILTER_STATS has 64 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
48721      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):   proc datasets library=EMWS1 nolist;
48722      modify Filter_STATS;
MPRINT(EM_DIAGRAM):   modify Filter_STATS;
48723      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" STATISTIC = "%sysfunc(sasmsg(sashelp.dmine, rpt_statistics_vlabel, NOQUOTE))" FILTERED="Filtered" ORIGINAL = "%sysfunc(sasmsg(sashelp.dmine, rpt_original_vlabel,
48723    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Variable" STATISTIC = "Statistics" FILTERED= "Filtered" ORIGINAL = "Original";
MPRINT(EM_DIAGRAM):   run;
48724      run;
 
NOTE: MODIFY was successful for EMWS1.FILTER_STATS.DATA.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48725      proc sort data=EMWS1.Filter_STATS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Filter_STATS;
48726      by DATAROLE VARIABLE;
MPRINT(EM_DIAGRAM):   by DATAROLE VARIABLE;
48727      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 64 observations read from the data set EMWS1.FILTER_STATS.
NOTE: The data set EMWS1.FILTER_STATS has 64 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
48728      %let _cn = %sysfunc(getoption(CENTER));
48729      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
48730      proc print data=EMWS1.Filter_STATS(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Filter_STATS(obs=500) noobs label;
48731      var STATISTIC ORIGINAL
48732      FILTERED
48733      ;
MPRINT(EM_DIAGRAM):   var STATISTIC ORIGINAL FILTERED ;
48734      by DATAROLE VARIABLE;
MPRINT(EM_DIAGRAM):   by DATAROLE VARIABLE;
48735      where ORIGINAL ne .;
MPRINT(EM_DIAGRAM):   where ORIGINAL ne .;
48736      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_filterstat_title,    NOQUOTE, FILTERED))";
MPRINT(EM_DIAGRAM):   title9 "Statistics for Original and FILTERED Data";
48737      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   run;
48738      run;
 
NOTE: There were 64 observations read from the data set EMWS1.FILTER_STATS.
      WHERE ORIGINAL not = .;
NOTE: The PROCEDURE PRINT printed page 15.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48739      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
48740      title9;
MPRINT(EM_DIAGRAM):   title9;
48741      title10;
MPRINT(EM_DIAGRAM):   title10;
48742      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
48743      * createhistogramtable;
MPRINT(EM_DIAGRAM):   * createhistogramtable;
48744      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48745      data WORK.FilterDMDBC;
MPRINT(EM_DIAGRAM):   data WORK.FilterDMDBC;
48746      set WORK.FilterDMDBC(where=(report='Y'));
MPRINT(EM_DIAGRAM):   set WORK.FilterDMDBC(where=(report='Y'));
48747      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK.FILTERDMDBC.
      WHERE report='Y';
NOTE: The data set WORK.FILTERDMDBC has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48748      filename vdist catalog 'SASHELP.EMUTIL.EM_VARDIST.SOURCE';
MPRINT(EM_DIAGRAM):    filename vdist catalog 'SASHELP.EMUTIL.EM_VARDIST.SOURCE';
48749      %inc vdist;
NOTE: %INCLUDE (level 1) file VDIST is file SASHELP.EMUTIL.EM_VARDIST.SOURCE.
48750     +%macro var_profile(DATA=, OUTPUT=_INTERVAL, VARS=, METADATA=, COMPUTESTAT=Y, STAT=_STAT, PCTLSTAT=_PCTLSTAT, FREQ=,
48751     +                   BINDATA=, BIN=Y, NUMBARS=8, MINMAX=N);
48752     +   %let _em_nodeid = EM;
48753     +   %if %symexist(EM_NODEID) %then %do;
48754     +       %let _em_nodeid = &em_nodeid;
48755     +   %end;
48757     +   %let msgString = %sysfunc(sasmsg(sashelp.dmine, computingsummarystats_note, NOQUOTE, &_em_nodeid));
48758     +   %put &EM_CODEBAR;
48759     +   %put * &msgString;
48760     +   %put &EM_CODEBAR;
48762     +   /* Process metadata data set */
48763     +   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
48764     +   %if %sysfunc(exist(&metadata))>0 and (&metadata ne ) %then %do;
48765     +       %let FREQ=;
48766     +       %let _nobs=0;
48767     +       data _null;
48768     +          set &metadata(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
48769     +          if eof then call symput('_nobs', put(_N_, best.));
48770     +       run;
48771     +       %if "&_nobs" ne "0" %then %do;
48772     +           data _null_;
48773     +              file _mac;
48774     +              length _VARS $80; retain _vars;
48775     +              if _n_ =1 then put '%macro _vars;';
48776     +              set &metadata end=eof;
48777     +              where LEVEL = 'INTERVAL' or ROLE='FREQ';
48778     +              if ROLE='FREQ' then call symput('FREQ', trim(NAME));
48779     +              else do;
48780     +                 if length(strip(_vars)) + length(strip(NAME)) + 1 <80  then
48781     +                    _vars = strip(_vars)!! ' ' !!strip(NAME);
48782     +                 else do;
48783     +                    put _Vars;
48784     +                    _vars = strip(NAME);
48785     +                 end;
48786     +              end;
48788     +              if eof then do;
48789     +                 put _Vars;
48790     +                 put '%mend _vars;';
48791     +              end;
48792     +           run;
48793     +       %end;
48794     +       %else %do;
48795     +           data _null_;
48796     +              file _mac;
48797     +              put '%macro _vars;';
48798     +              put '%mend _vars;';
48799     +           run;
48800     +       %end;
48801     +   %end;
48802     +   %else %do;
48803     +       data _null_;
48804     +          file _mac;
48805     +          put '%macro _vars;';
48806     +          put '%mend _vars;';
48807     +       run;
48808     +   %end;
48809     +   %inc _mac;
48810     +   filename _mac;
48812     +   %if "&VARS" eq "" and %_vars eq %then %goto doend;
48814     +   /* Check if FREQ variable is in the data set */
48815     +   %if &freq ne %then %do;
48816     +       data _null_;
48817     +          dsid = open("&data");
48818     +          if dsid>0 then do;
48819     +               if varnum(dsid, "&FREQ")<1 then
48820     +                  call symput('FREQ', '');
48821     +               dsid = close(dsid);
48822     +          end;
48823     +       run;
48824     +   %end;
48826     +   %if &bindata eq %then %do;
48827     +       %let bindata = _BOUNDS;
48828     +       proc datasets lib=work nolist mt=(DATA VIEW);
48829     +          delete _BOUNDS;
48830     +       run;
48831     +   %end;
48833     +   %global _EM_VARDISTOBS_MAX;
48834     +   %let _EM_VARDISTOBS_MAX = 1000000;
48836     +   %if %symexist(EM_VARDISTOBS_MAX) %then %do;
48837     +       %let _EM_VARDISTOBS_MAX= %eval(&EM_VARDISTOBS_MAX);
48838     +   %end;
48840     +   %if &computeStat = Y %then %do;
48841     +       proc dmdb data=&DATA(obs=&_EM_VARDISTOBS_MAX) varout=&STAT(rename=(NAME=VARIABLE));
48842     +          var %_Vars &vars;
48843     +          %if &FREQ ne %then %do;
48844     +              freq &FREQ;
48845     +          %end;
48846     +       run;
48847     +       proc sort data=&stat;
48848     +          by VARIABLE;
48849     +       run;
48851     +       %if ^%sysfunc(indexc(&STAT, .)) %then %do;
48852     +           %let _library = WORK;
48853     +           %let _member  = &STAT;
48854     +      %end;
48855     +      %else %do;
48856     +          %let _library = %scan(&STAT, 1, .);
48857     +          %let _member  = %scan(&STAT, 2, .);
48858     +      %end;
48860     +      proc datasets library=&_library nolist;
48861     +         modify &_member;
48862     +         label NMISS    = "%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))";
48863     +         label MIN      = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
48864     +         label MAX      = "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
48865     +         label MEAN     = "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel,    NOQUOTE))";
48866     +         label STD      = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel,     NOQUOTE))";
48867     +         label SKEWNESS = "%sysfunc(sasmsg(sashelp.dmine, rpt_skewness_vlabel, NOQUOTE))";
48868     +         label KURTOSIS = "%sysfunc(sasmsg(sashelp.dmine, rpt_kurtosis_vlabel, NOQUOTE))";
48869     +      run;
48870     +      quit;
48871     +   %end;
48873     +   %if &BIN ne N %then %do;
48874     +       %if %sysfunc(exist(&bindata))<1 %then %do;
48875     +           %let msgString = %sysfunc(sasmsg(sashelp.dmine, computingmidpoints_note, NOQUOTE, &_em_nodeid));
48876     +           %put &EM_CODEBAR;
48877     +           %put * &msgString;
48878     +           %put &EM_CODEBAR;
48879     +           filename fref catalog 'work.em.profileformat.source';
48881     +            %let _maxlevel = %eval(&numbars + 1);
48882     +            proc dmdb data=&data(obs=&_EM_VARDISTOBS_MAX) classout=_CLASSOUT maxlevel=&_maxlevel;
48883     +               class %_vars &vars;
48884     +            run;
48885     +            proc freq data=_CLASSOUT ORDER=DATA noprint;
48886     +               table NAME / OUT = _COUNT(where=(COUNT<&_maxlevel));
48887     +            run;
48888     +           proc sort data=_COUNT(keep=NAME COUNT rename=(COUNT=_NUMCLASSBINS_));
48889     +              by NAME;
48890     +           run;
48891     +           proc sort data=_CLASSOUT;
48892     +              by NAME;
48893     +          run;
48894     +          proc transpose data=_CLASSOUT out=_DISCRETEMID(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
48895     +             var NRAW;
48896     +             by NAME;
48897     +          run;
48898     +          proc delete data=WORK._CLASSOUT;
48899     +          run;
48900     +          data _null_;
48901     +             dsid = open('_DISCRETEMID');
48902     +             if dsid then do;
48903     +                call symput('NUMCLASSBARS', left(trim(put(attrn(dsid, 'NVARS')-1, best12.))));
48904     +                dsid = close(dsid);
48905     +             end;
48906     +          run;
48907     +          data _DISCRETEMID;
48908     +             merge _DISCRETEMID _COUNT(in=_b rename=(NAME=VARIABLE));
48909     +             keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars _NUMCLASSBINS_;
48910     +             by VARIABLE;
48911     +             if _b then output;
48912     +          run;
48914     +          data _EMVARDIST / view=_EMVARDIST;
48915     +             set &DATA(keep=%_VARS &vars &FREQ  obs=&_EM_VARDISTOBS_MAX);
48916     +          run;
48917     +          proc stdize data=_EMVARDIST outstat=&pctlstat  out=_null_ pctlpts=(0 5 25 50 75 95 100);
48918     +             var %_vars &vars;
48919     +             %if &FREQ ne %then %do;
48920     +                 freq &FREQ / notrunc;
48921     +             %end;
48922     +          run;
48923     +          proc datasets lib=WORK NOLIST;
48924     +             delete _EMVARDIST / mt=view;
48925     +          run;
48926     +          quit;
48927     +          %if %upcase(&minmax) = Y %then %do;
48928     +              proc transpose data=&pctlstat out=_MINMAXDATA(rename=(_NAME_=VARIABLE COL1=MIN COL2=MAX));
48929     +                 where  _type_ in('P0', 'P100');
48930     +              run;
48931     +              data _MINMAXDATA(keep=Variable Value Pos);
48932     +                 set _MINMAXDATA;
48933     +                 label VARIABLE  = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
48934     +                 Value = min; Pos=1; output;
48935     +                 Value = max; Pos=3; output;
48936     +              run;
48937     +          %end;
48938     +          proc transpose data=&pctlstat out=&bindata(rename=(_NAME_=VARIABLE COL1=MIN COL2=P5
48939     +                                                             COL3=P95 COL4=MAX));
48940     +             where  _type_ in('P0', 'P5', 'P95', 'P100');
48941     +          run;
48942     +          proc sort data=&bindata;
48943     +             by VARIABLE;
48944     +          run;
48946     +          %let new_numbars=%eval(&NUMBARS+12);
48947     +          data &bindata;
48948     +             set &bindata;
48949     +             length Format $12;
48950     +             array _midpoint{&new_NUMBARS};
48951     +             array _bounds{&new_NUMBARS};
48952     +             if (max - min)>1e-10 then do;
48953     +                step = abs(P95-P5)/&NUMBARS;
48954     +                lstep = abs(p5- min)/5;
48955     +                ustep = abs(max-p95)/5;
48956     +                /* No outlying values */;
48957     +                if lstep<=step and ustep<=step then do;
48958     +                   step = abs(MIN-MAX)/&NUMBARS;
48959     +                   START=MIN;
48960     +                   do i=1 to &numbars;
48961     +                      _bounds(i)   = MIN + i*step;      if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
48962     +                      _midpoint(i) = MIN+ (i-0.5)*step; if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
48963     +                   end;
48964     +                   %let new_numbars = &numbars;
48965     +                end;
48966     +                else do;
48967     +                   if lstep<=step then do;
48968     +                      step = abs(MIN-P95)/&NUMBARS;
48969     +                      /* Start Histogram at MIN value */
48970     +                      do i=1 to &NUMBARS;
48971     +                         _bounds(i)   = MIN + i*step;       if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
48972     +                         _midpoint(i) = MIN+ (i-0.5)*step;  if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
48973     +                      end;
48974     +                      /* Make BINS with upper outliers width */
48975     +                      do i=1 to 5;
48976     +                         numbars = &numbars + i;
48977     +                         _bounds(numbars)   = P95 + i*ustep;  if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
48978     +                         _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;  if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
48979     +                      end;
48980     +                       %let new_numbars = %eval(&numbars+5);
48981     +                   end;
48982     +                   else do;
48983     +                      /* Make BINS with lower outliers width */
48984     +                      do i=1 to 5;
48985     +                         _bounds(i)   = P5 - (5-i)*lstep; if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
48986     +                         _midpoint(i) = P5 - (5 - i + 0.5)*lstep - abs(lstep-step)/2; if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
48987     +                      end;
48988     +                      if ustep<= step then do;
48989     +                         step = abs(P5-MAX)/&NUMBARS;
48990     +                         /* End Histogram at MAX value */
48991     +                         do i=1 to &NUMBARS;
48992     +                            numbars = i+5;
48993     +                            _bounds(numbars)   = P5 + i*step; if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
48994     +                            _midpoint(numbars) = P5 + (i-0.5)*step; if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
48995     +                         end;
48996     +                          %let new_numbars = %eval(&numbars+5);
48997     +                      end;
48998     +                      else do;
48999     +                         do i=1 to &NUMBARS;
49000     +                            numbars = i+5;
49001     +                            _bounds(numbars)  = P5 + i*step; if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
49002     +                            _midpoint(numbars) = P5 + (i-0.5)*step; if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
49003     +                         end;
49004     +                         /* Make BINS with upper outliers width */
49005     +                         do i=1 to 5;
49006     +                            numbars = &numbars+5+i;
49007     +                            _bounds(numbars)   = P95 + i*ustep; if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
49008     +                            _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
49009     +                         end;
49010     +                         %let new_numbars = %eval(&numbars+10);
49011     +                      end;
49012     +                   end;
49013     +                end;
49014     +             end;
49015     +             else do;
49016     +                _bounds(1)   = MIN;
49017     +                _midpoint(1) = MIN;
49018     +             end;
49019     +             Format = 'F'!!trim(left(put(_n_,6.)))!!'_';
49020     +          run;
49021     +          %if %sysfunc(exist(_DISCRETEMID)) %then %do;
49022     +              data &bindata;
49023     +                 merge &bindata _DISCRETEMID(in = _b);
49024     +                 by VARIABLE;
49025     +                 if _b then _DISCRETE=1;
49026     +                 else _DISCRETE=0;
49027     +              run;
49028     +          %end;
49030     +          data _null_;
49031     +             file fref;
49032     +             set &bindata end=eof;
49033     +             array _bounds{&NEW_NUMBARS};
49034     +             array _midpoint{&NEW_NUMBARS};
49035     +             if _n_=1 then
49036     +                put 'proc format;';
49038     +             put 'value ' Format;
49039     +             if _DISCRETE then do;
49040     +                 do i=1 to &numbars;
49041     +                    _MID = _midpoint{i};
49042     +                    if _MID ne . and i<= _NUMCLASSBINS_ then
49043     +                       put _MID '="' _MID '"';
49044     +                 end;
49045     +                 put ';';
49046     +             end;
49047     +             else do;
49048     +                if min eq max then do;
49049     +                   put 'low - high ="' MIN '";';
49050     +                end;
49051     +                else do;
49052     +                   _LB  = MIN;
49053     +                   _MID = _midpoint{1};
49054     +                   _UB  = _bounds{1};
49055     +                   put 'LOW -' _UB '="' _MID '"';
49057     +                   do i=1 to &NEW_NUMBARS-1;
49058     +                      _LB  = _bounds{i};
49059     +                      j=i+1;
49060     +                      _MID = _midpoint{j};
49061     +                      _UB  = _bounds{j};
49062     +                      if (_UB ne .) and (_LB ne _UB) then do;
49063     +                         if _UB>=MAX then
49064     +                            put _LB '-HIGH="' _MID '"';
49065     +                         else
49066     +                            put _LB '-' _UB '="' _MID '"';
49067     +                      end;
49068     +                   end;
49069     +                end;
49070     +             end;
49071     +             put ';';
49072     +             if eof then put 'run;';
49073     +          run;
49075     +          %inc fref;
49077     +          filename fref;
49078     +      %end;
49080     +      data _binneddata / view=_binneddata;
49081     +         set &DATA(obs=&_EM_VARDISTOBS_MAX);
49083     +         %let dsid    =%sysfunc(open(&bindata));
49084     +         %let namenum = %sysfunc(varnum(&dsid, VARIABLE));
49085     +         %let fmtnum  = %sysfunc(varnum(&dsid, FORMAT));
49086     +         %let obs = %sysfunc(fetch(&dsid));
49088     +         %if (&obs=0) %then %do;
49089     +             format
49090     +         %end;
49092     +         %let _count = 0;
49093     +         %do %while(&obs=0);
49094     +             %let _count = %eval(&_count +1);
49095     +             %let _name = %sysfunc(getvarc(&dsid, &namenum));
49096     +             %let _fmtname = %sysfunc(getvarc(&dsid, &fmtnum));
49097     +             %do;
49098     +                &_name &_fmtname..
49099     +             %end;
49100     +             %let obs = %sysfunc(fetch(&dsid));
49101     +         %end;
49102     +         %let dsid=%sysfunc(close(&dsid));
49103     +         ;
49104     +      run;
49105     +   %end;
49107     +    %if &bin ne N %then %do;
49108     +        proc dmdb data=_binneddata(obs=&_EM_VARDISTOBS_MAX) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
49109     +    %end;
49110     +    %else %do;
49111     +        proc dmdb data = &data(obs=&_EM_VARDISTOBS_MAX) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
49112     +    %end;
49113     +      class %_vars &vars;
49114     +      %if &FREQ ne %then %do;
49115     +          freq &FREQ;
49116     +      %end;
49117     +   run;
49118     +   data &output;
49119     +      label VALUE        = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
49120     +      label VARIABLE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
49121     +      label COUNT        = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,    NOQUOTE))";
49122     +      label PERCENT      = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))";
49123     +      set _temptab;
49124     +      format VALUE 12.3 count;
49125     +      value = inputn(level, 'best12.');
49126     +      keep VARIABLE COUNT PERCENT VALUE;
49127     +   run;
49128     +   %if &BIN ne N and %sysfunc(exist(_MINMAXDATA)) and &minmax=Y %then %do;
49129     +       data &output;
49130     +          set &output(in=_a) _MINMAXDATA;
49131     +          if _a then Pos=2;
49132     +       run;
49133     +       proc sort data=&output out=&output(drop=pos);
49134     +          by VARIABLE POS VALUE;
49135     +          where VALUE ne .;
49136     +       run;
49137     +   %end;
49138     +   proc datasets lib=work nolist mt=(DATA VIEW);
49139     +      delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
49140     +   run;
49141     +   quit;
49143     +   %doend:
49144     +%mend var_profile;
NOTE: %INCLUDE (level 1) ending.
49145      filename vdist;
MPRINT(EM_DIAGRAM):   filename vdist;
NOTE: Fileref VDIST has been deassigned.
49146      %let em_nodeid = Filter;
49147      %var_profile(DATA=EMWS1.Trans_TRAIN, OUTPUT=WORK._HISTDATA, METADATA=WORK.FilterDMDBC, COMPUTESTAT=N, BINDATA=_bindata, STAT=_STAT, FREQ=, BIN=Y, NUMBARS= 16);
*------------------------------------------------------------*
* Filter: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null;
MPRINT(VAR_PROFILE):   set WORK.FilterDMDBC(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(VAR_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 0 observations read from the data set WORK.FILTERDMDBC.
      WHERE (LEVEL='INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Wednesday, December 30, 2015 03:20:24 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:24 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
49148     +%macro _vars;
49149     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(EM_DIAGRAM):  ;
 
49150      %var_profile(DATA=WORK.DATA_FILTERED, OUTPUT=WORK._HISTDATA, METADATA=WORK.FilterDMDBC, COMPUTESTAT=N, STAT=_STAT, BIN=Y, BINDATA=_bindata, NUMBARS= 16);
MPRINT(EM_DIAGRAM):
*------------------------------------------------------------*
* Filter: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null;
MPRINT(VAR_PROFILE):   set WORK.FilterDMDBC(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(VAR_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 0 observations read from the data set WORK.FILTERDMDBC.
      WHERE (LEVEL='INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   put '%macro _vars;';
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Wednesday, December 30, 2015 03:20:24 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:30 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
49151     +%macro _vars;
49152     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(EM_DIAGRAM):  ;
 
49153      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
49154      * Filter: Creating Bar Chart Table;
MPRINT(EM_DIAGRAM):   * Filter: Creating Bar Chart Table;
49155      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
49156      filename cdist catalog 'SASHELP.EMUTIL.EM_CLASSDIST.SOURCE';
MPRINT(EM_DIAGRAM):   filename cdist catalog 'SASHELP.EMUTIL.EM_CLASSDIST.SOURCE';
49157      %inc cdist;
NOTE: %INCLUDE (level 1) file CDIST is file SASHELP.EMUTIL.EM_CLASSDIST.SOURCE.
49158     +%macro class_profile(DATA=, OUTPUT=_CLASS, VARS=, METADATA=, WHERE=, STAT=_STAT, FREQ=);
49159     +   %if %INDEX(&EM_DEBUG, LOG SOURCE) %then %do;
49160     +       %put *** Statistics for Class variables ***;
49161     +       %put >>> DATA= &data  OUTPUT= &output;
49162     +       %put >>> VAR= &vars;
49163     +       %put >>> WHERE=  &where;
49164     +       %put >>> FREQ=  &freq;
49165     +   %end;
49167     +      /* Process metadata data set */
49168     +   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
49169     +   %if %sysfunc(exist(&metadata))>0 and ("&metadata" ne "") %then %do;
49170     +       %let FREQ=;
49171     +       %let _nobs=0;
49172     +       data _null;
49173     +          set &metadata(where=(LEVEL ne 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
49174     +          if eof then call symput('_nobs', put(_N_, best.));
49175     +       run;
49176     +       %if "&_nobs" ne "0" %then %do;
49177     +           data _null_;
49178     +              file _mac;
49179     +              length _VARS $80; retain _vars;
49180     +              if _n_ =1 then put '%macro _vars;';
49181     +              set &metadata end=eof;
49182     +              where LEVEL ne 'INTERVAL' or ROLE='FREQ';
49183     +              if ROLE='FREQ' then call symput('FREQ', NAME);
49184     +              else do;
49185     +                 if length(strip(_vars)) + length(strip(NAME)) + 1 <80  then
49186     +                    _vars = strip(_vars)!! ' ' !!strip(NAME);
49187     +                 else do;
49188     +                    put _Vars;
49189     +                    _vars = strip(NAME);
49190     +                 end;
49191     +              end;
49192     +              if eof then do;
49193     +                 put _Vars;
49194     +                 put '%mend _vars;';
49195     +              end;
49196     +           run;
49197     +       %end;
49198     +       %else %do;
49199     +           data _null_;
49200     +              file _mac;
49201     +              put '%macro _vars;';
49202     +              put '%mend _vars;';
49203     +           run;
49204     +       %end;
49205     +   %end;
49206     +   %else %do;
49207     +       data _null_;
49208     +          file _mac;
49209     +          put '%macro _vars;';
49210     +          put '%mend _vars;';
49211     +       run;
49212     +   %end;
49213     +   %inc _mac;
49214     +   filename _mac;
49216     +   %if "&VARS" eq "" and %_vars eq %then %goto doend;
49218     +   /* Check if FREQ variable is in the data set */
49219     +   %if &freq ne %then %do;
49220     +       data _null_;
49221     +          dsid = open("&data");
49222     +          if dsid>0 then do;
49223     +               if varnum(dsid, "&FREQ")<1 then
49224     +                  call symput('FREQ', '');
49225     +               dsid = close(dsid);
49226     +          end;
49227     +       run;
49228     +   %end;
49230     +   proc dmdb data=&DATA  nonorm classout=_tempclass(rename=(NAME=VARIABLE LEVEL=VALUE FREQUENCY=COUNT FREQPERCENT=PERCENT));
49231     +      class %_Vars &vars;
49232     +      %if &FREQ ne %then %do;
49233     +          freq &FREQ;
49234     +      %end;
49235     +      %if %bquote(&WHERE) ne %then %do;
49236     +            where &WHERE;
49237     +      %end;
49238     +   run;
49239     +   proc sort data=_tempclass;
49240     +      by VARIABLE;
49241     +   run;
49242     +   data &output;
49243     +      label VARIABLE     = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
49244     +      label VALUE        = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
49245     +      label COUNT        = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,    NOQUOTE))";
49246     +      label PERCENT      = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,  NOQUOTE))";
49247     +      set _tempclass;
49248     +      format COUNT;
49249     +      keep VARIABLE COUNT PERCENT VALUE;
49250     +   run;
49251     +   proc means data=&output noprint;
49252     +      class VARIABLE;
49253     +      var COUNT;
49254     +      output out=&STAT N=NUMCAT;
49255     +   run;
49256     +   data &STAT;
49257     +      set &STAT;
49258     +      where _TYPE_=1;
49259     +      KEEP VARIABLE NUMCAT;
49260     +      label NUMCAT   = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel,   NOQUOTE))";
49261     +      format NUMCAT 8.;
49262     +   run;
49263     +   proc datasets lib=work nolist;
49264     +      delete _tempclass;
49265     +   run;
49266     +   quit;
49268     +   %doend:
49269     +%mend class_profile;
NOTE: %INCLUDE (level 1) ending.
49271      filename cdist;
MPRINT(EM_DIAGRAM):   filename cdist;
NOTE: Fileref CDIST has been deassigned.
49272      %let em_nodeid = Filter;
49273      %class_profile(DATA=EMWS1.Trans_TRAIN, OUTPUT=WORK._BARDATA, METADATA=WORK.FilterDMDBC, STAT=_STAT);
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null;
MPRINT(CLASS_PROFILE):   set WORK.FilterDMDBC(where=(LEVEL ne 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(CLASS_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 0 observations read from the data set WORK.FILTERDMDBC.
      WHERE (LEVEL not = 'INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   put '%macro _vars;';
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Wednesday, December 30, 2015 03:20:24 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:30 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
49274     +%macro _vars;
49275     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(EM_DIAGRAM):  ;
 
49276      %class_profile(DATA=WORK.DATA_FILTERED, OUTPUT=WORK._BARDATA, METADATA=WORK.FilterDMDBC, STAT=_STAT);
MPRINT(EM_DIAGRAM):
MPRINT(CLASS_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(CLASS_PROFILE):   data _null;
MPRINT(CLASS_PROFILE):   set WORK.FilterDMDBC(where=(LEVEL ne 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(CLASS_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(CLASS_PROFILE):   run;
 
NOTE: There were 0 observations read from the data set WORK.FILTERDMDBC.
      WHERE (LEVEL not = 'INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 0 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CLASS_PROFILE):   data _null_;
MPRINT(CLASS_PROFILE):   file _mac;
MPRINT(CLASS_PROFILE):   put '%macro _vars;';
MPRINT(CLASS_PROFILE):   put '%mend _vars;';
MPRINT(CLASS_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Wednesday, December 30, 2015 03:20:24 PM,
      Last Modified=Wednesday, December 30, 2015 03:20:30 PM,
      Filename=C:\Users\D059331\AppData\Local\Temp\SAS Temporary Files\_TD15844_WDFN33788459A_\Prc2\macros.sas7bcat,
      Release Created=9.0301M2,Host Created=X64_8PRO
 
NOTE: 2 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 13.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
49277     +%macro _vars;
49278     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(CLASS_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(EM_DIAGRAM):  ;
 
49279      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
49280      * Filter: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Filter: Computing metadata for TRAIN data;
49281      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.FILTER_TRAIN.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.14 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Filter_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Filter_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Filter_TRAIN out=WORK.M2Z38_SL noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Z38_SL;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z38_SL(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Z38_SL;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z38_SL;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3D9RY9Q NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3D9RY9Q;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3D9RY9Q;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3S9X9XO(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3D9RY9Q;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3D9RY9Q;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3D9RY9Q;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3D9RY9Q;
MPRINT(EMADVISECOLUMNS):   set WORK.M3D9RY9Q;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Filter_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Filter";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Filter: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="M_FILTER" then do;
MPRINT(EM_DIAGRAM):   role ="REJECTED";
MPRINT(EM_DIAGRAM):   level = "BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.FILTER_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.20 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 30, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:20:31" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                December 30, 2015
Time:                15:20:31
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2TMCYH6 "C:\Users\D059331\Desktop\DM_Insurance_segmentation\insurance_segmentation\Workspaces\EMWS1\Filter\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2TMCYH6 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
