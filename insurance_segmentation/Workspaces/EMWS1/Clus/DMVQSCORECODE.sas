*****************************************;
*** Begin Scoring Code from PROC DMVQ ***;
*****************************************;


*** Begin Class Look-up, Standardization, Replacement ;
drop _dm_bad; _dm_bad = 0;

*** Standardize ClaimsRate ;
drop T_ClaimsRate ;
if missing( ClaimsRate ) then T_ClaimsRate = .;
else T_ClaimsRate = (ClaimsRate - 0.67785883165078) * 3.19874181950442;

*** Standardize CustomerMonetaryValue ;
drop T_CustomerMonetaryValue ;
if missing( CustomerMonetaryValue ) then T_CustomerMonetaryValue = .;
else T_CustomerMonetaryValue = (CustomerMonetaryValue
         - 216.174775814523) * 0.00411492618602;

*** Standardize IMP_GrossMonthlySalary ;
drop T_IMP_GrossMonthlySalary ;
if missing( IMP_GrossMonthlySalary ) then T_IMP_GrossMonthlySalary = .;
else T_IMP_GrossMonthlySalary = (IMP_GrossMonthlySalary
         - 5037.91650495352) * 0.00052239907129;

*** Standardize IMP_REP_CustomerAge ;
drop T_IMP_REP_CustomerAge ;
if missing( IMP_REP_CustomerAge ) then T_IMP_REP_CustomerAge = .;
else T_IMP_REP_CustomerAge = (IMP_REP_CustomerAge
         - 48.2995826432697) * 0.05850781974212;

*** Standardize IMP_REP_FirstPolicyYear ;
drop T_IMP_REP_FirstPolicyYear ;
if missing( IMP_REP_FirstPolicyYear ) then T_IMP_REP_FirstPolicyYear = .;
else T_IMP_REP_FirstPolicyYear = (IMP_REP_FirstPolicyYear
         - 1985.99606898641) * 0.15179010233625;

*** Standardize TOTAL_PREMIUM ;
drop T_TOTAL_PREMIUM ;
if missing( TOTAL_PREMIUM ) then T_TOTAL_PREMIUM = .;
else T_TOTAL_PREMIUM = (TOTAL_PREMIUM - 747.789125727714) * 0.00576296047634;

*** Generate dummy variables for IMP_GeographicLiving ;
drop IMP_GeographicLiving1 IMP_GeographicLiving2 IMP_GeographicLiving3 
        IMP_GeographicLiving4 ;
if missing( IMP_GeographicLiving ) then do;
   IMP_GeographicLiving1 = .;
   IMP_GeographicLiving2 = .;
   IMP_GeographicLiving3 = .;
   IMP_GeographicLiving4 = .;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( IMP_GeographicLiving , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '4'  then do;
      IMP_GeographicLiving1 = -0.32410552391225;
      IMP_GeographicLiving2 = -0.16768700644594;
      IMP_GeographicLiving3 = -0.2501308440739;
      IMP_GeographicLiving4 = 0.6087597341956;
   end;
   else if _dm12 = '1'  then do;
      IMP_GeographicLiving1 = 0.77127493332795;
      IMP_GeographicLiving2 = -0.16768700644594;
      IMP_GeographicLiving3 = -0.2501308440739;
      IMP_GeographicLiving4 = -0.41062910751965;
   end;
   else if _dm12 = '3'  then do;
      IMP_GeographicLiving1 = -0.32410552391225;
      IMP_GeographicLiving2 = -0.16768700644594;
      IMP_GeographicLiving3 = 0.9993748162973;
      IMP_GeographicLiving4 = -0.41062910751965;
   end;
   else if _dm12 = '2'  then do;
      IMP_GeographicLiving1 = -0.32410552391225;
      IMP_GeographicLiving2 = 1.49072054922295;
      IMP_GeographicLiving3 = -0.2501308440739;
      IMP_GeographicLiving4 = -0.41062910751965;
   end;
   else do;
      IMP_GeographicLiving1 = .;
      IMP_GeographicLiving2 = .;
      IMP_GeographicLiving3 = .;
      IMP_GeographicLiving4 = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for IMP_HasChildren ;
drop IMP_HasChildren0 IMP_HasChildren1 ;
if missing( IMP_HasChildren ) then do;
   IMP_HasChildren0 = .;
   IMP_HasChildren1 = .;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( IMP_HasChildren , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '1'  then do;
      IMP_HasChildren0 = -0.45375214559081;
      IMP_HasChildren1 = 0.45375214559081;
   end;
   else if _dm12 = '0'  then do;
      IMP_HasChildren0 = 1.10181061963315;
      IMP_HasChildren1 = -1.10181061963315;
   end;
   else do;
      IMP_HasChildren0 = .;
      IMP_HasChildren1 = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for IMP_EducationalDegree ;
drop T_IMP_EducationalDegree ;
if missing( IMP_EducationalDegree ) then do;
   T_IMP_EducationalDegree = .;
end;
else do;
   length _dm15 $ 15; drop _dm15 ;
   _dm15 = put( IMP_EducationalDegree , $CHAR15. );
   %DMNORMIP( _dm15 )
   if _dm15 = '3 - BSC/MSC'  then do;
      T_IMP_EducationalDegree = 0.73634959452922;
   end;
   else if _dm15 = '2 - HIGH SCHOOL'  then do;
      T_IMP_EducationalDegree = -0.80426719652593;
   end;
   else if _dm15 = '1 - BASIC'  then do;
      T_IMP_EducationalDegree = -1.66589982524682;
   end;
   else if _dm15 = '4 - PHD'  then do;
      T_IMP_EducationalDegree = 1.75319504815218;
   end;
   else do;
      T_IMP_EducationalDegree = .;
      _DM_BAD = 1;
   end;
end;

*** End Class Look-up, Standardization, Replacement ;


*** Omitted Cases;
if _dm_bad then do;
   _SEGMENT_ = .; Distance = .;
   goto CLUSvlex ;
end; *** omitted;

*** Compute Distances and Cluster Membership;
label _SEGMENT_ = 'Segment Id' ;
label Distance = 'Distance' ;
array CLUSvads [6] _temporary_;
drop _vqclus _vqmvar _vqnvar;
_vqmvar = 0;
do _vqclus = 1 to 6; CLUSvads [_vqclus] = 0; end;
if not missing( T_ClaimsRate ) then do;
   CLUSvads [1] + ( T_ClaimsRate - -0.63461196000002 )**2;
   CLUSvads [2] + ( T_ClaimsRate - 0.55725160267002 )**2;
   CLUSvads [3] + ( T_ClaimsRate - -1.21832985410926 )**2;
   CLUSvads [4] + ( T_ClaimsRate - 0.97634177212185 )**2;
   CLUSvads [5] + ( T_ClaimsRate - 0.4550943293938 )**2;
   CLUSvads [6] + ( T_ClaimsRate - 0.10740870418362 )**2;
end;
else _vqmvar + 1;
if not missing( T_CustomerMonetaryValue ) then do;
   CLUSvads [1] + ( T_CustomerMonetaryValue - 1.27827327176938 )**2;
   CLUSvads [2] + ( T_CustomerMonetaryValue - -0.55129236587425 )**2;
   CLUSvads [3] + ( T_CustomerMonetaryValue - 0.92072329758687 )**2;
   CLUSvads [4] + ( T_CustomerMonetaryValue - -0.93544181606573 )**2;
   CLUSvads [5] + ( T_CustomerMonetaryValue - -0.42437114433907 )**2;
   CLUSvads [6] + ( T_CustomerMonetaryValue - -0.09557357431689 )**2;
end;
else _vqmvar + 1;
if not missing( T_IMP_GrossMonthlySalary ) then do;
   CLUSvads [1] + ( T_IMP_GrossMonthlySalary - -1.12435697608673 )**2;
   CLUSvads [2] + ( T_IMP_GrossMonthlySalary - -1.08142618213073 )**2;
   CLUSvads [3] + ( T_IMP_GrossMonthlySalary - -0.11112712016138 )**2;
   CLUSvads [4] + ( T_IMP_GrossMonthlySalary - -0.05445462224862 )**2;
   CLUSvads [5] + ( T_IMP_GrossMonthlySalary - 0.5535080040999 )**2;
   CLUSvads [6] + ( T_IMP_GrossMonthlySalary - 1.138168763594 )**2;
end;
else _vqmvar + 1;
if not missing( T_IMP_REP_CustomerAge ) then do;
   CLUSvads [1] + ( T_IMP_REP_CustomerAge - -1.21199893127718 )**2;
   CLUSvads [2] + ( T_IMP_REP_CustomerAge - -1.08764664439235 )**2;
   CLUSvads [3] + ( T_IMP_REP_CustomerAge - -0.11632335540644 )**2;
   CLUSvads [4] + ( T_IMP_REP_CustomerAge - -0.0643416033782 )**2;
   CLUSvads [5] + ( T_IMP_REP_CustomerAge - 0.51886902989374 )**2;
   CLUSvads [6] + ( T_IMP_REP_CustomerAge - 1.20244421068302 )**2;
end;
else _vqmvar + 1;
if not missing( T_IMP_REP_FirstPolicyYear ) then do;
   CLUSvads [1] + ( T_IMP_REP_FirstPolicyYear - -0.03881115706777 )**2;
   CLUSvads [2] + ( T_IMP_REP_FirstPolicyYear - 0.1258905758509 )**2;
   CLUSvads [3] + ( T_IMP_REP_FirstPolicyYear - -0.04141773985474 )**2;
   CLUSvads [4] + ( T_IMP_REP_FirstPolicyYear - -0.27339149801813 )**2;
   CLUSvads [5] + ( T_IMP_REP_FirstPolicyYear - 0.19191087173339 )**2;
   CLUSvads [6] + ( T_IMP_REP_FirstPolicyYear - 0.05351538421255 )**2;
end;
else _vqmvar + 1;
if not missing( T_TOTAL_PREMIUM ) then do;
   CLUSvads [1] + ( T_TOTAL_PREMIUM - 1.94941202871419 )**2;
   CLUSvads [2] + ( T_TOTAL_PREMIUM - 0.16259631334868 )**2;
   CLUSvads [3] + ( T_TOTAL_PREMIUM - -0.45265338526791 )**2;
   CLUSvads [4] + ( T_TOTAL_PREMIUM - -0.6342278000474 )**2;
   CLUSvads [5] + ( T_TOTAL_PREMIUM - 0.01710315716777 )**2;
   CLUSvads [6] + ( T_TOTAL_PREMIUM - 0.03656307284323 )**2;
end;
else _vqmvar + 1;
if not missing( IMP_GeographicLiving1 ) then do;
   CLUSvads [1] + ( IMP_GeographicLiving1 - 0.01191698350201 )**2;
   CLUSvads [2] + ( IMP_GeographicLiving1 - -0.00031765869345 )**2;
   CLUSvads [3] + ( IMP_GeographicLiving1 - 0.00992935471115 )**2;
   CLUSvads [4] + ( IMP_GeographicLiving1 - 0.00555849868208 )**2;
   CLUSvads [5] + ( IMP_GeographicLiving1 - -0.01113967898648 )**2;
   CLUSvads [6] + ( IMP_GeographicLiving1 - -0.01236539378384 )**2;
end;
else _vqmvar + 0.25;
if not missing( IMP_GeographicLiving2 ) then do;
   CLUSvads [1] + ( IMP_GeographicLiving2 - -0.00545148469572 )**2;
   CLUSvads [2] + ( IMP_GeographicLiving2 - -0.01784761770173 )**2;
   CLUSvads [3] + ( IMP_GeographicLiving2 - 0.00015004889816 )**2;
   CLUSvads [4] + ( IMP_GeographicLiving2 - 0.00398201848591 )**2;
   CLUSvads [5] + ( IMP_GeographicLiving2 - 0.02091009339986 )**2;
   CLUSvads [6] + ( IMP_GeographicLiving2 - 0.00334980412565 )**2;
end;
else _vqmvar + 0.25;
if not missing( IMP_GeographicLiving3 ) then do;
   CLUSvads [1] + ( IMP_GeographicLiving3 - 0.00037391392322 )**2;
   CLUSvads [2] + ( IMP_GeographicLiving3 - -0.00691975903789 )**2;
   CLUSvads [3] + ( IMP_GeographicLiving3 - 0.01224863253547 )**2;
   CLUSvads [4] + ( IMP_GeographicLiving3 - 0.00775434972795 )**2;
   CLUSvads [5] + ( IMP_GeographicLiving3 - 0.01292297916214 )**2;
   CLUSvads [6] + ( IMP_GeographicLiving3 - -0.01795551031476 )**2;
end;
else _vqmvar + 0.25;
if not missing( IMP_GeographicLiving4 ) then do;
   CLUSvads [1] + ( IMP_GeographicLiving4 - -0.00804438379877 )**2;
   CLUSvads [2] + ( IMP_GeographicLiving4 - 0.01691155559795 )**2;
   CLUSvads [3] + ( IMP_GeographicLiving4 - -0.01932558869806 )**2;
   CLUSvads [4] + ( IMP_GeographicLiving4 - -0.01394680425793 )**2;
   CLUSvads [5] + ( IMP_GeographicLiving4 - -0.01302913636192 )**2;
   CLUSvads [6] + ( IMP_GeographicLiving4 - 0.02409720443898 )**2;
end;
else _vqmvar + 0.25;
if not missing( IMP_HasChildren0 ) then do;
   CLUSvads [1] + ( IMP_HasChildren0 - -0.06861885226845 )**2;
   CLUSvads [2] + ( IMP_HasChildren0 - -0.27416402936028 )**2;
   CLUSvads [3] + ( IMP_HasChildren0 - -0.38856137433309 )**2;
   CLUSvads [4] + ( IMP_HasChildren0 - -0.40405365468909 )**2;
   CLUSvads [5] + ( IMP_HasChildren0 - -0.45082815543063 )**2;
   CLUSvads [6] + ( IMP_HasChildren0 - 1.10181061963312 )**2;
end;
else _vqmvar + 0.5;
if not missing( IMP_HasChildren1 ) then do;
   CLUSvads [1] + ( IMP_HasChildren1 - 0.06861885226845 )**2;
   CLUSvads [2] + ( IMP_HasChildren1 - 0.27416402936028 )**2;
   CLUSvads [3] + ( IMP_HasChildren1 - 0.38856137433309 )**2;
   CLUSvads [4] + ( IMP_HasChildren1 - 0.40405365468909 )**2;
   CLUSvads [5] + ( IMP_HasChildren1 - 0.45082815543063 )**2;
   CLUSvads [6] + ( IMP_HasChildren1 - -1.10181061963312 )**2;
end;
else _vqmvar + 0.49999999999999;
if not missing( T_IMP_EducationalDegree ) then do;
   CLUSvads [1] + ( T_IMP_EducationalDegree - -0.94760384859053 )**2;
   CLUSvads [2] + ( T_IMP_EducationalDegree - -0.38981479738657 )**2;
   CLUSvads [3] + ( T_IMP_EducationalDegree - 0.40867737199409 )**2;
   CLUSvads [4] + ( T_IMP_EducationalDegree - 0.75397708153035 )**2;
   CLUSvads [5] + ( T_IMP_EducationalDegree - -0.74496082865521 )**2;
   CLUSvads [6] + ( T_IMP_EducationalDegree - 0.07813523153106 )**2;
end;
else _vqmvar + 1;
_vqnvar = 9 - _vqmvar;
if _vqnvar <= 1.3301360013429E-11 then do;
   _SEGMENT_ = .; Distance = .;
end;
else do;
   _SEGMENT_ = 1; Distance = CLUSvads [1];
   _vqfzdst = Distance * 0.99999999999988; drop _vqfzdst;
   do _vqclus = 2 to 6;
      if CLUSvads [_vqclus] < _vqfzdst then do;
         _SEGMENT_ = _vqclus; Distance = CLUSvads [_vqclus];
         _vqfzdst = Distance * 0.99999999999988;
      end;
   end;
   Distance = sqrt(Distance * (9 / _vqnvar));
end;
CLUSvlex :;

***************************************;
*** End Scoring Code from PROC DMVQ ***;
***************************************;
