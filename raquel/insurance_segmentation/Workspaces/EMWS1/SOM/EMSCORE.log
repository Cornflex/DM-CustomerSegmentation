MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 30, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:49:39" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                December 30, 2015
Time:                11:49:39
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1E5EE_0 "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\SOM\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1E5EE_0 new;
MPRINT(EM_DIAGRAM):   run;
22145      %let EMEXCEPTIONSTRING=;
22146      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22147      * SCORE: SOM;
MPRINT(EM_DIAGRAM):   * SCORE: SOM;
22148      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22149      %let EM_ACTION = SCORE;
22150      %let syscc = 0;
22151      %macro main;
22152         filename temp catalog 'sashelp.emexpl.som_macros.source';
22153         %include temp;
22154         filename temp;
22155      
22156         %SetProperties;
22157      
22158         %if %upcase(&EM_ACTION) = CREATE %then %do;
22159      
22160             filename temp catalog 'sashelp.emexpl.som_create.source';
22161             %include temp;
22162             filename temp;
22163             %create;
22164         %end;
22165         %else
22166         %if %upcase(&EM_ACTION) = TRAIN %then %do;
22167      
22168             filename temp catalog 'sashelp.emexpl.som_train.source';
22169             %include temp;
22170             filename temp;
22171             %train;
22172         %end;
22173         %else
22174         %if %upcase(&EM_ACTION) = SCORE %then %do;
22175      
22176             filename temp catalog 'sashelp.emexpl.som_score.source';
22177             %include temp;
22178             filename temp;
22179      
22180             %score;
22181         %end;
22182      
22183      %mend main;
22184      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.som_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.SOM_MACROS.SOURCE.
22185     +%macro SetProperties;
22186     +   %em_checkmacro(name=EM_PROPERTY_METHOD,      global=Y, value=BATCHSOM);
22187     +   %em_checkmacro(name=EM_PROPERTY_SEGMENTROLE, global=Y, value=SEGMENT);
22188     +   %em_checkmacro(name=EM_PROPERTY_STDMETHOD,   global=Y, value=NONE);
22189     +   %em_checkmacro(name=EM_PROPERTY_METHOD,      global=Y, value=BATCHSOM);
22190     +   %em_checkmacro(name=EM_PROPERTY_MAXC,        global=Y, value=10);
22191     +   %em_checkmacro(name=EM_PROPERTY_NROW,        global=Y, value=4);
22192     +   %em_checkmacro(name=EM_PROPERTY_NCOLUMN,     global=Y, value=6);
22193     +   %em_checkmacro(name=EM_PROPERTY_RADIUS,      global=Y, value=0);
22194     +   %em_checkmacro(name=EM_PROPERTY_INITIALMETHOD,    global=Y, value=DEFAULT);
22195     +   %em_checkmacro(name=EM_PROPERTY_NOMINALENCODING,  global=Y, value=DEFAULT);
22196     +   %em_checkmacro(name=EM_PROPERTY_ORDINALENCODING,  global=Y, value=DEFAULT);
22197     +   %em_checkmacro(name=EM_PROPERTY_IMPUTATIONMETHOD,    global=Y, value=NONE);
22198     +   %em_checkmacro(name=EM_PROPERTY_MISSINGINTERVAL,     global=Y, value=DEFAULT);
22199     +   %em_checkmacro(name=EM_PROPERTY_MISSINGNOMINAL,      global=Y, value=DEFAULT);
22200     +   %em_checkmacro(name=EM_PROPERTY_MISSINGORDINAL,      global=Y, value=DEFAULT);
22201     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,        global=Y, value=Y);
22202     +   %em_checkmacro(name=EM_PROPERTY_SOMDEFAULTS,         global=Y, value=Y);
22203     +   %em_checkmacro(name=EM_PROPERTY_LLSOM,               global=Y, value=Y);
22204     +   %em_checkmacro(name=EM_PROPERTY_NWSOM,               global=Y, value=Y);
22205     +   %em_checkmacro(name=EM_PROPERTY_LLCONVERGE,          global=Y, value=0.0001);
22206     +   %em_checkmacro(name=EM_PROPERTY_LLMAXITER,           global=Y, value=10);
22207     +   %em_checkmacro(name=EM_PROPERTY_NWCONVERGE,          global=Y, value=0.0001);
22208     +   %em_checkmacro(name=EM_PROPERTY_NWMAXITER,           global=Y, value=10);
22209     +   %em_checkmacro(name=EM_PROPERTY_NDEFAULTS,           global=Y, value=Y);
22210     +   %em_checkmacro(name=EM_PROPERTY_NSIZE,               global=Y, value=5);
22211     +   %em_checkmacro(name=EM_PROPERTY_KERNEL,              global=Y, value=1);
22212     +   %em_checkmacro(name=EM_PROPERTY_KMETRIC,             global=Y, value=0);
22213     +   %em_checkmacro(name=EM_PROPERTY_NINITIAL,            global=Y, value=5);
22214     +   %em_checkmacro(name=EM_PROPERTY_NFINAL,              global=Y, value=0);
22215     +   %em_checkmacro(name=EM_PROPERTY_NRESET,              global=Y, value=100);
22216     +   %em_checkmacro(name=EM_PROPERTY_NSTEPS,              global=Y, value=1000);
22217     +   %em_checkmacro(name=EM_PROPERTY_NITER,               global=Y, value=3);
22218     +   %em_checkmacro(name=EM_PROPERTY_KDEFAULTS,           global=Y, value=Y);
22219     +   %em_checkmacro(name=EM_PROPERTY_KBATCH,              global=Y, value=N);
22220     +   %em_checkmacro(name=EM_PROPERTY_LEARN,               global=Y, value=0.9);
22221     +   %em_checkmacro(name=EM_PROPERTY_LEARNINITIAL,        global=Y, value=0.9);
22222     +   %em_checkmacro(name=EM_PROPERTY_LEARNFINAL,          global=Y, value=0.2);
22223     +   %em_checkmacro(name=EM_PROPERTY_LEARNSTEPS,          global=Y, value=1000);
22224     +   %em_checkmacro(name=EM_PROPERTY_KMAXSTEPS,           global=Y, value=1200);
22225     +   %em_checkmacro(name=EM_PROPERTY_KMAXITER,            global=Y, value=100);
22226     +   %em_checkmacro(name=EM_PROPERTY_KCONVERGE,           global=Y, value=0.0001);
22227     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDVARS,        global=Y, value=All);
22229     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.som_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.SOM_SCORE.SOURCE.
22231     +%macro score;
22232     +     %em_GETNAME(key=OUTVAR, type=DATA);
22233     +
22234     +     %if ("&em_user_OUTVAR" eq "") or ("&EM_FILE_CDELTA_TRAIN" eq "") %then %do;
22235     +         %put Error:  OUTVAR data or file name not specified.  Cannot build delta code.;
22236     +         %goto doends;
22237     +     %end;
22238     +
22239     +     %if %upcase(&EM_PROPERTY_IMPUTATIONMETHOD) ne NONE %then %do;
22240     +         data _null_;
22241     +            dsid = open("&em_user_OUTVAR");
22242     +            if dsid then do;
22243     +               firstvar = varname(dsid, 2);
22244     +               call symput('FIRSTVAR', firstvar);
22245     +               lastvar  = varname(dsid, attrn(dsid, 'NVARS'));
22246     +               call symput('LASTVAR', lastvar);
22247     +               dsid = close(dsid);
22248     +            end;
22249     +         run;
22250     +         proc transpose data=&em_user_OUTVAR out=som_temp(rename=(COl2=NAME) where=(COL1='IMPUTED'));
22251     +            VAR &firstvar--&lastvar;
22252     +            where _TYPE_ in('TYPE' 'VARIABLE');
22253     +         run;
22254     +         proc sort data=som_temp;
22255     +            by NAME;
22256     +         run;
22257     +         proc sort data=&EM_DATA_VARIABLESET(KEEP=NAME ROLE LEVEL) out=som_temp2;
22258     +            by NAME;
22259     +         run;
22260     +         data som_temp;
22261     +            merge som_temp(in=INVAR) som_temp2;
22262     +            by NAME;
22263     +            if INVAR then output;
22264     +         run;
22265     +     %end;
22266     +
22267     +     filename X "&EM_FILE_CDELTA_TRAIN";
22268     +
22269     +     data _null_;
22270     +        FILE X;
22271     +        if _N_=1 then do;
22272     +           put "select(UPCASE(NAME));";
22273     +           put "when('SEGMENT') do;";
22274     +           put 'ROLE = "&EM_PROPERTY_SEGMENTROLE"; LEVEL = "NOMINAL";';
22275     +           put "end;";
22276     +           %if (%upcase(&EM_PROPERTY_EXPORTEDVARS) ne DIMENSIONS) %then %do;
22277     +               put "when('SOM_SEGMENT') do;";
22278     +               put 'ROLE = "&EM_PROPERTY_SEGMENTROLE"; LEVEL = "NOMINAL";';
22279     +               put "end;";
22280     +           %end;
22281     +           %else %do;
22282     +               put "when('SOM_SEGMENT') delete;";
22283     +           %end;
22284     +
22285     +           %if (%upcase(&EM_PROPERTY_EXPORTEDVARS) ne SEGMENT) %then %do;
22286     +               put "when('SOM_DIMENSION1') do;";
22287     +               put "ROLE = 'INPUT'; LEVEL = 'NOMINAL';";
22288     +               put "end;";
22289     +               put "when('SOM_DIMENSION2') do;";
22290     +               put "ROLE = 'INPUT'; LEVEL = 'NOMINAL';";
22291     +               put "end;";
22292     +           %end;
22293     +           %else %do;
22294     +               put "when('SOM_DIMENSION1') delete;";
22295     +               put "when('SOM_DIMENSION2') delete;";
22296     +           %end;
22297     +
22298     +           %if (%upcase(&EM_PROPERTY_EXPORTEDVARS) eq ALL) %then %do;
22299     +               put "when('DISTANCE') do;";
22300     +               put "ROLE = 'REJECTED'; LEVEL = 'INTERVAL';";
22301     +               put "end;";
22302     +               put "when('_IMPUTE_') do;";
22303     +               put "ROLE = 'REJECTED'; LEVEL = 'INTERVAL';";
22304     +               put "end;";
22305     +           %end;
22306     +           %else %do;
22307     +               put "when('DISTANCE') delete;";
22308     +               put "when('_IMPUTE_') delete;";
22309     +           %end;
22310     +           put "when('SOM_ID') delete;";
22311     +        end;
22312     +
22313     +        %if %upcase(&EM_PROPERTY_IMPUTATIONMETHOD) ne NONE %then %do;
22314     +            set WORK.SOM_TEMP end=eof;
22315     +            put "when('" _NAME_"') do;";
22316     +            put "    ROLE =  '" ROLE "';";
22317     +            put "    LEVEL = '" LEVEL "';";
22318     +            put "end;";
22319     +            %if &EM_PROPERTY_HIDEVARIABLE=N %then %do;
22320     +                put "when('" NAME"') ROLE = 'REJECTED';";
22321     +            %end;
22322     +            %else %do;
22323     +                put "when('" NAME"') delete;";
22324     +            %end;
22325     +
22326     +            if eof then do;
22327     +               put "otherwise;";
22328     +               put 'end;';
22329     +            end;
22330     +        %end;
22331     +        %else %do;
22332     +            put "otherwise;";
22333     +            put 'end;';
22334     +        %end;
22335     +     run;
22336     +
22337     +     proc datasets lib=work nolist mt=(DATA VIEW CATALOG);
22338     +        delete som_temp som_temp2;
22339     +     run;
22340     +     quit;
22341     +
22342     +     filename X;
22343     +
22344     +  %doends:
22345     +%mend score;
22346     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename X "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\SOM\CDELTA_TRAIN.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   FILE X;
MPRINT(SCORE):   if _N_=1 then do;
MPRINT(SCORE):   put "select(UPCASE(NAME));";
MPRINT(SCORE):   put "when('SEGMENT') do;";
MPRINT(SCORE):   put 'ROLE = "&EM_PROPERTY_SEGMENTROLE"; LEVEL = "NOMINAL";';
MPRINT(SCORE):   put "end;";
MPRINT(SCORE):   put "when('SOM_SEGMENT') do;";
MPRINT(SCORE):   put 'ROLE = "&EM_PROPERTY_SEGMENTROLE"; LEVEL = "NOMINAL";';
MPRINT(SCORE):   put "end;";
MPRINT(SCORE):   put "when('SOM_DIMENSION1') do;";
MPRINT(SCORE):   put "ROLE = 'INPUT'; LEVEL = 'NOMINAL';";
MPRINT(SCORE):   put "end;";
MPRINT(SCORE):   put "when('SOM_DIMENSION2') do;";
MPRINT(SCORE):   put "ROLE = 'INPUT'; LEVEL = 'NOMINAL';";
MPRINT(SCORE):   put "end;";
MPRINT(SCORE):   put "when('DISTANCE') do;";
MPRINT(SCORE):   put "ROLE = 'REJECTED'; LEVEL = 'INTERVAL';";
MPRINT(SCORE):   put "end;";
MPRINT(SCORE):   put "when('_IMPUTE_') do;";
MPRINT(SCORE):   put "ROLE = 'REJECTED'; LEVEL = 'INTERVAL';";
MPRINT(SCORE):   put "end;";
MPRINT(SCORE):   put "when('SOM_ID') delete;";
MPRINT(SCORE):   end;
MPRINT(SCORE):   put "otherwise;";
MPRINT(SCORE):   put 'end;';
MPRINT(SCORE):   run;

NOTE: The file X is:
      Filename=\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\SOM\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=30Dec2015:11:49:39,
      Create Time=30Dec2015:11:49:39

NOTE: 22 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   proc datasets lib=work nolist mt=(DATA VIEW CATALOG);
MPRINT(SCORE):   delete som_temp som_temp2;
MPRINT(SCORE):   run;

NOTE: The file WORK.SOM_TEMP (memtype=(DATA VIEW CATALOG)) was not found, but appears on a DELETE statement.
NOTE: The file WORK.SOM_TEMP2 (memtype=(DATA VIEW CATALOG)) was not found, but appears on a DELETE statement.
MPRINT(SCORE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: SOM;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22347      
22348      *------------------------------------------------------------*;
22349      * End SCORE: SOM;
22350      *------------------------------------------------------------*;

22351      filename emflow "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\SOM\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\SOM\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SOM: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22352      *------------------------------------------------------------*;
22353      * SOM: Scoring DATA data;
22354      *------------------------------------------------------------*;
22355      data EMWS1.SOM_TRAIN
22356      / view=EMWS1.SOM_TRAIN
22357      ;
MPRINT(EM_DIAGRAM):   data EMWS1.SOM_TRAIN / view=EMWS1.SOM_TRAIN ;
22358      set EMWS1.Filter_TRAIN
22359      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_TRAIN ;
22360      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\SOM\EMFLOWSCORE.sas.
22361     +*****************************************;
MPRINT(EM_DIAGRAM):   *****************************************;
22362     +*** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
22363     +*****************************************;
MPRINT(EM_DIAGRAM):   *****************************************;
22364     +
22365     +
22366     +*** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
22367     +drop _dm_bad; _dm_bad = 0;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
22368     +
22369     +*** Standardize ClaimsRate ;
MPRINT(EM_DIAGRAM):   *** Standardize ClaimsRate ;
22370     +drop T_ClaimsRate ;
MPRINT(EM_DIAGRAM):   drop T_ClaimsRate ;
22371     +if missing( ClaimsRate ) then T_ClaimsRate = .;
MPRINT(EM_DIAGRAM):   if missing( ClaimsRate ) then T_ClaimsRate = .;
22372     +else T_ClaimsRate = (ClaimsRate - 0.67785883165078) * 3.19874181950442;
MPRINT(EM_DIAGRAM):   else T_ClaimsRate = (ClaimsRate - 0.67785883165078) * 3.19874181950442;
22373     +
22374     +*** Standardize CustomerMonetaryValue ;
MPRINT(EM_DIAGRAM):   *** Standardize CustomerMonetaryValue ;
22375     +drop T_CustomerMonetaryValue ;
MPRINT(EM_DIAGRAM):   drop T_CustomerMonetaryValue ;
22376     +if missing( CustomerMonetaryValue ) then T_CustomerMonetaryValue = .;
MPRINT(EM_DIAGRAM):   if missing( CustomerMonetaryValue ) then T_CustomerMonetaryValue = .;
22377     +else T_CustomerMonetaryValue = (CustomerMonetaryValue
22378     +         - 216.174775814523) * 0.00411492618602;
MPRINT(EM_DIAGRAM):   else T_CustomerMonetaryValue = (CustomerMonetaryValue - 216.174775814523) * 0.00411492618602;
22379     +
22380     +*** Standardize IMP_GrossMonthlySalary ;
MPRINT(EM_DIAGRAM):   *** Standardize IMP_GrossMonthlySalary ;
22381     +drop T_IMP_GrossMonthlySalary ;
MPRINT(EM_DIAGRAM):   drop T_IMP_GrossMonthlySalary ;
22382     +if missing( IMP_GrossMonthlySalary ) then T_IMP_GrossMonthlySalary = .;
MPRINT(EM_DIAGRAM):   if missing( IMP_GrossMonthlySalary ) then T_IMP_GrossMonthlySalary = .;
22383     +else T_IMP_GrossMonthlySalary = (IMP_GrossMonthlySalary
22384     +         - 5037.91650495352) * 0.00052239907129;
MPRINT(EM_DIAGRAM):   else T_IMP_GrossMonthlySalary = (IMP_GrossMonthlySalary - 5037.91650495352) * 0.00052239907129;
22385     +
22386     +*** Standardize IMP_REP_CustomerAge ;
MPRINT(EM_DIAGRAM):   *** Standardize IMP_REP_CustomerAge ;
22387     +drop T_IMP_REP_CustomerAge ;
MPRINT(EM_DIAGRAM):   drop T_IMP_REP_CustomerAge ;
22388     +if missing( IMP_REP_CustomerAge ) then T_IMP_REP_CustomerAge = .;
MPRINT(EM_DIAGRAM):   if missing( IMP_REP_CustomerAge ) then T_IMP_REP_CustomerAge = .;
22389     +else T_IMP_REP_CustomerAge = (IMP_REP_CustomerAge
22390     +         - 48.2995826432697) * 0.05850781974212;
MPRINT(EM_DIAGRAM):   else T_IMP_REP_CustomerAge = (IMP_REP_CustomerAge - 48.2995826432697) * 0.05850781974212;
22391     +
22392     +*** Standardize IMP_REP_FirstPolicyYear ;
MPRINT(EM_DIAGRAM):   *** Standardize IMP_REP_FirstPolicyYear ;
22393     +drop T_IMP_REP_FirstPolicyYear ;
MPRINT(EM_DIAGRAM):   drop T_IMP_REP_FirstPolicyYear ;
22394     +if missing( IMP_REP_FirstPolicyYear ) then T_IMP_REP_FirstPolicyYear = .;
MPRINT(EM_DIAGRAM):   if missing( IMP_REP_FirstPolicyYear ) then T_IMP_REP_FirstPolicyYear = .;
22395     +else T_IMP_REP_FirstPolicyYear = (IMP_REP_FirstPolicyYear
22396     +         - 1985.99606898641) * 0.15179010233625;
MPRINT(EM_DIAGRAM):   else T_IMP_REP_FirstPolicyYear = (IMP_REP_FirstPolicyYear - 1985.99606898641) * 0.15179010233625;
22397     +
22398     +*** Standardize TOTAL_PREMIUM ;
MPRINT(EM_DIAGRAM):   *** Standardize TOTAL_PREMIUM ;
22399     +drop T_TOTAL_PREMIUM ;
MPRINT(EM_DIAGRAM):   drop T_TOTAL_PREMIUM ;
22400     +if missing( TOTAL_PREMIUM ) then T_TOTAL_PREMIUM = .;
MPRINT(EM_DIAGRAM):   if missing( TOTAL_PREMIUM ) then T_TOTAL_PREMIUM = .;
22401     +else T_TOTAL_PREMIUM = (TOTAL_PREMIUM - 747.789125727714) * 0.00576296047634;
MPRINT(EM_DIAGRAM):   else T_TOTAL_PREMIUM = (TOTAL_PREMIUM - 747.789125727714) * 0.00576296047634;
22402     +
22403     +*** Generate dummy variables for IMP_EducationalDegree ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_EducationalDegree ;
22404     +drop T_IMP_EducationalDegree ;
MPRINT(EM_DIAGRAM):   drop T_IMP_EducationalDegree ;
22405     +if missing( IMP_EducationalDegree ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_EducationalDegree ) then do;
22406     +   T_IMP_EducationalDegree = .;
MPRINT(EM_DIAGRAM):   T_IMP_EducationalDegree = .;
22407     +end;
MPRINT(EM_DIAGRAM):   end;
22408     +else do;
MPRINT(EM_DIAGRAM):   else do;
22409     +   length _dm15 $ 15; drop _dm15 ;
MPRINT(EM_DIAGRAM):   length _dm15 $ 15;
MPRINT(EM_DIAGRAM):   drop _dm15 ;
22410     +   _dm15 = put( IMP_EducationalDegree , $CHAR15. );
MPRINT(EM_DIAGRAM):   _dm15 = put( IMP_EducationalDegree , $CHAR15. );
22411     +   %DMNORMIP( _dm15 )
MPRINT(DMNORMIP):   call dmnorm(_dm15,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm15 = '3 - BSC/MSC' then do;
MPRINT(EM_DIAGRAM):   T_IMP_EducationalDegree = 0.73634959452922;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm15 = '2 - HIGH SCHOOL' then do;
22412     +   if _dm15 = '3 - BSC/MSC'  then do;
MPRINT(EM_DIAGRAM):   T_IMP_EducationalDegree = -0.80426719652593;
22413     +      T_IMP_EducationalDegree = 0.73634959452922;
MPRINT(EM_DIAGRAM):   end;
22414     +   end;
22415     +   else if _dm15 = '2 - HIGH SCHOOL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm15 = '1 - BASIC' then do;
MPRINT(EM_DIAGRAM):   T_IMP_EducationalDegree = -1.66589982524682;
22416     +      T_IMP_EducationalDegree = -0.80426719652593;
MPRINT(EM_DIAGRAM):   end;
22417     +   end;
22418     +   else if _dm15 = '1 - BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm15 = '4 - PHD' then do;
MPRINT(EM_DIAGRAM):   T_IMP_EducationalDegree = 1.75319504815218;
22419     +      T_IMP_EducationalDegree = -1.66589982524682;
MPRINT(EM_DIAGRAM):   end;
22420     +   end;
22421     +   else if _dm15 = '4 - PHD'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   T_IMP_EducationalDegree = .;
22422     +      T_IMP_EducationalDegree = 1.75319504815218;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22423     +   end;
MPRINT(EM_DIAGRAM):   end;
22424     +   else do;
MPRINT(EM_DIAGRAM):   end;
22425     +      T_IMP_EducationalDegree = .;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_GeographicLiving ;
22426     +      _DM_BAD = 1;
22427     +   end;
MPRINT(EM_DIAGRAM):   drop IMP_GeographicLiving1 IMP_GeographicLiving2 IMP_GeographicLiving3 IMP_GeographicLiving4 ;
22428     +end;
MPRINT(EM_DIAGRAM):   if missing( IMP_GeographicLiving ) then do;
22429     +
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving1 = .;
22430     +*** Generate dummy variables for IMP_GeographicLiving ;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving2 = .;
22431     +drop IMP_GeographicLiving1 IMP_GeographicLiving2 IMP_GeographicLiving3
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving3 = .;
22432     +        IMP_GeographicLiving4 ;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving4 = .;
22433     +if missing( IMP_GeographicLiving ) then do;
MPRINT(EM_DIAGRAM):   end;
22434     +   IMP_GeographicLiving1 = .;
22435     +   IMP_GeographicLiving2 = .;
MPRINT(EM_DIAGRAM):   else do;
22436     +   IMP_GeographicLiving3 = .;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
22437     +   IMP_GeographicLiving4 = .;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22438     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_GeographicLiving , BEST12. );
22439     +else do;
22440     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
22441     +   _dm12 = put( IMP_GeographicLiving , BEST12. );
22442     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving1 = -0.32410552391225;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving2 = -0.16768700644594;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving3 = -0.2501308440739;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving4 = 0.6087597341956;
22443     +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   end;
22444     +      IMP_GeographicLiving1 = -0.32410552391225;
22445     +      IMP_GeographicLiving2 = -0.16768700644594;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
22446     +      IMP_GeographicLiving3 = -0.2501308440739;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving1 = 0.77127493332795;
22447     +      IMP_GeographicLiving4 = 0.6087597341956;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving2 = -0.16768700644594;
22448     +   end;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving3 = -0.2501308440739;
22449     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving4 = -0.41062910751965;
MPRINT(EM_DIAGRAM):   end;
22450     +      IMP_GeographicLiving1 = 0.77127493332795;
22451     +      IMP_GeographicLiving2 = -0.16768700644594;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22452     +      IMP_GeographicLiving3 = -0.2501308440739;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving1 = -0.32410552391225;
22453     +      IMP_GeographicLiving4 = -0.41062910751965;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving2 = -0.16768700644594;
22454     +   end;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving3 = 0.9993748162973;
22455     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving4 = -0.41062910751965;
MPRINT(EM_DIAGRAM):   end;
22456     +      IMP_GeographicLiving1 = -0.32410552391225;
22457     +      IMP_GeographicLiving2 = -0.16768700644594;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22458     +      IMP_GeographicLiving3 = 0.9993748162973;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving1 = -0.32410552391225;
22459     +      IMP_GeographicLiving4 = -0.41062910751965;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving2 = 1.49072054922295;
22460     +   end;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving3 = -0.2501308440739;
22461     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving4 = -0.41062910751965;
MPRINT(EM_DIAGRAM):   end;
22462     +      IMP_GeographicLiving1 = -0.32410552391225;
22463     +      IMP_GeographicLiving2 = 1.49072054922295;
MPRINT(EM_DIAGRAM):   else do;
22464     +      IMP_GeographicLiving3 = -0.2501308440739;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving1 = .;
22465     +      IMP_GeographicLiving4 = -0.41062910751965;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving2 = .;
22466     +   end;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving3 = .;
22467     +   else do;
MPRINT(EM_DIAGRAM):   IMP_GeographicLiving4 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22468     +      IMP_GeographicLiving1 = .;
MPRINT(EM_DIAGRAM):   end;
22469     +      IMP_GeographicLiving2 = .;
MPRINT(EM_DIAGRAM):   end;
22470     +      IMP_GeographicLiving3 = .;
22471     +      IMP_GeographicLiving4 = .;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_HasChildren ;
22472     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop IMP_HasChildren0 IMP_HasChildren1 ;
22473     +   end;
MPRINT(EM_DIAGRAM):   if missing( IMP_HasChildren ) then do;
22474     +end;
MPRINT(EM_DIAGRAM):   IMP_HasChildren0 = .;
22475     +
MPRINT(EM_DIAGRAM):   IMP_HasChildren1 = .;
22476     +*** Generate dummy variables for IMP_HasChildren ;
MPRINT(EM_DIAGRAM):   end;
22477     +drop IMP_HasChildren0 IMP_HasChildren1 ;
22478     +if missing( IMP_HasChildren ) then do;
MPRINT(EM_DIAGRAM):   else do;
22479     +   IMP_HasChildren0 = .;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
22480     +   IMP_HasChildren1 = .;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22481     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_HasChildren , BEST12. );
22482     +else do;
22483     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
22484     +   _dm12 = put( IMP_HasChildren , BEST12. );
22485     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   IMP_HasChildren0 = -0.45375214559081;
MPRINT(EM_DIAGRAM):   IMP_HasChildren1 = 0.45375214559081;
MPRINT(EM_DIAGRAM):   end;
22486     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22487     +      IMP_HasChildren0 = -0.45375214559081;
MPRINT(EM_DIAGRAM):   IMP_HasChildren0 = 1.10181061963315;
22488     +      IMP_HasChildren1 = 0.45375214559081;
MPRINT(EM_DIAGRAM):   IMP_HasChildren1 = -1.10181061963315;
22489     +   end;
MPRINT(EM_DIAGRAM):   end;
22490     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else do;
22491     +      IMP_HasChildren0 = 1.10181061963315;
MPRINT(EM_DIAGRAM):   IMP_HasChildren0 = .;
22492     +      IMP_HasChildren1 = -1.10181061963315;
MPRINT(EM_DIAGRAM):   IMP_HasChildren1 = .;
22493     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22494     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22495     +      IMP_HasChildren0 = .;
22496     +      IMP_HasChildren1 = .;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
22497     +      _DM_BAD = 1;
22498     +   end;
22499     +end;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
22500     +
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
22501     +*** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   SOM_SEGMENT = .;
MPRINT(EM_DIAGRAM):   Distance = .;
22502     +
MPRINT(EM_DIAGRAM):   goto SOMvlex ;
22503     +
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
22504     +*** Omitted Cases;
22505     +if _dm_bad then do;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
22506     +   SOM_SEGMENT = .; Distance = .;
MPRINT(EM_DIAGRAM):   label SOM_SEGMENT = 'SOM Segment ID' ;
22507     +   goto SOMvlex ;
22508     +end; *** omitted;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
22509     +
22510     +*** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   array SOMvads [4] _temporary_;
22511     +label SOM_SEGMENT = 'SOM Segment ID' ;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
22512     +label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 4;
MPRINT(EM_DIAGRAM):   SOMvads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_ClaimsRate ) then do;
22513     +array SOMvads [4] _temporary_;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( T_ClaimsRate - -1.24884679326032 )**2;
22514     +drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( T_ClaimsRate - -0.34342532829866 )**2;
22515     +_vqmvar = 0;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( T_ClaimsRate - 0.83365615759656 )**2;
22516     +do _vqclus = 1 to 4; SOMvads [_vqclus] = 0; end;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( T_ClaimsRate - 0.08360769719345 )**2;
22517     +if not missing( T_ClaimsRate ) then do;
MPRINT(EM_DIAGRAM):   end;
22518     +   SOMvads [1] + ( T_ClaimsRate - -1.24884679326032 )**2;
22519     +   SOMvads [2] + ( T_ClaimsRate - -0.34342532829866 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
22520     +   SOMvads [3] + ( T_ClaimsRate - 0.83365615759656 )**2;
MPRINT(EM_DIAGRAM):   if not missing( T_CustomerMonetaryValue ) then do;
22521     +   SOMvads [4] + ( T_ClaimsRate - 0.08360769719345 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( T_CustomerMonetaryValue - 1.02889602345723 )**2;
22522     +end;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( T_CustomerMonetaryValue - 0.78897524864445 )**2;
22523     +else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( T_CustomerMonetaryValue - -0.81638970393316 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( T_CustomerMonetaryValue - -0.07725261539638 )**2;
22524     +if not missing( T_CustomerMonetaryValue ) then do;
MPRINT(EM_DIAGRAM):   end;
22525     +   SOMvads [1] + ( T_CustomerMonetaryValue - 1.02889602345723 )**2;
22526     +   SOMvads [2] + ( T_CustomerMonetaryValue - 0.78897524864445 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
22527     +   SOMvads [3] + ( T_CustomerMonetaryValue - -0.81638970393316 )**2;
MPRINT(EM_DIAGRAM):   if not missing( T_IMP_GrossMonthlySalary ) then do;
22528     +   SOMvads [4] + ( T_CustomerMonetaryValue - -0.07725261539638 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( T_IMP_GrossMonthlySalary - -0.06362398921708 )**2;
22529     +end;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( T_IMP_GrossMonthlySalary - -1.25680147892849 )**2;
22530     +else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( T_IMP_GrossMonthlySalary - -0.33915449911407 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( T_IMP_GrossMonthlySalary - 1.13605289689784 )**2;
22531     +if not missing( T_IMP_GrossMonthlySalary ) then do;
MPRINT(EM_DIAGRAM):   end;
22532     +   SOMvads [1] + ( T_IMP_GrossMonthlySalary - -0.06362398921708 )**2;
22533     +   SOMvads [2] + ( T_IMP_GrossMonthlySalary - -1.25680147892849 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
22534     +   SOMvads [3] + ( T_IMP_GrossMonthlySalary - -0.33915449911407 )**2;
MPRINT(EM_DIAGRAM):   if not missing( T_IMP_REP_CustomerAge ) then do;
22535     +   SOMvads [4] + ( T_IMP_GrossMonthlySalary - 1.13605289689784 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( T_IMP_REP_CustomerAge - -0.10281212520727 )**2;
22536     +end;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( T_IMP_REP_CustomerAge - -1.34026162396271 )**2;
22537     +else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( T_IMP_REP_CustomerAge - -0.30349792931496 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( T_IMP_REP_CustomerAge - 1.25906902414547 )**2;
22538     +if not missing( T_IMP_REP_CustomerAge ) then do;
MPRINT(EM_DIAGRAM):   end;
22539     +   SOMvads [1] + ( T_IMP_REP_CustomerAge - -0.10281212520727 )**2;
22540     +   SOMvads [2] + ( T_IMP_REP_CustomerAge - -1.34026162396271 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
22541     +   SOMvads [3] + ( T_IMP_REP_CustomerAge - -0.30349792931496 )**2;
MPRINT(EM_DIAGRAM):   if not missing( T_IMP_REP_FirstPolicyYear ) then do;
22542     +   SOMvads [4] + ( T_IMP_REP_CustomerAge - 1.25906902414547 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( T_IMP_REP_FirstPolicyYear - -0.10827622807874 )**2;
22543     +end;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( T_IMP_REP_FirstPolicyYear - -0.00381089227763 )**2;
22544     +else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( T_IMP_REP_FirstPolicyYear - -0.00591488475977 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( T_IMP_REP_FirstPolicyYear - 0.19769544609659 )**2;
22545     +if not missing( T_IMP_REP_FirstPolicyYear ) then do;
MPRINT(EM_DIAGRAM):   end;
22546     +   SOMvads [1] + ( T_IMP_REP_FirstPolicyYear - -0.10827622807874 )**2;
22547     +   SOMvads [2] + ( T_IMP_REP_FirstPolicyYear - -0.00381089227763 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
22548     +   SOMvads [3] + ( T_IMP_REP_FirstPolicyYear - -0.00591488475977 )**2;
MPRINT(EM_DIAGRAM):   if not missing( T_TOTAL_PREMIUM ) then do;
22549     +   SOMvads [4] + ( T_IMP_REP_FirstPolicyYear - 0.19769544609659 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( T_TOTAL_PREMIUM - -0.30244073064465 )**2;
22550     +end;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( T_TOTAL_PREMIUM - 1.4448056399174 )**2;
22551     +else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( T_TOTAL_PREMIUM - -0.37484678760762 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( T_TOTAL_PREMIUM - 0.05322007616901 )**2;
22552     +if not missing( T_TOTAL_PREMIUM ) then do;
MPRINT(EM_DIAGRAM):   end;
22553     +   SOMvads [1] + ( T_TOTAL_PREMIUM - -0.30244073064465 )**2;
22554     +   SOMvads [2] + ( T_TOTAL_PREMIUM - 1.4448056399174 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
22555     +   SOMvads [3] + ( T_TOTAL_PREMIUM - -0.37484678760762 )**2;
MPRINT(EM_DIAGRAM):   if not missing( T_IMP_EducationalDegree ) then do;
22556     +   SOMvads [4] + ( T_TOTAL_PREMIUM - 0.05322007616901 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( T_IMP_EducationalDegree - 0.27877961961375 )**2;
22557     +end;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( T_IMP_EducationalDegree - -0.98200668915813 )**2;
22558     +else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( T_IMP_EducationalDegree - 0.10863328290934 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( T_IMP_EducationalDegree - 0.02146626084857 )**2;
22559     +if not missing( T_IMP_EducationalDegree ) then do;
MPRINT(EM_DIAGRAM):   end;
22560     +   SOMvads [1] + ( T_IMP_EducationalDegree - 0.27877961961375 )**2;
22561     +   SOMvads [2] + ( T_IMP_EducationalDegree - -0.98200668915813 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
22562     +   SOMvads [3] + ( T_IMP_EducationalDegree - 0.10863328290934 )**2;
MPRINT(EM_DIAGRAM):   if not missing( IMP_GeographicLiving1 ) then do;
22563     +   SOMvads [4] + ( T_IMP_EducationalDegree - 0.02146626084857 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( IMP_GeographicLiving1 - 0.05750702311999 )**2;
22564     +end;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( IMP_GeographicLiving1 - 0.0160780703933 )**2;
22565     +else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( IMP_GeographicLiving1 - -0.01765568664817 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( IMP_GeographicLiving1 - -0.06792259294367 )**2;
22566     +if not missing( IMP_GeographicLiving1 ) then do;
MPRINT(EM_DIAGRAM):   end;
22567     +   SOMvads [1] + ( IMP_GeographicLiving1 - 0.05750702311999 )**2;
22568     +   SOMvads [2] + ( IMP_GeographicLiving1 - 0.0160780703933 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.25;
22569     +   SOMvads [3] + ( IMP_GeographicLiving1 - -0.01765568664817 )**2;
MPRINT(EM_DIAGRAM):   if not missing( IMP_GeographicLiving2 ) then do;
22570     +   SOMvads [4] + ( IMP_GeographicLiving1 - -0.06792259294367 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( IMP_GeographicLiving2 - 0.03303076680593 )**2;
22571     +end;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( IMP_GeographicLiving2 - 0.04108477831395 )**2;
22572     +else _vqmvar + 0.25;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( IMP_GeographicLiving2 - -0.03154132179819 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( IMP_GeographicLiving2 - 0.10203886021891 )**2;
22573     +if not missing( IMP_GeographicLiving2 ) then do;
MPRINT(EM_DIAGRAM):   end;
22574     +   SOMvads [1] + ( IMP_GeographicLiving2 - 0.03303076680593 )**2;
22575     +   SOMvads [2] + ( IMP_GeographicLiving2 - 0.04108477831395 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.25;
22576     +   SOMvads [3] + ( IMP_GeographicLiving2 - -0.03154132179819 )**2;
MPRINT(EM_DIAGRAM):   if not missing( IMP_GeographicLiving3 ) then do;
22577     +   SOMvads [4] + ( IMP_GeographicLiving2 - 0.10203886021891 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( IMP_GeographicLiving3 - -0.02507722599912 )**2;
22578     +end;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( IMP_GeographicLiving3 - 0.03117798505168 )**2;
22579     +else _vqmvar + 0.25;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( IMP_GeographicLiving3 - 0.04861039041122 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( IMP_GeographicLiving3 - -0.0221656635655 )**2;
22580     +if not missing( IMP_GeographicLiving3 ) then do;
MPRINT(EM_DIAGRAM):   end;
22581     +   SOMvads [1] + ( IMP_GeographicLiving3 - -0.02507722599912 )**2;
22582     +   SOMvads [2] + ( IMP_GeographicLiving3 - 0.03117798505168 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.25;
22583     +   SOMvads [3] + ( IMP_GeographicLiving3 - 0.04861039041122 )**2;
MPRINT(EM_DIAGRAM):   if not missing( IMP_GeographicLiving4 ) then do;
22584     +   SOMvads [4] + ( IMP_GeographicLiving3 - -0.0221656635655 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( IMP_GeographicLiving4 - -0.05336197773889 )**2;
22585     +end;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( IMP_GeographicLiving4 - -0.0656526754001 )**2;
22586     +else _vqmvar + 0.25;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( IMP_GeographicLiving4 - -0.00383936689815 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( IMP_GeographicLiving4 - 0.01857280566798 )**2;
22587     +if not missing( IMP_GeographicLiving4 ) then do;
MPRINT(EM_DIAGRAM):   end;
22588     +   SOMvads [1] + ( IMP_GeographicLiving4 - -0.05336197773889 )**2;
22589     +   SOMvads [2] + ( IMP_GeographicLiving4 - -0.0656526754001 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.25;
22590     +   SOMvads [3] + ( IMP_GeographicLiving4 - -0.00383936689815 )**2;
MPRINT(EM_DIAGRAM):   if not missing( IMP_HasChildren0 ) then do;
22591     +   SOMvads [4] + ( IMP_GeographicLiving4 - 0.01857280566798 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( IMP_HasChildren0 - -0.4191569788907 )**2;
22592     +end;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( IMP_HasChildren0 - -0.12412330574342 )**2;
22593     +else _vqmvar + 0.25;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( IMP_HasChildren0 - -0.38349344073152 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( IMP_HasChildren0 - 1.07067607728471 )**2;
22594     +if not missing( IMP_HasChildren0 ) then do;
MPRINT(EM_DIAGRAM):   end;
22595     +   SOMvads [1] + ( IMP_HasChildren0 - -0.4191569788907 )**2;
22596     +   SOMvads [2] + ( IMP_HasChildren0 - -0.12412330574342 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
22597     +   SOMvads [3] + ( IMP_HasChildren0 - -0.38349344073152 )**2;
MPRINT(EM_DIAGRAM):   if not missing( IMP_HasChildren1 ) then do;
22598     +   SOMvads [4] + ( IMP_HasChildren0 - 1.07067607728471 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [1] + ( IMP_HasChildren1 - 0.4191569788907 )**2;
22599     +end;
MPRINT(EM_DIAGRAM):   SOMvads [2] + ( IMP_HasChildren1 - 0.12412330574342 )**2;
22600     +else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   SOMvads [3] + ( IMP_HasChildren1 - 0.38349344073152 )**2;
MPRINT(EM_DIAGRAM):   SOMvads [4] + ( IMP_HasChildren1 - -1.07067607728471 )**2;
22601     +if not missing( IMP_HasChildren1 ) then do;
MPRINT(EM_DIAGRAM):   end;
22602     +   SOMvads [1] + ( IMP_HasChildren1 - 0.4191569788907 )**2;
22603     +   SOMvads [2] + ( IMP_HasChildren1 - 0.12412330574342 )**2;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
22604     +   SOMvads [3] + ( IMP_HasChildren1 - 0.38349344073152 )**2;
MPRINT(EM_DIAGRAM):   _vqnvar = 9 - _vqmvar;
22605     +   SOMvads [4] + ( IMP_HasChildren1 - -1.07067607728471 )**2;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 1.3301360013429E-11 then do;
22606     +end;
MPRINT(EM_DIAGRAM):   SOM_SEGMENT = .;
MPRINT(EM_DIAGRAM):   Distance = .;
22607     +else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   end;
22608     +_vqnvar = 9 - _vqmvar;
MPRINT(EM_DIAGRAM):   else do;
22609     +if _vqnvar <= 1.3301360013429E-11 then do;
MPRINT(EM_DIAGRAM):   SOM_SEGMENT = 1;
MPRINT(EM_DIAGRAM):   Distance = SOMvads [1];
22610     +   SOM_SEGMENT = .; Distance = .;
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
22611     +end;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 4;
22612     +else do;
MPRINT(EM_DIAGRAM):   if SOMvads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   SOM_SEGMENT = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = SOMvads [_vqclus];
22613     +   SOM_SEGMENT = 1; Distance = SOMvads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
22614     +   _vqfzdst = Distance * 0.99999999999988; drop _vqfzdst;
MPRINT(EM_DIAGRAM):   end;
22615     +   do _vqclus = 2 to 4;
MPRINT(EM_DIAGRAM):   end;
22616     +      if SOMvads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (9 / _vqnvar));
22617     +         SOM_SEGMENT = _vqclus; Distance = SOMvads [_vqclus];
MPRINT(EM_DIAGRAM):   end;
22618     +         _vqfzdst = Distance * 0.99999999999988;
22619     +      end;
MPRINT(EM_DIAGRAM):   *** SOM Row and Column;
22620     +   end;
MPRINT(EM_DIAGRAM):   label SOM_DIMENSION1 = 'SOM Dimension1' ;
22621     +   Distance = sqrt(Distance * (9 / _vqnvar));
22622     +end;
MPRINT(EM_DIAGRAM):   label SOM_DIMENSION2 = 'SOM Dimension2' ;
22623     +
22624     +*** SOM Row and Column;
MPRINT(EM_DIAGRAM):   label SOM_ID = 'SOM ID' ;
22625     +label SOM_DIMENSION1 = 'SOM Dimension1' ;
22626     +label SOM_DIMENSION2 = 'SOM Dimension2' ;
MPRINT(EM_DIAGRAM):   length SOM_ID $8;
22627     +label SOM_ID = 'SOM ID' ;
MPRINT(EM_DIAGRAM):   if SOM_SEGMENT > 0 then do;
MPRINT(EM_DIAGRAM):   SOM_DIMENSION1 = 1 + floor(( SOM_SEGMENT - 1) / 2);
22628     +length SOM_ID $8;
MPRINT(EM_DIAGRAM):   SOM_DIMENSION2 = 1 + mod( SOM_SEGMENT - 1, 2 );
MPRINT(EM_DIAGRAM):   SOM_ID = put( SOM_DIMENSION1 ,8. );
MPRINT(EM_DIAGRAM):   SOM_ID = left( SOM_ID );
22629     +if SOM_SEGMENT > 0 then do;
MPRINT(EM_DIAGRAM):   _vqlen = 1 + length( SOM_ID );
MPRINT(EM_DIAGRAM):   drop _vqlen;
22630     +   SOM_DIMENSION1 = 1 + floor(( SOM_SEGMENT - 1) / 2);
MPRINT(EM_DIAGRAM):   substr( SOM_ID , _vqlen , 1 ) = ':';
22631     +   SOM_DIMENSION2 = 1 + mod( SOM_SEGMENT - 1, 2 );
22632     +   SOM_ID = put( SOM_DIMENSION1 ,8. );
MPRINT(EM_DIAGRAM):   length _dm8 $8;
22633     +   SOM_ID = left( SOM_ID );
MPRINT(EM_DIAGRAM):   _dm8 = put( SOM_DIMENSION2 , 8. );
22634     +   _vqlen = 1 + length( SOM_ID ); drop _vqlen;
MPRINT(EM_DIAGRAM):   _dm8 = left(_dm8);
MPRINT(EM_DIAGRAM):   drop _dm8;
22635     +   substr( SOM_ID , _vqlen , 1 ) = ':';
MPRINT(EM_DIAGRAM):   substr( SOM_ID , _vqlen+1 ) = _dm8;
22636     +   length _dm8 $8; _dm8 = put( SOM_DIMENSION2 , 8. );
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   SOM_DIMENSION1 = .;
MPRINT(EM_DIAGRAM):   SOM_DIMENSION2 = .;
MPRINT(EM_DIAGRAM):   SOM_ID = ' ';
MPRINT(EM_DIAGRAM):   end;
22637     +   _dm8 = left(_dm8); drop _dm8;
22638     +   substr( SOM_ID , _vqlen+1 ) = _dm8;
MPRINT(EM_DIAGRAM):   SOMvlex :;
22639     +end;
22640     +else do; SOM_DIMENSION1 = .; SOM_DIMENSION2 = .; SOM_ID = ' '; end;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
22641     +SOMvlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
22642     +
22643     +***************************************;
22644     +*** End Scoring Code from PROC DMVQ ***;
22645     +***************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
22646      run;

NOTE: DATA STEP view saved on file EMWS1.SOM_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.FILTER_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.14 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
      

MPRINT(EM_DIAGRAM):   quit;
22647      quit;
22648      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22650      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
22651      * SOM: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * SOM: Computing metadata for TRAIN data;
22652      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.SOM_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "\\Mac\Home\Documents\DataMining\DM-CustomerSegmentation-master\insurance_segmentation\Workspaces\EMWS1\SOM\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.SOM_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.SOM_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.SOM_TRAIN out=WORK.M2RB14C_ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2RB14C_;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2RB14C_(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2RB14C_;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2RB14C_;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2FONNKK NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FONNKK;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FONNKK;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3LDDXZS(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FONNKK;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FONNKK;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FONNKK;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FONNKK;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FONNKK;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Filter_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Filter_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.SOM_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "SOM";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * SOM: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   select(UPCASE(NAME));
MPRINT(EM_DIAGRAM):   when('SEGMENT') do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('SOM_SEGMENT') do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('SOM_DIMENSION1') do;
MPRINT(EM_DIAGRAM):   ROLE = 'INPUT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('SOM_DIMENSION2') do;
MPRINT(EM_DIAGRAM):   ROLE = 'INPUT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('DISTANCE') do;
MPRINT(EM_DIAGRAM):   ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('_IMPUTE_') do;
MPRINT(EM_DIAGRAM):   ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('SOM_ID') delete;
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.SOM_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
